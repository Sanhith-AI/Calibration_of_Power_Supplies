
calibration_of_power_supplies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800aa40  0800aa40  0001aa40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af2c  0800af2c  0001af2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af34  0800af34  0001af34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800af38  0800af38  0001af38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  20000000  0800af3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e8  200001f8  0800b134  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005e0  0800b134  000205e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002225e  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003745  00000000  00000000  00042484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000a908  00000000  00000000  00045bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d60  00000000  00000000  000504d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000db0  00000000  00000000  00051238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003767a  00000000  00000000  00051fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000172cb  00000000  00000000  00089662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015afbe  00000000  00000000  000a092d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001fb8eb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000366c  00000000  00000000  001fb940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001f8 	.word	0x200001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aa28 	.word	0x0800aa28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001fc 	.word	0x200001fc
 80002dc:	0800aa28 	.word	0x0800aa28

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <CAL_ADS8699_Configuration>:
// <9-bit address> is realized by adding a 0 at the MSB location followed by an 8-bit register address as defined
// Configuring registers which are necessary for project here but one can configure all 9 configuration registers according to project

HAL_StatusTypeDef CAL_ADS8699_Configuration(SPI_HandleTypeDef *hspi, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,uint8_t SDI_CTL_REG_DATA2,uint8_t DATAOUT_CTL_REG_DATA2,uint8_t RANGE_SEL_REG_DATA2)

{
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	4604      	mov	r4, r0
 8000a76:	460d      	mov	r5, r1
 8000a78:	4616      	mov	r6, r2
 8000a7a:	f88d 3007 	strb.w	r3, [sp, #7]

	HAL_StatusTypeDef errorcode = HAL_OK;

// Configuring SDI_CTL_REG register to select the SPI mode of ADC
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4631      	mov	r1, r6
 8000a82:	4628      	mov	r0, r5
 8000a84:	f001 feca 	bl	800281c <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(hspi, &SDI_CTL_REG_WRITE, 1, 100);
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4964      	ldr	r1, [pc, #400]	; (8000c20 <CAL_ADS8699_Configuration+0x1b0>)
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f003 fde4 	bl	800465c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &SDI_CTL_REG_ADDRESS, 1, 100);
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2201      	movs	r2, #1
 8000a98:	4962      	ldr	r1, [pc, #392]	; (8000c24 <CAL_ADS8699_Configuration+0x1b4>)
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f003 fdde 	bl	800465c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &SDI_CTL_REG_DATA1, 1, 100);
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4960      	ldr	r1, [pc, #384]	; (8000c28 <CAL_ADS8699_Configuration+0x1b8>)
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f003 fdd8 	bl	800465c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &SDI_CTL_REG_DATA2, 1, 100); // User can send this data to select the one of 4 SPI modes of ADC as described in data sheet of ADS8699
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f10d 0107 	add.w	r1, sp, #7
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f003 fdd1 	bl	800465c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	4631      	mov	r1, r6
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f001 feac 	bl	800281c <HAL_GPIO_WritePin>

	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f004 fa97 	bl	8004ff8 <HAL_SPI_GetState>
 8000aca:	2801      	cmp	r0, #1
 8000acc:	d1fa      	bne.n	8000ac4 <CAL_ADS8699_Configuration+0x54>

		       	   {

		       	   }

    HAL_Delay(100);
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f001 fa58 	bl	8001f84 <HAL_Delay>

// Configuring SDO_CTL_REG register

    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f001 fe9f 	bl	800281c <HAL_GPIO_WritePin>

    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_WRITE, 1, 100);
 8000ade:	2364      	movs	r3, #100	; 0x64
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4952      	ldr	r1, [pc, #328]	; (8000c2c <CAL_ADS8699_Configuration+0x1bc>)
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f003 fdb9 	bl	800465c <HAL_SPI_Transmit>
    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_ADDRESS, 1, 100);
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2201      	movs	r2, #1
 8000aee:	4950      	ldr	r1, [pc, #320]	; (8000c30 <CAL_ADS8699_Configuration+0x1c0>)
 8000af0:	4620      	mov	r0, r4
 8000af2:	f003 fdb3 	bl	800465c <HAL_SPI_Transmit>
    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA1, 1, 100);
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2201      	movs	r2, #1
 8000afa:	494e      	ldr	r1, [pc, #312]	; (8000c34 <CAL_ADS8699_Configuration+0x1c4>)
 8000afc:	4620      	mov	r0, r4
 8000afe:	f003 fdad 	bl	800465c <HAL_SPI_Transmit>
    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA2, 1, 100);
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	494c      	ldr	r1, [pc, #304]	; (8000c38 <CAL_ADS8699_Configuration+0x1c8>)
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f003 fda7 	bl	800465c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4631      	mov	r1, r6
 8000b12:	4628      	mov	r0, r5
 8000b14:	f001 fe82 	bl	800281c <HAL_GPIO_WritePin>

    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f004 fa6d 	bl	8004ff8 <HAL_SPI_GetState>
 8000b1e:	2801      	cmp	r0, #1
 8000b20:	d1fa      	bne.n	8000b18 <CAL_ADS8699_Configuration+0xa8>

    	       	   {

    	       	   }

    HAL_Delay(100);
 8000b22:	2064      	movs	r0, #100	; 0x64
 8000b24:	f001 fa2e 	bl	8001f84 <HAL_Delay>

// Configuring RANGE_SEL_REG register to select multiple input ranges


 	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	f001 fe75 	bl	800281c <HAL_GPIO_WritePin>

 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_WRITE, 1, 100);
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	2201      	movs	r2, #1
 8000b36:	4941      	ldr	r1, [pc, #260]	; (8000c3c <CAL_ADS8699_Configuration+0x1cc>)
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f003 fd8f 	bl	800465c <HAL_SPI_Transmit>
 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_ADDRESS, 1, 100);
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	2201      	movs	r2, #1
 8000b42:	493f      	ldr	r1, [pc, #252]	; (8000c40 <CAL_ADS8699_Configuration+0x1d0>)
 8000b44:	4620      	mov	r0, r4
 8000b46:	f003 fd89 	bl	800465c <HAL_SPI_Transmit>
 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_DATA1, 1, 100);
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	493d      	ldr	r1, [pc, #244]	; (8000c44 <CAL_ADS8699_Configuration+0x1d4>)
 8000b50:	4620      	mov	r0, r4
 8000b52:	f003 fd83 	bl	800465c <HAL_SPI_Transmit>
 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_DATA2, 1, 100); // User can send this data to select the bipolar and unipolar input ranges of ADC as described in data sheet of ADS8699
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2201      	movs	r2, #1
 8000b5a:	a907      	add	r1, sp, #28
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f003 fd7d 	bl	800465c <HAL_SPI_Transmit>


    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	4631      	mov	r1, r6
 8000b66:	4628      	mov	r0, r5
 8000b68:	f001 fe58 	bl	800281c <HAL_GPIO_WritePin>

    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f004 fa43 	bl	8004ff8 <HAL_SPI_GetState>
 8000b72:	2801      	cmp	r0, #1
 8000b74:	d1fa      	bne.n	8000b6c <CAL_ADS8699_Configuration+0xfc>

   	   	   	   	   {

   	   	   	   	   }

    HAL_Delay(100);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f001 fa04 	bl	8001f84 <HAL_Delay>

// Configuring DATAOUT_CTL_REG register to control the conversion data

    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4631      	mov	r1, r6
 8000b80:	4628      	mov	r0, r5
 8000b82:	f001 fe4b 	bl	800281c <HAL_GPIO_WritePin>

   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_WRITE, 1, 100);
 8000b86:	2364      	movs	r3, #100	; 0x64
 8000b88:	2201      	movs	r2, #1
 8000b8a:	492f      	ldr	r1, [pc, #188]	; (8000c48 <CAL_ADS8699_Configuration+0x1d8>)
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f003 fd65 	bl	800465c <HAL_SPI_Transmit>
   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_ADDRESS, 1, 100);
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	2201      	movs	r2, #1
 8000b96:	492d      	ldr	r1, [pc, #180]	; (8000c4c <CAL_ADS8699_Configuration+0x1dc>)
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f003 fd5f 	bl	800465c <HAL_SPI_Transmit>
   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_DATA1, 1, 100);
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	492b      	ldr	r1, [pc, #172]	; (8000c50 <CAL_ADS8699_Configuration+0x1e0>)
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f003 fd59 	bl	800465c <HAL_SPI_Transmit>
   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_DATA2, 1, 100); // User can send this data to select test mode and conversion mode of ADC as described in data sheet of ADS8699
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	2201      	movs	r2, #1
 8000bae:	a906      	add	r1, sp, #24
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f003 fd53 	bl	800465c <HAL_SPI_Transmit>

   	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4631      	mov	r1, r6
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f001 fe2e 	bl	800281c <HAL_GPIO_WritePin>

   	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f004 fa19 	bl	8004ff8 <HAL_SPI_GetState>
 8000bc6:	2801      	cmp	r0, #1
 8000bc8:	d1fa      	bne.n	8000bc0 <CAL_ADS8699_Configuration+0x150>

   	       	     {

   	       	     }

   	HAL_Delay(100);
 8000bca:	2064      	movs	r0, #100	; 0x64
 8000bcc:	f001 f9da 	bl	8001f84 <HAL_Delay>

// Configuring SDO_CTL_REG register to read data from the ADC

   	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f001 fe21 	bl	800281c <HAL_GPIO_WritePin>

   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_READ, 1, 100);
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	2201      	movs	r2, #1
 8000bde:	491d      	ldr	r1, [pc, #116]	; (8000c54 <CAL_ADS8699_Configuration+0x1e4>)
 8000be0:	4620      	mov	r0, r4
 8000be2:	f003 fd3b 	bl	800465c <HAL_SPI_Transmit>
   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_ADDRESS, 1, 100);
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	2201      	movs	r2, #1
 8000bea:	4911      	ldr	r1, [pc, #68]	; (8000c30 <CAL_ADS8699_Configuration+0x1c0>)
 8000bec:	4620      	mov	r0, r4
 8000bee:	f003 fd35 	bl	800465c <HAL_SPI_Transmit>
   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA1, 1, 100);
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	490f      	ldr	r1, [pc, #60]	; (8000c34 <CAL_ADS8699_Configuration+0x1c4>)
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f003 fd2f 	bl	800465c <HAL_SPI_Transmit>
   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA2, 1, 100);
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	2201      	movs	r2, #1
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <CAL_ADS8699_Configuration+0x1c8>)
 8000c04:	4620      	mov	r0, r4
 8000c06:	f003 fd29 	bl	800465c <HAL_SPI_Transmit>

   	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f001 fe04 	bl	800281c <HAL_GPIO_WritePin>

   	HAL_Delay(100);
 8000c14:	2064      	movs	r0, #100	; 0x64
 8000c16:	f001 f9b5 	bl	8001f84 <HAL_Delay>

   	return errorcode;
}
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
 8000c20:	20000005 	.word	0x20000005
 8000c24:	20000004 	.word	0x20000004
 8000c28:	20000216 	.word	0x20000216
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000006 	.word	0x20000006
 8000c34:	20000217 	.word	0x20000217
 8000c38:	20000218 	.word	0x20000218
 8000c3c:	20000003 	.word	0x20000003
 8000c40:	20000002 	.word	0x20000002
 8000c44:	20000215 	.word	0x20000215
 8000c48:	20000001 	.word	0x20000001
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000214 	.word	0x20000214
 8000c54:	20000007 	.word	0x20000007

08000c58 <CAL_ADS8699_Read_Data>:

// Function to read 32bits of data from ADC ADS8699

HAL_StatusTypeDef CAL_ADS8699_Read_Data(SPI_HandleTypeDef *hspi, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t *data)
{
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	4606      	mov	r6, r0
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	4615      	mov	r5, r2
 8000c60:	461f      	mov	r7, r3

 //int i=CAL_ADC_Averaging_Buffer(x);

	//	uint8_t rx[i];

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	4629      	mov	r1, r5
 8000c66:	4620      	mov	r0, r4
 8000c68:	f001 fdd8 	bl	800281c <HAL_GPIO_WritePin>


			 HAL_SPI_Receive(hspi,data,sizeof(data),100);
 8000c6c:	2364      	movs	r3, #100	; 0x64
 8000c6e:	2204      	movs	r2, #4
 8000c70:	4639      	mov	r1, r7
 8000c72:	4630      	mov	r0, r6
 8000c74:	f004 f864 	bl	8004d40 <HAL_SPI_Receive>


	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f001 fdcd 	bl	800281c <HAL_GPIO_WritePin>

	//measured_data = CAL_ADC_Real_Measured_Data(RANGE_SEL_REG_DATA2, rx,i);


return errorcode;
}
 8000c82:	2000      	movs	r0, #0
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c88 <CAL_ADC_ThermoCoupleModule_Configuration>:
//First 8 bit serial data should be send to shift register to select the SPI chip select and ADC enable pin for each channel
//After selecting channel ADC should configure exactly same as shown in  CAL_ADS8699_Configuration

HAL_StatusTypeDef CAL_ADC_ThermoCoupleModule_Configuration(SPI_HandleTypeDef *spi,SPI_HandleTypeDef *hspi,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,uint8_t *tx,uint8_t *tx1, uint8_t SDI_CTL_REG_DATA2,uint8_t DATAOUT_CTL_REG_DATA2,uint8_t RANGE_SEL_REG_DATA2)

{
 8000c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4607      	mov	r7, r0
 8000c8e:	460c      	mov	r4, r1
 8000c90:	4615      	mov	r5, r2
 8000c92:	461e      	mov	r6, r3
 8000c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c98:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
	HAL_StatusTypeDef errorcode = HAL_OK;



	CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx);
 8000c9c:	464b      	mov	r3, r9
 8000c9e:	4632      	mov	r2, r6
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	f000 f924 	bl	8000eee <CAL_WriteShiftRegister>

	// Configuring SDI_CTL_REG register to select the SPI mode of ADC

			HAL_SPI_Transmit(hspi, &SDI_CTL_REG_WRITE, 1, 100);
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4969      	ldr	r1, [pc, #420]	; (8000e50 <CAL_ADC_ThermoCoupleModule_Configuration+0x1c8>)
 8000cac:	4620      	mov	r0, r4
 8000cae:	f003 fcd5 	bl	800465c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(hspi, &SDI_CTL_REG_ADDRESS, 1, 100);
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4967      	ldr	r1, [pc, #412]	; (8000e54 <CAL_ADC_ThermoCoupleModule_Configuration+0x1cc>)
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f003 fccf 	bl	800465c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(hspi, &SDI_CTL_REG_DATA1, 1, 100);
 8000cbe:	2364      	movs	r3, #100	; 0x64
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4965      	ldr	r1, [pc, #404]	; (8000e58 <CAL_ADC_ThermoCoupleModule_Configuration+0x1d0>)
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f003 fcc9 	bl	800465c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(hspi, &SDI_CTL_REG_DATA2, 1, 100); // User can send this data to select the one of 4 SPI modes of ADC as described in data sheet of ADS8699
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	2201      	movs	r2, #1
 8000cce:	a90a      	add	r1, sp, #40	; 0x28
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f003 fcc3 	bl	800465c <HAL_SPI_Transmit>

	CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx1);
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	4632      	mov	r2, r6
 8000cda:	4629      	mov	r1, r5
 8000cdc:	4638      	mov	r0, r7
 8000cde:	f000 f906 	bl	8000eee <CAL_WriteShiftRegister>

		while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f004 f988 	bl	8004ff8 <HAL_SPI_GetState>
 8000ce8:	2801      	cmp	r0, #1
 8000cea:	d1fa      	bne.n	8000ce2 <CAL_ADC_ThermoCoupleModule_Configuration+0x5a>

			       	   {

			       	   }

	    HAL_Delay(100);
 8000cec:	2064      	movs	r0, #100	; 0x64
 8000cee:	f001 f949 	bl	8001f84 <HAL_Delay>

	// Configuring SDO_CTL_REG register

	  CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx);
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	4632      	mov	r2, r6
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	f000 f8f8 	bl	8000eee <CAL_WriteShiftRegister>

	    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_WRITE, 1, 100);
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	2201      	movs	r2, #1
 8000d02:	4956      	ldr	r1, [pc, #344]	; (8000e5c <CAL_ADC_ThermoCoupleModule_Configuration+0x1d4>)
 8000d04:	4620      	mov	r0, r4
 8000d06:	f003 fca9 	bl	800465c <HAL_SPI_Transmit>
	    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_ADDRESS, 1, 100);
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4954      	ldr	r1, [pc, #336]	; (8000e60 <CAL_ADC_ThermoCoupleModule_Configuration+0x1d8>)
 8000d10:	4620      	mov	r0, r4
 8000d12:	f003 fca3 	bl	800465c <HAL_SPI_Transmit>
	    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA1, 1, 100);
 8000d16:	2364      	movs	r3, #100	; 0x64
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4952      	ldr	r1, [pc, #328]	; (8000e64 <CAL_ADC_ThermoCoupleModule_Configuration+0x1dc>)
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f003 fc9d 	bl	800465c <HAL_SPI_Transmit>
	    	HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA2, 1, 100);
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	2201      	movs	r2, #1
 8000d26:	4950      	ldr	r1, [pc, #320]	; (8000e68 <CAL_ADC_ThermoCoupleModule_Configuration+0x1e0>)
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f003 fc97 	bl	800465c <HAL_SPI_Transmit>

	 CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx1);
 8000d2e:	4643      	mov	r3, r8
 8000d30:	4632      	mov	r2, r6
 8000d32:	4629      	mov	r1, r5
 8000d34:	4638      	mov	r0, r7
 8000d36:	f000 f8da 	bl	8000eee <CAL_WriteShiftRegister>

	    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f004 f95c 	bl	8004ff8 <HAL_SPI_GetState>
 8000d40:	2801      	cmp	r0, #1
 8000d42:	d1fa      	bne.n	8000d3a <CAL_ADC_ThermoCoupleModule_Configuration+0xb2>

	    	       	   {

	    	       	   }

	    HAL_Delay(100);
 8000d44:	2064      	movs	r0, #100	; 0x64
 8000d46:	f001 f91d 	bl	8001f84 <HAL_Delay>

	// Configuring RANGE_SEL_REG register to select multiple input ranges


	    CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx);
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	4632      	mov	r2, r6
 8000d4e:	4629      	mov	r1, r5
 8000d50:	4638      	mov	r0, r7
 8000d52:	f000 f8cc 	bl	8000eee <CAL_WriteShiftRegister>

	 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_WRITE, 1, 100);
 8000d56:	2364      	movs	r3, #100	; 0x64
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4944      	ldr	r1, [pc, #272]	; (8000e6c <CAL_ADC_ThermoCoupleModule_Configuration+0x1e4>)
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f003 fc7d 	bl	800465c <HAL_SPI_Transmit>
	 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_ADDRESS, 1, 100);
 8000d62:	2364      	movs	r3, #100	; 0x64
 8000d64:	2201      	movs	r2, #1
 8000d66:	4942      	ldr	r1, [pc, #264]	; (8000e70 <CAL_ADC_ThermoCoupleModule_Configuration+0x1e8>)
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f003 fc77 	bl	800465c <HAL_SPI_Transmit>
	 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_DATA1, 1, 100);
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	2201      	movs	r2, #1
 8000d72:	4940      	ldr	r1, [pc, #256]	; (8000e74 <CAL_ADC_ThermoCoupleModule_Configuration+0x1ec>)
 8000d74:	4620      	mov	r0, r4
 8000d76:	f003 fc71 	bl	800465c <HAL_SPI_Transmit>
	 		HAL_SPI_Transmit(hspi, &RANGE_SEL_REG_DATA2, 1, 100); // User can send this data to select the bipolar and unipolar input ranges of ADC as described in data sheet of ADS8699
 8000d7a:	2364      	movs	r3, #100	; 0x64
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	a90c      	add	r1, sp, #48	; 0x30
 8000d80:	4620      	mov	r0, r4
 8000d82:	f003 fc6b 	bl	800465c <HAL_SPI_Transmit>


	 	CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx1);
 8000d86:	4643      	mov	r3, r8
 8000d88:	4632      	mov	r2, r6
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4638      	mov	r0, r7
 8000d8e:	f000 f8ae 	bl	8000eee <CAL_WriteShiftRegister>

	    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000d92:	4620      	mov	r0, r4
 8000d94:	f004 f930 	bl	8004ff8 <HAL_SPI_GetState>
 8000d98:	2801      	cmp	r0, #1
 8000d9a:	d1fa      	bne.n	8000d92 <CAL_ADC_ThermoCoupleModule_Configuration+0x10a>

	   	   	   	   	   {

	   	   	   	   	   }

	    HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f001 f8f1 	bl	8001f84 <HAL_Delay>

	// Configuring DATAOUT_CTL_REG register to control the conversion data

	    CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx);
 8000da2:	464b      	mov	r3, r9
 8000da4:	4632      	mov	r2, r6
 8000da6:	4629      	mov	r1, r5
 8000da8:	4638      	mov	r0, r7
 8000daa:	f000 f8a0 	bl	8000eee <CAL_WriteShiftRegister>

	   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_WRITE, 1, 100);
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2201      	movs	r2, #1
 8000db2:	4931      	ldr	r1, [pc, #196]	; (8000e78 <CAL_ADC_ThermoCoupleModule_Configuration+0x1f0>)
 8000db4:	4620      	mov	r0, r4
 8000db6:	f003 fc51 	bl	800465c <HAL_SPI_Transmit>
	   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_ADDRESS, 1, 100);
 8000dba:	2364      	movs	r3, #100	; 0x64
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	492f      	ldr	r1, [pc, #188]	; (8000e7c <CAL_ADC_ThermoCoupleModule_Configuration+0x1f4>)
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f003 fc4b 	bl	800465c <HAL_SPI_Transmit>
	   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_DATA1, 1, 100);
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	2201      	movs	r2, #1
 8000dca:	492d      	ldr	r1, [pc, #180]	; (8000e80 <CAL_ADC_ThermoCoupleModule_Configuration+0x1f8>)
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f003 fc45 	bl	800465c <HAL_SPI_Transmit>
	   	   HAL_SPI_Transmit(hspi, &DATAOUT_CTL_REG_DATA2, 1, 100); // User can send this data to select test mode and conversion mode of ADC as described in data sheet of ADS8699
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	a90b      	add	r1, sp, #44	; 0x2c
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f003 fc3f 	bl	800465c <HAL_SPI_Transmit>

	   	CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx1);
 8000dde:	4643      	mov	r3, r8
 8000de0:	4632      	mov	r2, r6
 8000de2:	4629      	mov	r1, r5
 8000de4:	4638      	mov	r0, r7
 8000de6:	f000 f882 	bl	8000eee <CAL_WriteShiftRegister>

	   	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 8000dea:	4620      	mov	r0, r4
 8000dec:	f004 f904 	bl	8004ff8 <HAL_SPI_GetState>
 8000df0:	2801      	cmp	r0, #1
 8000df2:	d1fa      	bne.n	8000dea <CAL_ADC_ThermoCoupleModule_Configuration+0x162>

	   	       	     {

	   	       	     }

	   	HAL_Delay(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f001 f8c5 	bl	8001f84 <HAL_Delay>

	// Configuring SDO_CTL_REG register to read data from the ADC

	   	CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx);
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	4632      	mov	r2, r6
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4638      	mov	r0, r7
 8000e02:	f000 f874 	bl	8000eee <CAL_WriteShiftRegister>

	   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_READ, 1, 100);
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	2201      	movs	r2, #1
 8000e0a:	491e      	ldr	r1, [pc, #120]	; (8000e84 <CAL_ADC_ThermoCoupleModule_Configuration+0x1fc>)
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f003 fc25 	bl	800465c <HAL_SPI_Transmit>
	   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_ADDRESS, 1, 100);
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	2201      	movs	r2, #1
 8000e16:	4912      	ldr	r1, [pc, #72]	; (8000e60 <CAL_ADC_ThermoCoupleModule_Configuration+0x1d8>)
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f003 fc1f 	bl	800465c <HAL_SPI_Transmit>
	   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA1, 1, 100);
 8000e1e:	2364      	movs	r3, #100	; 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	4910      	ldr	r1, [pc, #64]	; (8000e64 <CAL_ADC_ThermoCoupleModule_Configuration+0x1dc>)
 8000e24:	4620      	mov	r0, r4
 8000e26:	f003 fc19 	bl	800465c <HAL_SPI_Transmit>
	   	   HAL_SPI_Transmit(hspi, &SDO_CTL_REG_DATA2, 1, 100);
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <CAL_ADC_ThermoCoupleModule_Configuration+0x1e0>)
 8000e30:	4620      	mov	r0, r4
 8000e32:	f003 fc13 	bl	800465c <HAL_SPI_Transmit>

	   	CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx1);
 8000e36:	4643      	mov	r3, r8
 8000e38:	4632      	mov	r2, r6
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	f000 f856 	bl	8000eee <CAL_WriteShiftRegister>

	   	HAL_Delay(100);
 8000e42:	2064      	movs	r0, #100	; 0x64
 8000e44:	f001 f89e 	bl	8001f84 <HAL_Delay>

	   	return errorcode;
}
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000005 	.word	0x20000005
 8000e54:	20000004 	.word	0x20000004
 8000e58:	20000216 	.word	0x20000216
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000006 	.word	0x20000006
 8000e64:	20000217 	.word	0x20000217
 8000e68:	20000218 	.word	0x20000218
 8000e6c:	20000003 	.word	0x20000003
 8000e70:	20000002 	.word	0x20000002
 8000e74:	20000215 	.word	0x20000215
 8000e78:	20000001 	.word	0x20000001
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000214 	.word	0x20000214
 8000e84:	20000007 	.word	0x20000007

08000e88 <CAL_ADC_ThermoCoupleModule_Read_Data>:

HAL_StatusTypeDef CAL_ADC_ThermoCoupleModule_Read_Data(SPI_HandleTypeDef *spi,SPI_HandleTypeDef *hspi,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,uint8_t *tx,uint8_t *tx1,uint8_t *data)

{
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	4606      	mov	r6, r0
 8000e8c:	460f      	mov	r7, r1
 8000e8e:	4614      	mov	r4, r2
 8000e90:	461d      	mov	r5, r3
	// int j=0;
		//HAL_StatusTypeDef errorcode = HAL_OK;

		CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx);
 8000e92:	9b06      	ldr	r3, [sp, #24]
 8000e94:	462a      	mov	r2, r5
 8000e96:	4621      	mov	r1, r4
 8000e98:	f000 f829 	bl	8000eee <CAL_WriteShiftRegister>



			 HAL_SPI_Receive(hspi,data,sizeof(data),100);
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	9908      	ldr	r1, [sp, #32]
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	f003 ff4c 	bl	8004d40 <HAL_SPI_Receive>



		CAL_WriteShiftRegister(spi,GPIOx, GPIO_Pin,tx1);
 8000ea8:	9b07      	ldr	r3, [sp, #28]
 8000eaa:	462a      	mov	r2, r5
 8000eac:	4621      	mov	r1, r4
 8000eae:	4630      	mov	r0, r6
 8000eb0:	f000 f81d 	bl	8000eee <CAL_WriteShiftRegister>

		//return errorcode;
}
 8000eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000eb6 <Thermo_Couple_Channel_Select_Data>:
//This function is send data to shift register to make the chip select of ADC SPI low and ADC enable high

HAL_StatusTypeDef Thermo_Couple_Channel_Select_Data(int data)
{
	uint8_t tx;
	switch(data)
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d007      	beq.n	8000eca <Thermo_Couple_Channel_Select_Data+0x14>
 8000eba:	2803      	cmp	r0, #3
 8000ebc:	d007      	beq.n	8000ece <Thermo_Couple_Channel_Select_Data+0x18>
 8000ebe:	2801      	cmp	r0, #1
 8000ec0:	d001      	beq.n	8000ec6 <Thermo_Couple_Channel_Select_Data+0x10>
 8000ec2:	20e1      	movs	r0, #225	; 0xe1
				break;

		}

return tx;
}
 8000ec4:	4770      	bx	lr
				 tx=channe12;
 8000ec6:	20d2      	movs	r0, #210	; 0xd2
 8000ec8:	4770      	bx	lr
				 tx=channe13;
 8000eca:	20b4      	movs	r0, #180	; 0xb4
 8000ecc:	4770      	bx	lr
				tx=channe14;
 8000ece:	2078      	movs	r0, #120	; 0x78
 8000ed0:	4770      	bx	lr

08000ed2 <Thermo_Couple_Channel_Select_Data1>:
//This function is send data to shift register to make the chip select of ADC SPI high and ADC enable high

HAL_StatusTypeDef Thermo_Couple_Channel_Select_Data1(int data)
{
	uint8_t tx;
	switch(data)
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d007      	beq.n	8000ee6 <Thermo_Couple_Channel_Select_Data1+0x14>
 8000ed6:	2803      	cmp	r0, #3
 8000ed8:	d007      	beq.n	8000eea <Thermo_Couple_Channel_Select_Data1+0x18>
 8000eda:	2801      	cmp	r0, #1
 8000edc:	d001      	beq.n	8000ee2 <Thermo_Couple_Channel_Select_Data1+0x10>
 8000ede:	20f1      	movs	r0, #241	; 0xf1
				break;

		}

return tx;
}
 8000ee0:	4770      	bx	lr
				 tx=channel2_1;
 8000ee2:	20f2      	movs	r0, #242	; 0xf2
 8000ee4:	4770      	bx	lr
				 tx=channel3_1;
 8000ee6:	20f4      	movs	r0, #244	; 0xf4
 8000ee8:	4770      	bx	lr
				tx=channel4_1;
 8000eea:	20f8      	movs	r0, #248	; 0xf8
 8000eec:	4770      	bx	lr

08000eee <CAL_WriteShiftRegister>:
// Thermocouple module contain 4 channels for ADC chip. User can enable each channel of ADC separately
// To select channel user have to write correct 8 bit serial data into shift register.

HAL_StatusTypeDef CAL_WriteShiftRegister(SPI_HandleTypeDef *hspi, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t* data)

{
 8000eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	4615      	mov	r5, r2
 8000ef6:	461f      	mov	r7, r3



	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET); // reset state
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4629      	mov	r1, r5
 8000efc:	4620      	mov	r0, r4
 8000efe:	f001 fc8d 	bl	800281c <HAL_GPIO_WritePin>

				  // Writing shift register

				  HAL_SPI_Transmit(hspi, data, 1, 100); // To select input current range
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	4639      	mov	r1, r7
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f003 fba7 	bl	800465c <HAL_SPI_Transmit>

				  for(int i = 0; i < 500; i++) { __NOP(); } // Wait N cycles
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f14:	da02      	bge.n	8000f1c <CAL_WriteShiftRegister+0x2e>
 8000f16:	bf00      	nop
 8000f18:	3301      	adds	r3, #1
 8000f1a:	e7f9      	b.n	8000f10 <CAL_WriteShiftRegister+0x22>
				  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4629      	mov	r1, r5
 8000f20:	4620      	mov	r0, r4
 8000f22:	f001 fc7b 	bl	800281c <HAL_GPIO_WritePin>
				  for(int i = 0; i < 500; i++) { __NOP(); } // Wait N cycles
 8000f26:	2300      	movs	r3, #0
 8000f28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f2c:	da02      	bge.n	8000f34 <CAL_WriteShiftRegister+0x46>
 8000f2e:	bf00      	nop
 8000f30:	3301      	adds	r3, #1
 8000f32:	e7f9      	b.n	8000f28 <CAL_WriteShiftRegister+0x3a>
				  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	4629      	mov	r1, r5
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f001 fc6f 	bl	800281c <HAL_GPIO_WritePin>


}
 8000f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	2400      	movs	r4, #0
 8000f48:	9409      	str	r4, [sp, #36]	; 0x24
 8000f4a:	940a      	str	r4, [sp, #40]	; 0x28
 8000f4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8000f4e:	940c      	str	r4, [sp, #48]	; 0x30
 8000f50:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f52:	4b5c      	ldr	r3, [pc, #368]	; (80010c4 <MX_GPIO_Init+0x184>)
 8000f54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f58:	f042 0210 	orr.w	r2, r2, #16
 8000f5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f64:	f002 0210 	and.w	r2, r2, #16
 8000f68:	9201      	str	r2, [sp, #4]
 8000f6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f70:	f042 0220 	orr.w	r2, r2, #32
 8000f74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f7c:	f002 0220 	and.w	r2, r2, #32
 8000f80:	9202      	str	r2, [sp, #8]
 8000f82:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f94:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f98:	9203      	str	r2, [sp, #12]
 8000f9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fa0:	f042 0204 	orr.w	r2, r2, #4
 8000fa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fac:	f002 0204 	and.w	r2, r2, #4
 8000fb0:	9204      	str	r2, [sp, #16]
 8000fb2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb8:	f042 0201 	orr.w	r2, r2, #1
 8000fbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fc4:	f002 0201 	and.w	r2, r2, #1
 8000fc8:	9205      	str	r2, [sp, #20]
 8000fca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fd0:	f042 0202 	orr.w	r2, r2, #2
 8000fd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fdc:	f002 0202 	and.w	r2, r2, #2
 8000fe0:	9206      	str	r2, [sp, #24]
 8000fe2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ff0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ff4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ff8:	9207      	str	r2, [sp, #28]
 8000ffa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001000:	f042 0208 	orr.w	r2, r2, #8
 8001004:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	9308      	str	r3, [sp, #32]
 8001012:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, uC_OK_Pin|uC_BUSY_Pin|uC_ERR_Pin, GPIO_PIN_RESET);
 8001014:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80010d0 <MX_GPIO_Init+0x190>
 8001018:	4622      	mov	r2, r4
 800101a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800101e:	4650      	mov	r0, sl
 8001020:	f001 fbfc 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MOD1_STRB_Pin|MOD2_STRB_Pin|MOD3_STRB_Pin|MOD4_STRB_Pin
 8001024:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80010d4 <MX_GPIO_Init+0x194>
 8001028:	4622      	mov	r2, r4
 800102a:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800102e:	4648      	mov	r0, r9
 8001030:	f001 fbf4 	bl	800281c <HAL_GPIO_WritePin>
                          |MOD5_STRB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOD1_DEN_Pin|MOD2_DEN_Pin|MOD3_DEN_Pin|MOD4_DEN_Pin
 8001034:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80010d8 <MX_GPIO_Init+0x198>
 8001038:	4622      	mov	r2, r4
 800103a:	217c      	movs	r1, #124	; 0x7c
 800103c:	4640      	mov	r0, r8
 800103e:	f001 fbed 	bl	800281c <HAL_GPIO_WritePin>
                          |MOD5_DEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_nRST_GPIO_Port, ADC_nRST_Pin, GPIO_PIN_RESET);
 8001042:	4f21      	ldr	r7, [pc, #132]	; (80010c8 <MX_GPIO_Init+0x188>)
 8001044:	4622      	mov	r2, r4
 8001046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104a:	4638      	mov	r0, r7
 800104c:	f001 fbe6 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOD1_nCS_Pin|MOD2_nCS_Pin|MOD3_nCS_Pin|MOD4_nCS_Pin
 8001050:	4e1e      	ldr	r6, [pc, #120]	; (80010cc <MX_GPIO_Init+0x18c>)
 8001052:	4622      	mov	r2, r4
 8001054:	211f      	movs	r1, #31
 8001056:	4630      	mov	r0, r6
 8001058:	f001 fbe0 	bl	800281c <HAL_GPIO_WritePin>
                          |MOD5_nCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : uC_OK_Pin uC_BUSY_Pin uC_ERR_Pin */
  GPIO_InitStruct.Pin = uC_OK_Pin|uC_BUSY_Pin|uC_ERR_Pin;
 800105c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001060:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2501      	movs	r5, #1
 8001064:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800106a:	a909      	add	r1, sp, #36	; 0x24
 800106c:	4650      	mov	r0, sl
 800106e:	f001 fae3 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOD1_STRB_Pin MOD2_STRB_Pin MOD3_STRB_Pin MOD4_STRB_Pin
                           MOD5_STRB_Pin */
  GPIO_InitStruct.Pin = MOD1_STRB_Pin|MOD2_STRB_Pin|MOD3_STRB_Pin|MOD4_STRB_Pin
 8001072:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001076:	9309      	str	r3, [sp, #36]	; 0x24
                          |MOD5_STRB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800107e:	a909      	add	r1, sp, #36	; 0x24
 8001080:	4648      	mov	r0, r9
 8001082:	f001 fad9 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOD1_DEN_Pin MOD2_DEN_Pin MOD3_DEN_Pin MOD4_DEN_Pin
                           MOD5_DEN_Pin */
  GPIO_InitStruct.Pin = MOD1_DEN_Pin|MOD2_DEN_Pin|MOD3_DEN_Pin|MOD4_DEN_Pin
 8001086:	237c      	movs	r3, #124	; 0x7c
 8001088:	9309      	str	r3, [sp, #36]	; 0x24
                          |MOD5_DEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	a909      	add	r1, sp, #36	; 0x24
 8001092:	4640      	mov	r0, r8
 8001094:	f001 fad0 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_nRST_Pin */
  GPIO_InitStruct.Pin = ADC_nRST_Pin;
 8001098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800109c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(ADC_nRST_GPIO_Port, &GPIO_InitStruct);
 80010a4:	a909      	add	r1, sp, #36	; 0x24
 80010a6:	4638      	mov	r0, r7
 80010a8:	f001 fac6 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOD1_nCS_Pin MOD2_nCS_Pin MOD3_nCS_Pin MOD4_nCS_Pin
                           MOD5_nCS_Pin */
  GPIO_InitStruct.Pin = MOD1_nCS_Pin|MOD2_nCS_Pin|MOD3_nCS_Pin|MOD4_nCS_Pin
 80010ac:	231f      	movs	r3, #31
 80010ae:	9309      	str	r3, [sp, #36]	; 0x24
                          |MOD5_nCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b6:	a909      	add	r1, sp, #36	; 0x24
 80010b8:	4630      	mov	r0, r6
 80010ba:	f001 fabd 	bl	8002638 <HAL_GPIO_Init>

}
 80010be:	b00e      	add	sp, #56	; 0x38
 80010c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020000 	.word	0x58020000
 80010cc:	58020c00 	.word	0x58020c00
 80010d0:	58021400 	.word	0x58021400
 80010d4:	58021c00 	.word	0x58021c00
 80010d8:	58021800 	.word	0x58021800

080010dc <CAL_writeShiftRegister1>:
{
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	4606      	mov	r6, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	4615      	mov	r5, r2
 80010e4:	461f      	mov	r7, r3
  HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_RESET); // reset state
 80010e6:	2200      	movs	r2, #0
 80010e8:	4629      	mov	r1, r5
 80010ea:	4620      	mov	r0, r4
 80010ec:	f001 fb96 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(spi1, tx,2, 100);
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	2202      	movs	r2, #2
 80010f4:	4639      	mov	r1, r7
 80010f6:	4630      	mov	r0, r6
 80010f8:	f003 fab0 	bl	800465c <HAL_SPI_Transmit>
  for(int i = 0; i < 500; i++) { __NOP(); } // Wait N cycles
 80010fc:	2300      	movs	r3, #0
 80010fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001102:	da02      	bge.n	800110a <CAL_writeShiftRegister1+0x2e>
 8001104:	bf00      	nop
 8001106:	3301      	adds	r3, #1
 8001108:	e7f9      	b.n	80010fe <CAL_writeShiftRegister1+0x22>
  HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	4629      	mov	r1, r5
 800110e:	4620      	mov	r0, r4
 8001110:	f001 fb84 	bl	800281c <HAL_GPIO_WritePin>
  for(int i = 0; i < 500; i++) { __NOP(); } // Wait N cycles
 8001114:	2300      	movs	r3, #0
 8001116:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800111a:	da02      	bge.n	8001122 <CAL_writeShiftRegister1+0x46>
 800111c:	bf00      	nop
 800111e:	3301      	adds	r3, #1
 8001120:	e7f9      	b.n	8001116 <CAL_writeShiftRegister1+0x3a>
  HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	4629      	mov	r1, r5
 8001126:	4620      	mov	r0, r4
 8001128:	f001 fb78 	bl	800281c <HAL_GPIO_WritePin>
}
 800112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001130 <HAL_UART_RxCpltCallback>:
{
 8001130:	b538      	push	{r3, r4, r5, lr}
	HAL_UART_Receive_IT(&huart4,transmit_buffer1,sizeof(transmit_buffer1));
 8001132:	4d09      	ldr	r5, [pc, #36]	; (8001158 <HAL_UART_RxCpltCallback+0x28>)
 8001134:	2221      	movs	r2, #33	; 0x21
 8001136:	4629      	mov	r1, r5
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <HAL_UART_RxCpltCallback+0x2c>)
 800113a:	f005 f831 	bl	80061a0 <HAL_UART_Receive_IT>
	memcpy(&test_tx_data,transmit_buffer1,sizeof(send_data));
 800113e:	4c08      	ldr	r4, [pc, #32]	; (8001160 <HAL_UART_RxCpltCallback+0x30>)
 8001140:	6828      	ldr	r0, [r5, #0]
 8001142:	6869      	ldr	r1, [r5, #4]
 8001144:	68aa      	ldr	r2, [r5, #8]
 8001146:	68eb      	ldr	r3, [r5, #12]
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	6928      	ldr	r0, [r5, #16]
 800114c:	6969      	ldr	r1, [r5, #20]
 800114e:	69aa      	ldr	r2, [r5, #24]
 8001150:	69eb      	ldr	r3, [r5, #28]
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
}
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop
 8001158:	200005a8 	.word	0x200005a8
 800115c:	20000470 	.word	0x20000470
 8001160:	20000450 	.word	0x20000450

08001164 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	e7fe      	b.n	8001166 <Error_Handler+0x2>

08001168 <MX_SPI1_Init>:
{
 8001168:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <MX_SPI1_Init+0x54>)
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_SPI1_Init+0x58>)
 800116e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001170:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001174:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001176:	2300      	movs	r3, #0
 8001178:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800117a:	2207      	movs	r2, #7
 800117c:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001180:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001182:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001186:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001188:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800118c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001190:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001192:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001194:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119a:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800119c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a0:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a2:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011a4:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011a6:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011a8:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011aa:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ac:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ae:	f003 f9a5 	bl	80044fc <HAL_SPI_Init>
 80011b2:	b900      	cbnz	r0, 80011b6 <MX_SPI1_Init+0x4e>
}
 80011b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011b6:	f7ff ffd5 	bl	8001164 <Error_Handler>
 80011ba:	bf00      	nop
 80011bc:	20000520 	.word	0x20000520
 80011c0:	40013000 	.word	0x40013000

080011c4 <MX_SPI2_Init>:
{
 80011c4:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_SPI2_Init+0x54>)
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI2_Init+0x58>)
 80011ca:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d0:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	2300      	movs	r3, #0
 80011d4:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d6:	2207      	movs	r2, #7
 80011d8:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011e2:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011e8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ea:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ec:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ee:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80011f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f6:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011f8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011fa:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011fc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011fe:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001200:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001202:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001204:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001206:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001208:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800120a:	f003 f977 	bl	80044fc <HAL_SPI_Init>
 800120e:	b900      	cbnz	r0, 8001212 <MX_SPI2_Init+0x4e>
}
 8001210:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001212:	f7ff ffa7 	bl	8001164 <Error_Handler>
 8001216:	bf00      	nop
 8001218:	2000022c 	.word	0x2000022c
 800121c:	40003800 	.word	0x40003800

08001220 <MX_SPI3_Init>:
{
 8001220:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8001222:	4813      	ldr	r0, [pc, #76]	; (8001270 <MX_SPI3_Init+0x50>)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_SPI3_Init+0x54>)
 8001226:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122c:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	2300      	movs	r3, #0
 8001230:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001232:	2207      	movs	r2, #7
 8001234:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001236:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001238:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800123a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800123e:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001240:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001242:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001244:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001246:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001248:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800124a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124e:	6342      	str	r2, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001250:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001252:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001254:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001256:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001258:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800125a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800125c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800125e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001260:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001262:	f003 f94b 	bl	80044fc <HAL_SPI_Init>
 8001266:	b900      	cbnz	r0, 800126a <MX_SPI3_Init+0x4a>
}
 8001268:	bd08      	pop	{r3, pc}
    Error_Handler();
 800126a:	f7ff ff7b 	bl	8001164 <Error_Handler>
 800126e:	bf00      	nop
 8001270:	2000033c 	.word	0x2000033c
 8001274:	40003c00 	.word	0x40003c00

08001278 <MX_UART4_Init>:
{
 8001278:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <MX_UART4_Init+0x58>)
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_UART4_Init+0x5c>)
 800127e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8001280:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001284:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	2300      	movs	r3, #0
 8001288:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800128a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800128c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800128e:	220c      	movs	r2, #12
 8001290:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001298:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800129c:	f004 fed0 	bl	8006040 <HAL_UART_Init>
 80012a0:	b970      	cbnz	r0, 80012c0 <MX_UART4_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <MX_UART4_Init+0x58>)
 80012a6:	f004 ffef 	bl	8006288 <HAL_UARTEx_SetTxFifoThreshold>
 80012aa:	b958      	cbnz	r0, 80012c4 <MX_UART4_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <MX_UART4_Init+0x58>)
 80012b0:	f005 f80f 	bl	80062d2 <HAL_UARTEx_SetRxFifoThreshold>
 80012b4:	b940      	cbnz	r0, 80012c8 <MX_UART4_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_UART4_Init+0x58>)
 80012b8:	f004 ffc7 	bl	800624a <HAL_UARTEx_DisableFifoMode>
 80012bc:	b930      	cbnz	r0, 80012cc <MX_UART4_Init+0x54>
}
 80012be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012c0:	f7ff ff50 	bl	8001164 <Error_Handler>
    Error_Handler();
 80012c4:	f7ff ff4e 	bl	8001164 <Error_Handler>
    Error_Handler();
 80012c8:	f7ff ff4c 	bl	8001164 <Error_Handler>
    Error_Handler();
 80012cc:	f7ff ff4a 	bl	8001164 <Error_Handler>
 80012d0:	20000470 	.word	0x20000470
 80012d4:	40004c00 	.word	0x40004c00

080012d8 <MX_SPI4_Init>:
{
 80012d8:	b508      	push	{r3, lr}
  hspi4.Instance = SPI4;
 80012da:	4813      	ldr	r0, [pc, #76]	; (8001328 <MX_SPI4_Init+0x50>)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_SPI4_Init+0x54>)
 80012de:	6003      	str	r3, [r0, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80012e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e4:	6043      	str	r3, [r0, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	2300      	movs	r3, #0
 80012e8:	6083      	str	r3, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ea:	2207      	movs	r2, #7
 80012ec:	60c2      	str	r2, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f0:	6143      	str	r3, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80012f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012f6:	6182      	str	r2, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	61c2      	str	r2, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fe:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001300:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001302:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001304:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001306:	6342      	str	r2, [r0, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001308:	6383      	str	r3, [r0, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800130a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800130c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800130e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001310:	6483      	str	r3, [r0, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001312:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001314:	6503      	str	r3, [r0, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001316:	6543      	str	r3, [r0, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001318:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800131a:	f003 f8ef 	bl	80044fc <HAL_SPI_Init>
 800131e:	b900      	cbnz	r0, 8001322 <MX_SPI4_Init+0x4a>
}
 8001320:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001322:	f7ff ff1f 	bl	8001164 <Error_Handler>
 8001326:	bf00      	nop
 8001328:	200003c8 	.word	0x200003c8
 800132c:	40013400 	.word	0x40013400

08001330 <MX_SPI5_Init>:
{
 8001330:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 8001332:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_SPI5_Init+0x50>)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_SPI5_Init+0x54>)
 8001336:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133c:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800133e:	2300      	movs	r3, #0
 8001340:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001342:	2207      	movs	r2, #7
 8001344:	60c2      	str	r2, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001348:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800134a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800134e:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001354:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001358:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800135c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800135e:	6342      	str	r2, [r0, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001360:	6383      	str	r3, [r0, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001362:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001364:	6403      	str	r3, [r0, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001366:	6443      	str	r3, [r0, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001368:	6483      	str	r3, [r0, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800136a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800136c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800136e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001370:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001372:	f003 f8c3 	bl	80044fc <HAL_SPI_Init>
 8001376:	b900      	cbnz	r0, 800137a <MX_SPI5_Init+0x4a>
}
 8001378:	bd08      	pop	{r3, pc}
    Error_Handler();
 800137a:	f7ff fef3 	bl	8001164 <Error_Handler>
 800137e:	bf00      	nop
 8001380:	200002b4 	.word	0x200002b4
 8001384:	40015000 	.word	0x40015000

08001388 <SystemClock_Config>:
{
 8001388:	b500      	push	{lr}
 800138a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138c:	224c      	movs	r2, #76	; 0x4c
 800138e:	2100      	movs	r1, #0
 8001390:	a809      	add	r0, sp, #36	; 0x24
 8001392:	f004 ffed 	bl	8006370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001396:	2220      	movs	r2, #32
 8001398:	2100      	movs	r1, #0
 800139a:	a801      	add	r0, sp, #4
 800139c:	f004 ffe8 	bl	8006370 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013a0:	2002      	movs	r0, #2
 80013a2:	f001 fa41 	bl	8002828 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <SystemClock_Config+0xa8>)
 80013ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <SystemClock_Config+0xac>)
 80013be:	6993      	ldr	r3, [r2, #24]
 80013c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	6993      	ldr	r3, [r2, #24]
 80013cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <SystemClock_Config+0xac>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80013dc:	d0fa      	beq.n	80013d4 <SystemClock_Config+0x4c>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <SystemClock_Config+0xb0>)
 80013e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80013e2:	f023 0303 	bic.w	r3, r3, #3
 80013e6:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f0:	2340      	movs	r3, #64	; 0x40
 80013f2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	a809      	add	r0, sp, #36	; 0x24
 80013fc:	f001 fa3e 	bl	800287c <HAL_RCC_OscConfig>
 8001400:	b990      	cbnz	r0, 8001428 <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	233f      	movs	r3, #63	; 0x3f
 8001404:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001406:	2300      	movs	r3, #0
 8001408:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800140c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800140e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001410:	2240      	movs	r2, #64	; 0x40
 8001412:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001414:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001416:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001418:	2101      	movs	r1, #1
 800141a:	a801      	add	r0, sp, #4
 800141c:	f001 fe4e 	bl	80030bc <HAL_RCC_ClockConfig>
 8001420:	b920      	cbnz	r0, 800142c <SystemClock_Config+0xa4>
}
 8001422:	b01d      	add	sp, #116	; 0x74
 8001424:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001428:	f7ff fe9c 	bl	8001164 <Error_Handler>
    Error_Handler();
 800142c:	f7ff fe9a 	bl	8001164 <Error_Handler>
 8001430:	58000400 	.word	0x58000400
 8001434:	58024800 	.word	0x58024800
 8001438:	58024400 	.word	0x58024400

0800143c <PeriphCommonClock_Config>:
{
 800143c:	b500      	push	{lr}
 800143e:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	2298      	movs	r2, #152	; 0x98
 8001442:	2100      	movs	r1, #0
 8001444:	a80a      	add	r0, sp, #40	; 0x28
 8001446:	f004 ff93 	bl	8006370 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI5
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <PeriphCommonClock_Config+0x4c>)
 800144c:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 800144e:	2320      	movs	r3, #32
 8001450:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001456:	2302      	movs	r3, #2
 8001458:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 800145a:	2208      	movs	r2, #8
 800145c:	9205      	str	r2, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800145e:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001464:	2300      	movs	r3, #0
 8001466:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001468:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800146a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146e:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001470:	2301      	movs	r3, #1
 8001472:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	a801      	add	r0, sp, #4
 8001476:	f002 f8bd 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 800147a:	b910      	cbnz	r0, 8001482 <PeriphCommonClock_Config+0x46>
}
 800147c:	b031      	add	sp, #196	; 0xc4
 800147e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001482:	f7ff fe6f 	bl	8001164 <Error_Handler>
 8001486:	bf00      	nop
 8001488:	80002002 	.word	0x80002002
 800148c:	00000000 	.word	0x00000000

08001490 <main>:
{
 8001490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001494:	ed2d 8b04 	vpush	{d8-d9}
 8001498:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800149a:	f000 fd33 	bl	8001f04 <HAL_Init>
  SystemClock_Config();
 800149e:	f7ff ff73 	bl	8001388 <SystemClock_Config>
  PeriphCommonClock_Config();
 80014a2:	f7ff ffcb 	bl	800143c <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80014a6:	f7ff fd4b 	bl	8000f40 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014aa:	f7ff fe5d 	bl	8001168 <MX_SPI1_Init>
  MX_SPI2_Init();
 80014ae:	f7ff fe89 	bl	80011c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80014b2:	f7ff feb5 	bl	8001220 <MX_SPI3_Init>
  MX_UART4_Init();
 80014b6:	f7ff fedf 	bl	8001278 <MX_UART4_Init>
  MX_SPI4_Init();
 80014ba:	f7ff ff0d 	bl	80012d8 <MX_SPI4_Init>
  MX_SPI5_Init();
 80014be:	f7ff ff37 	bl	8001330 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOF, uC_OK_Pin, GPIO_PIN_SET); // OK LED turn on -> Init complete
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c8:	48c5      	ldr	r0, [pc, #788]	; (80017e0 <main+0x350>)
 80014ca:	f001 f9a7 	bl	800281c <HAL_GPIO_WritePin>
    uint8_t shiftregister_current[2]={0x03,0x01}; //Data to select gain and current range
 80014ce:	f240 1303 	movw	r3, #259	; 0x103
 80014d2:	f8ad 3018 	strh.w	r3, [sp, #24]
	test_tx_data.sync=0x00;
 80014d6:	4cc3      	ldr	r4, [pc, #780]	; (80017e4 <main+0x354>)
 80014d8:	2300      	movs	r3, #0
 80014da:	7023      	strb	r3, [r4, #0]
	test_tx_data.current_range=0x01;
 80014dc:	2201      	movs	r2, #1
 80014de:	7062      	strb	r2, [r4, #1]
	test_tx_data.voltage_range=0x00;
 80014e0:	70a3      	strb	r3, [r4, #2]
	test_tx_data.current_value=0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	6063      	str	r3, [r4, #4]
	test_tx_data.voltage_value=0x00;
 80014e6:	60a3      	str	r3, [r4, #8]
	test_tx_data.temperature_chanel1=0x00;   // Storing all default values in structure to send to LCD display
 80014e8:	60e3      	str	r3, [r4, #12]
	test_tx_data.temperature_chanel2=0x00;
 80014ea:	6123      	str	r3, [r4, #16]
	test_tx_data.temperature_chanel3=0x00;
 80014ec:	6163      	str	r3, [r4, #20]
	test_tx_data.temperature_chanel4=0x00;
 80014ee:	61a3      	str	r3, [r4, #24]
	test_tx_data.ack=0x01;
 80014f0:	7722      	strb	r2, [r4, #28]
  memcpy(transmit_buffer1,&test_tx_data,sizeof(send_data)); // storing all data from structure to transmit buffer
 80014f2:	4dbd      	ldr	r5, [pc, #756]	; (80017e8 <main+0x358>)
 80014f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f6:	6028      	str	r0, [r5, #0]
 80014f8:	6069      	str	r1, [r5, #4]
 80014fa:	60aa      	str	r2, [r5, #8]
 80014fc:	60eb      	str	r3, [r5, #12]
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	6128      	str	r0, [r5, #16]
 8001502:	6169      	str	r1, [r5, #20]
 8001504:	61aa      	str	r2, [r5, #24]
 8001506:	61eb      	str	r3, [r5, #28]
  while(test_tx_data.ack !=0x1F)
 8001508:	e00c      	b.n	8001524 <main+0x94>
  HAL_UART_Transmit(&huart4,transmit_buffer1,sizeof(transmit_buffer1),100);
 800150a:	4db7      	ldr	r5, [pc, #732]	; (80017e8 <main+0x358>)
 800150c:	4cb7      	ldr	r4, [pc, #732]	; (80017ec <main+0x35c>)
 800150e:	2364      	movs	r3, #100	; 0x64
 8001510:	2221      	movs	r2, #33	; 0x21
 8001512:	4629      	mov	r1, r5
 8001514:	4620      	mov	r0, r4
 8001516:	f004 fce8 	bl	8005eea <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart4,transmit_buffer1,sizeof(transmit_buffer1));
 800151a:	2221      	movs	r2, #33	; 0x21
 800151c:	4629      	mov	r1, r5
 800151e:	4620      	mov	r0, r4
 8001520:	f004 fe3e 	bl	80061a0 <HAL_UART_Receive_IT>
  while(test_tx_data.ack !=0x1F)
 8001524:	4baf      	ldr	r3, [pc, #700]	; (80017e4 <main+0x354>)
 8001526:	7f1b      	ldrb	r3, [r3, #28]
 8001528:	2b1f      	cmp	r3, #31
 800152a:	d1ee      	bne.n	800150a <main+0x7a>
  HAL_GPIO_WritePin(MOD1_DEN_GPIO_Port, MOD1_DEN_Pin, GPIO_PIN_SET);   // To enable ADC
 800152c:	4eb0      	ldr	r6, [pc, #704]	; (80017f0 <main+0x360>)
 800152e:	2201      	movs	r2, #1
 8001530:	2104      	movs	r1, #4
 8001532:	4630      	mov	r0, r6
 8001534:	f001 f972 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_nRST_GPIO_Port, ADC_nRST_Pin, GPIO_PIN_SET);   //To reset ADC
 8001538:	4fae      	ldr	r7, [pc, #696]	; (80017f4 <main+0x364>)
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001540:	4638      	mov	r0, r7
 8001542:	f001 f96b 	bl	800281c <HAL_GPIO_WritePin>
  CAL_ADS8699_Configuration(&hspi1,GPIOD, MOD1_nCS_Pin,0x00,0x00,0x00); // function call to configure ADC in slot1
 8001546:	4dac      	ldr	r5, [pc, #688]	; (80017f8 <main+0x368>)
 8001548:	2400      	movs	r4, #0
 800154a:	9401      	str	r4, [sp, #4]
 800154c:	9400      	str	r4, [sp, #0]
 800154e:	4623      	mov	r3, r4
 8001550:	2201      	movs	r2, #1
 8001552:	4629      	mov	r1, r5
 8001554:	48a9      	ldr	r0, [pc, #676]	; (80017fc <main+0x36c>)
 8001556:	f7ff fa8b 	bl	8000a70 <CAL_ADS8699_Configuration>
  CAL_writeShiftRegister1(&hspi4,GPIOH,MOD2_STRB_Pin,shiftregister_current);
 800155a:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 800181c <main+0x38c>
 800155e:	ab06      	add	r3, sp, #24
 8001560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001564:	4641      	mov	r1, r8
 8001566:	48a6      	ldr	r0, [pc, #664]	; (8001800 <main+0x370>)
 8001568:	f7ff fdb8 	bl	80010dc <CAL_writeShiftRegister1>
  HAL_GPIO_WritePin(ADC_nRST_GPIO_Port, ADC_nRST_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001572:	4638      	mov	r0, r7
 8001574:	f001 f952 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOD2_DEN_GPIO_Port, MOD2_DEN_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2108      	movs	r1, #8
 800157c:	4630      	mov	r0, r6
 800157e:	f001 f94d 	bl	800281c <HAL_GPIO_WritePin>
  CAL_ADS8699_Configuration(&hspi2,MOD2_nCS_GPIO_Port, MOD2_nCS_Pin,0x00,0x00,0x00);  //function call to configure ADC in slot2
 8001582:	9401      	str	r4, [sp, #4]
 8001584:	9400      	str	r4, [sp, #0]
 8001586:	4623      	mov	r3, r4
 8001588:	2202      	movs	r2, #2
 800158a:	4629      	mov	r1, r5
 800158c:	489d      	ldr	r0, [pc, #628]	; (8001804 <main+0x374>)
 800158e:	f7ff fa6f 	bl	8000a70 <CAL_ADS8699_Configuration>
  HAL_GPIO_WritePin(ADC_nRST_GPIO_Port, ADC_nRST_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001598:	4638      	mov	r0, r7
 800159a:	f001 f93f 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOD5_DEN_GPIO_Port, MOD5_DEN_Pin, GPIO_PIN_SET);                //function call to configure ADC inslot 5
 800159e:	2201      	movs	r2, #1
 80015a0:	2140      	movs	r1, #64	; 0x40
 80015a2:	4630      	mov	r0, r6
 80015a4:	f001 f93a 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOD5_nCS_GPIO_Port, MOD5_nCS_Pin, GPIO_PIN_RESET);
 80015a8:	4622      	mov	r2, r4
 80015aa:	2110      	movs	r1, #16
 80015ac:	4628      	mov	r0, r5
 80015ae:	f001 f935 	bl	800281c <HAL_GPIO_WritePin>
  CAL_ADC_ThermoCoupleModule_Configuration(&hspi3,&hspi5,MOD5_STRB_GPIO_Port, MOD5_STRB_Pin, &shiftregister_thermocouple,&shiftregister_thermocouple1,0x00,0x00,0x00);
 80015b2:	9404      	str	r4, [sp, #16]
 80015b4:	9403      	str	r4, [sp, #12]
 80015b6:	9402      	str	r4, [sp, #8]
 80015b8:	4b93      	ldr	r3, [pc, #588]	; (8001808 <main+0x378>)
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	4b93      	ldr	r3, [pc, #588]	; (800180c <main+0x37c>)
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	4642      	mov	r2, r8
 80015c6:	4992      	ldr	r1, [pc, #584]	; (8001810 <main+0x380>)
 80015c8:	4892      	ldr	r0, [pc, #584]	; (8001814 <main+0x384>)
 80015ca:	f7ff fb5d 	bl	8000c88 <CAL_ADC_ThermoCoupleModule_Configuration>
 80015ce:	e02d      	b.n	800162c <main+0x19c>
  		test_tx_data.temperature_chanel1 = measured_temperature;   //storing the measured temperature in structure depending on the configured channel
 80015d0:	4b84      	ldr	r3, [pc, #528]	; (80017e4 <main+0x354>)
 80015d2:	ed83 9a03 	vstr	s18, [r3, #12]
  if(test_tx_data.sync==0xFF)
 80015d6:	4b83      	ldr	r3, [pc, #524]	; (80017e4 <main+0x354>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	f000 8126 	beq.w	800182c <main+0x39c>
  if(i!=4)
 80015e0:	4b8d      	ldr	r3, [pc, #564]	; (8001818 <main+0x388>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	2804      	cmp	r0, #4
 80015e6:	f000 8138 	beq.w	800185a <main+0x3ca>
	  shiftregister_thermocouple=Thermo_Couple_Channel_Select_Data(i);
 80015ea:	f7ff fc64 	bl	8000eb6 <Thermo_Couple_Channel_Select_Data>
 80015ee:	4d87      	ldr	r5, [pc, #540]	; (800180c <main+0x37c>)
 80015f0:	7028      	strb	r0, [r5, #0]
	  shiftregister_thermocouple1=Thermo_Couple_Channel_Select_Data1(i); //Selecting the channel of ADC in thermocouple module
 80015f2:	4c89      	ldr	r4, [pc, #548]	; (8001818 <main+0x388>)
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	f7ff fc6c 	bl	8000ed2 <Thermo_Couple_Channel_Select_Data1>
 80015fa:	4a83      	ldr	r2, [pc, #524]	; (8001808 <main+0x378>)
 80015fc:	7010      	strb	r0, [r2, #0]
  	  CAL_ADC_ThermoCoupleModule_Configuration(&hspi3,&hspi5,GPIOH, MOD5_STRB_Pin,&shiftregister_thermocouple,&shiftregister_thermocouple1,0x00,0x00,0x00);	//Reconfiguring the ADC with new data
 80015fe:	2300      	movs	r3, #0
 8001600:	9304      	str	r3, [sp, #16]
 8001602:	9303      	str	r3, [sp, #12]
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	9201      	str	r2, [sp, #4]
 8001608:	9500      	str	r5, [sp, #0]
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	4a83      	ldr	r2, [pc, #524]	; (800181c <main+0x38c>)
 8001610:	497f      	ldr	r1, [pc, #508]	; (8001810 <main+0x380>)
 8001612:	4880      	ldr	r0, [pc, #512]	; (8001814 <main+0x384>)
 8001614:	f7ff fb38 	bl	8000c88 <CAL_ADC_ThermoCoupleModule_Configuration>
  	  i=i+1;
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	6023      	str	r3, [r4, #0]
  	  j=j+1;
 800161e:	4a80      	ldr	r2, [pc, #512]	; (8001820 <main+0x390>)
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8001626:	2001      	movs	r0, #1
 8001628:	f000 fcac 	bl	8001f84 <HAL_Delay>
  CAL_ADS8699_Read_Data(&hspi1,GPIOD, MOD1_nCS_Pin, voltage_buff); // To read data from first slot
 800162c:	4c72      	ldr	r4, [pc, #456]	; (80017f8 <main+0x368>)
 800162e:	ab09      	add	r3, sp, #36	; 0x24
 8001630:	2201      	movs	r2, #1
 8001632:	4621      	mov	r1, r4
 8001634:	4871      	ldr	r0, [pc, #452]	; (80017fc <main+0x36c>)
 8001636:	f7ff fb0f 	bl	8000c58 <CAL_ADS8699_Read_Data>
  CAL_ADS8699_Read_Data(&hspi2,MOD2_nCS_GPIO_Port, MOD2_nCS_Pin, current_buff); //To read data from second slot
 800163a:	ab08      	add	r3, sp, #32
 800163c:	2202      	movs	r2, #2
 800163e:	4621      	mov	r1, r4
 8001640:	4870      	ldr	r0, [pc, #448]	; (8001804 <main+0x374>)
 8001642:	f7ff fb09 	bl	8000c58 <CAL_ADS8699_Read_Data>
  CAL_ADC_ThermoCoupleModule_Read_Data(&hspi3,&hspi5,MOD5_STRB_GPIO_Port, MOD5_STRB_Pin, &shiftregister_thermocouple,&shiftregister_thermocouple1, temperature_buff); //To read data from third slot
 8001646:	ab07      	add	r3, sp, #28
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <main+0x378>)
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <main+0x37c>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	4a71      	ldr	r2, [pc, #452]	; (800181c <main+0x38c>)
 8001658:	496d      	ldr	r1, [pc, #436]	; (8001810 <main+0x380>)
 800165a:	486e      	ldr	r0, [pc, #440]	; (8001814 <main+0x384>)
 800165c:	f7ff fc14 	bl	8000e88 <CAL_ADC_ThermoCoupleModule_Read_Data>
      ADC_data[0] = voltage_buff[0]<<24|voltage_buff[1]<<16|voltage_buff[2]<<8|voltage_buff[3];
 8001660:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8001664:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800166e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8001672:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	intermediate_result[0] = (262143-ADC_raw_voltage)*0.00009375;     // Converting ADC raw value into real time voltage using formula 𝑀𝑒𝑎𝑠𝑢𝑟𝑒𝑑_𝑉𝑜𝑙𝑡𝑎𝑔𝑒=𝐼𝑛𝑝𝑢𝑡 𝑟𝑎𝑛𝑔𝑒 𝑜𝑓 𝐴𝐷𝐶−((2^(no.of bits)−𝐴𝐷𝐶 𝑜𝑢𝑡𝑝𝑢𝑡)×𝑅𝑒𝑠𝑜𝑙𝑢𝑡𝑖𝑜𝑛 𝑜𝑓 𝐴𝐷𝐶)
 8001676:	4a6b      	ldr	r2, [pc, #428]	; (8001824 <main+0x394>)
 8001678:	eba2 3393 	sub.w	r3, r2, r3, lsr #14
 800167c:	ee08 3a10 	vmov	s16, r3
 8001680:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8001684:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 80017b8 <main+0x328>
 8001688:	ee28 8b05 	vmul.f64	d8, d8, d5
 800168c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
		  measured_voltage = 12.288-intermediate_result[0];
 8001690:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8001694:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80017c0 <main+0x330>
 8001698:	ee36 8b48 	vsub.f64	d8, d6, d8
 800169c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
  		       ADC_data[1] = current_buff[0]<<24|current_buff[1]<<16|current_buff[2]<<8|current_buff[3];
 80016a0:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80016a4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80016ae:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 80016b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  	intermediate_result[1] = (262143-ADC_raw_current)*0.00009375;
 80016b6:	eba2 3393 	sub.w	r3, r2, r3, lsr #14
 80016ba:	ee07 3a10 	vmov	s14, r3
 80016be:	eeb8 7b47 	vcvt.f64.u32	d7, s14
 80016c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016c6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  	intermediate_result[2] = 12.288-intermediate_result[1];
 80016ca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80016ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016d2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  	intermediate_result[3] = (intermediate_result[2]-2.5)*10.7;    //Converting ADC raw value to current using formula 𝑀𝑒𝑎𝑠𝑢𝑟𝑒𝑑_𝐶𝑢𝑟𝑟𝑒𝑛𝑡=(𝑀𝑒𝑎𝑠𝑢𝑟𝑒𝑑_𝑉𝑜𝑙𝑡𝑎𝑔𝑒−2.5)/(gain of the PGIA×𝑆ℎ𝑢𝑛𝑡 𝑟𝑒𝑠𝑖𝑠𝑡𝑎𝑛𝑐𝑒)
 80016d6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80016da:	eeb0 4b04 	vmov.f64	d4, #4	; 0x40200000  2.5
 80016de:	ee37 7b44 	vsub.f64	d7, d7, d4
 80016e2:	ed9f 4b39 	vldr	d4, [pc, #228]	; 80017c8 <main+0x338>
 80016e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80016ea:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  	intermediate_result[4] = intermediate_result[3]/1000;
 80016ee:	eddf 4a4e 	vldr	s9, [pc, #312]	; 8001828 <main+0x398>
 80016f2:	eec7 7a24 	vdiv.f32	s15, s14, s9
  	      measured_current = intermediate_result[4]/10.11;
 80016f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016fa:	ed9f 3b35 	vldr	d3, [pc, #212]	; 80017d0 <main+0x340>
 80016fe:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001702:	eef7 8bc4 	vcvt.f32.f64	s17, d4
               ADC_data[2] = temperature_buff[0]<<24|temperature_buff[1]<<16|temperature_buff[2]<<8|temperature_buff[3];
 8001706:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800170a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001714:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8001718:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    intermediate_result[5] = (262143-ADC_raw_temperature)*0.00009375;
 800171c:	eba2 3293 	sub.w	r2, r2, r3, lsr #14
 8001720:	ee07 2a90 	vmov	s15, r2
 8001724:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001728:	ee27 5b05 	vmul.f64	d5, d7, d5
 800172c:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    intermediate_result[6] = 12.288-intermediate_result[5];
 8001730:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8001734:	ee36 6b45 	vsub.f64	d6, d6, d5
 8001738:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	  measured_temperature = (intermediate_result[6]/0.005)-3;      //Converting ADC raw value to temperature using formula 𝑀𝑒𝑎𝑠𝑢𝑟𝑒𝑑_𝑇𝑒𝑚𝑝𝑒𝑟𝑎𝑡𝑢𝑟𝑒=(𝑀𝑒𝑎𝑠𝑢𝑟𝑒𝑑_𝑉𝑜𝑙𝑡𝑎𝑔𝑒)/(5𝑚𝑉/°𝐶) + 𝑅𝑒𝑓𝑒𝑟𝑒𝑛𝑐𝑒 𝑉𝑜𝑙𝑡𝑎𝑔𝑒 ± 3°C offset
 800173c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8001740:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80017d8 <main+0x348>
 8001744:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001748:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800174c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001750:	eeb7 9bc7 	vcvt.f32.f64	s18, d7
  HAL_UART_Receive_IT(&huart4,transmit_buffer1,sizeof(transmit_buffer1)); //Receiving data from LCD display and storing in structure
 8001754:	4d24      	ldr	r5, [pc, #144]	; (80017e8 <main+0x358>)
 8001756:	2221      	movs	r2, #33	; 0x21
 8001758:	4629      	mov	r1, r5
 800175a:	4824      	ldr	r0, [pc, #144]	; (80017ec <main+0x35c>)
 800175c:	f004 fd20 	bl	80061a0 <HAL_UART_Receive_IT>
  memcpy(&test_tx_data,transmit_buffer1,sizeof(send_data));
 8001760:	4c20      	ldr	r4, [pc, #128]	; (80017e4 <main+0x354>)
 8001762:	6828      	ldr	r0, [r5, #0]
 8001764:	6869      	ldr	r1, [r5, #4]
 8001766:	68aa      	ldr	r2, [r5, #8]
 8001768:	68eb      	ldr	r3, [r5, #12]
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	6928      	ldr	r0, [r5, #16]
 800176e:	6969      	ldr	r1, [r5, #20]
 8001770:	69aa      	ldr	r2, [r5, #24]
 8001772:	69eb      	ldr	r3, [r5, #28]
 8001774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  switch(j)
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <main+0x390>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d816      	bhi.n	80017ac <main+0x31c>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <main+0x2f4>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080015d1 	.word	0x080015d1
 8001788:	08001795 	.word	0x08001795
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017a5 	.word	0x080017a5
  		test_tx_data.temperature_chanel2 = measured_temperature;
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <main+0x354>)
 8001796:	ed83 9a04 	vstr	s18, [r3, #16]
  			break;
 800179a:	e71c      	b.n	80015d6 <main+0x146>
  		test_tx_data.temperature_chanel3 = measured_temperature;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <main+0x354>)
 800179e:	ed83 9a05 	vstr	s18, [r3, #20]
  			break;
 80017a2:	e718      	b.n	80015d6 <main+0x146>
  		test_tx_data.temperature_chanel4 = measured_temperature;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <main+0x354>)
 80017a6:	ed83 9a06 	vstr	s18, [r3, #24]
  			break;
 80017aa:	e714      	b.n	80015d6 <main+0x146>
  		test_tx_data.temperature_chanel1 = measured_temperature;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <main+0x354>)
 80017ae:	ed83 9a03 	vstr	s18, [r3, #12]
  			break;
 80017b2:	e710      	b.n	80015d6 <main+0x146>
 80017b4:	f3af 8000 	nop.w
 80017b8:	bc6a7efa 	.word	0xbc6a7efa
 80017bc:	3f189374 	.word	0x3f189374
 80017c0:	bc6a7efa 	.word	0xbc6a7efa
 80017c4:	40289374 	.word	0x40289374
 80017c8:	66666666 	.word	0x66666666
 80017cc:	40256666 	.word	0x40256666
 80017d0:	eb851eb8 	.word	0xeb851eb8
 80017d4:	40243851 	.word	0x40243851
 80017d8:	47ae147b 	.word	0x47ae147b
 80017dc:	3f747ae1 	.word	0x3f747ae1
 80017e0:	58021400 	.word	0x58021400
 80017e4:	20000450 	.word	0x20000450
 80017e8:	200005a8 	.word	0x200005a8
 80017ec:	20000470 	.word	0x20000470
 80017f0:	58021800 	.word	0x58021800
 80017f4:	58020000 	.word	0x58020000
 80017f8:	58020c00 	.word	0x58020c00
 80017fc:	20000520 	.word	0x20000520
 8001800:	200003c8 	.word	0x200003c8
 8001804:	2000022c 	.word	0x2000022c
 8001808:	20000011 	.word	0x20000011
 800180c:	20000010 	.word	0x20000010
 8001810:	200002b4 	.word	0x200002b4
 8001814:	2000033c 	.word	0x2000033c
 8001818:	2000000c 	.word	0x2000000c
 800181c:	58021c00 	.word	0x58021c00
 8001820:	2000021c 	.word	0x2000021c
 8001824:	0003ffff 	.word	0x0003ffff
 8001828:	447a0000 	.word	0x447a0000
  	    test_tx_data.current_value=measured_current;
 800182c:	4c15      	ldr	r4, [pc, #84]	; (8001884 <main+0x3f4>)
 800182e:	edc4 8a01 	vstr	s17, [r4, #4]
  		test_tx_data.voltage_value=measured_voltage; //Transmitting measured data to LCD display
 8001832:	ed84 8a02 	vstr	s16, [r4, #8]
  	    memcpy(transmit_buffer1,&test_tx_data,sizeof(send_data));
 8001836:	4d14      	ldr	r5, [pc, #80]	; (8001888 <main+0x3f8>)
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	6028      	str	r0, [r5, #0]
 800183c:	6069      	str	r1, [r5, #4]
 800183e:	60aa      	str	r2, [r5, #8]
 8001840:	60eb      	str	r3, [r5, #12]
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	6128      	str	r0, [r5, #16]
 8001846:	6169      	str	r1, [r5, #20]
 8001848:	61aa      	str	r2, [r5, #24]
 800184a:	61eb      	str	r3, [r5, #28]
        HAL_UART_Transmit(&huart4,(uint8_t *)transmit_buffer1,sizeof(transmit_buffer1),100);
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	2221      	movs	r2, #33	; 0x21
 8001850:	4629      	mov	r1, r5
 8001852:	480e      	ldr	r0, [pc, #56]	; (800188c <main+0x3fc>)
 8001854:	f004 fb49 	bl	8005eea <HAL_UART_Transmit>
 8001858:	e6c2      	b.n	80015e0 <main+0x150>
  		CAL_ADC_ThermoCoupleModule_Configuration(&hspi3,&hspi5,GPIOH, MOD5_STRB_Pin,(uint8_t *)0xE1, (uint8_t *)0xF1,0x00,0x00,0x00); //Configuring default channel1 of thermocouple module
 800185a:	2400      	movs	r4, #0
 800185c:	9404      	str	r4, [sp, #16]
 800185e:	9403      	str	r4, [sp, #12]
 8001860:	9402      	str	r4, [sp, #8]
 8001862:	23f1      	movs	r3, #241	; 0xf1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	23e1      	movs	r3, #225	; 0xe1
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <main+0x400>)
 8001870:	4908      	ldr	r1, [pc, #32]	; (8001894 <main+0x404>)
 8001872:	4809      	ldr	r0, [pc, #36]	; (8001898 <main+0x408>)
 8001874:	f7ff fa08 	bl	8000c88 <CAL_ADC_ThermoCoupleModule_Configuration>
  		i=0;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <main+0x40c>)
 800187a:	601c      	str	r4, [r3, #0]
  	    j=0;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <main+0x410>)
 800187e:	601c      	str	r4, [r3, #0]
 8001880:	e6d1      	b.n	8001626 <main+0x196>
 8001882:	bf00      	nop
 8001884:	20000450 	.word	0x20000450
 8001888:	200005a8 	.word	0x200005a8
 800188c:	20000470 	.word	0x20000470
 8001890:	58021c00 	.word	0x58021c00
 8001894:	200002b4 	.word	0x200002b4
 8001898:	2000033c 	.word	0x2000033c
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	2000021c 	.word	0x2000021c

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_MspInit+0x20>)
 80018a8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80018ac:	f042 0202 	orr.w	r2, r2, #2
 80018b0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80018b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c0:	b002      	add	sp, #8
 80018c2:	4770      	bx	lr
 80018c4:	58024400 	.word	0x58024400

080018c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b0c1      	sub	sp, #260	; 0x104
 80018cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	2100      	movs	r1, #0
 80018d0:	913b      	str	r1, [sp, #236]	; 0xec
 80018d2:	913c      	str	r1, [sp, #240]	; 0xf0
 80018d4:	913d      	str	r1, [sp, #244]	; 0xf4
 80018d6:	913e      	str	r1, [sp, #248]	; 0xf8
 80018d8:	913f      	str	r1, [sp, #252]	; 0xfc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018da:	22bc      	movs	r2, #188	; 0xbc
 80018dc:	a80c      	add	r0, sp, #48	; 0x30
 80018de:	f004 fd47 	bl	8006370 <memset>
  if(hspi->Instance==SPI1)
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	4aa3      	ldr	r2, [pc, #652]	; (8001b74 <HAL_SPI_MspInit+0x2ac>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d010      	beq.n	800190c <HAL_SPI_MspInit+0x44>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80018ea:	4aa3      	ldr	r2, [pc, #652]	; (8001b78 <HAL_SPI_MspInit+0x2b0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d057      	beq.n	80019a0 <HAL_SPI_MspInit+0xd8>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80018f0:	4aa2      	ldr	r2, [pc, #648]	; (8001b7c <HAL_SPI_MspInit+0x2b4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	f000 80aa 	beq.w	8001a4c <HAL_SPI_MspInit+0x184>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 80018f8:	4aa1      	ldr	r2, [pc, #644]	; (8001b80 <HAL_SPI_MspInit+0x2b8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f000 80fe 	beq.w	8001afc <HAL_SPI_MspInit+0x234>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
  else if(hspi->Instance==SPI5)
 8001900:	4aa0      	ldr	r2, [pc, #640]	; (8001b84 <HAL_SPI_MspInit+0x2bc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	f000 814a 	beq.w	8001b9c <HAL_SPI_MspInit+0x2d4>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001908:	b041      	add	sp, #260	; 0x104
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001916:	9323      	str	r3, [sp, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001918:	a80c      	add	r0, sp, #48	; 0x30
 800191a:	f001 fe6b 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	2800      	cmp	r0, #0
 8001920:	d13b      	bne.n	800199a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001922:	4b99      	ldr	r3, [pc, #612]	; (8001b88 <HAL_SPI_MspInit+0x2c0>)
 8001924:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001928:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800192c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001930:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001934:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001938:	9200      	str	r2, [sp, #0]
 800193a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001954:	2320      	movs	r3, #32
 8001956:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2402      	movs	r4, #2
 800195a:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800195c:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195e:	943e      	str	r4, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001960:	2605      	movs	r6, #5
 8001962:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	4d89      	ldr	r5, [pc, #548]	; (8001b8c <HAL_SPI_MspInit+0x2c4>)
 8001966:	a93b      	add	r1, sp, #236	; 0xec
 8001968:	4628      	mov	r0, r5
 800196a:	f000 fe65 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001974:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2700      	movs	r7, #0
 8001978:	973e      	str	r7, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800197a:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	a93b      	add	r1, sp, #236	; 0xec
 800197e:	4628      	mov	r0, r5
 8001980:	f000 fe5a 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	973d      	str	r7, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	973e      	str	r7, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800198e:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	a93b      	add	r1, sp, #236	; 0xec
 8001992:	4628      	mov	r0, r5
 8001994:	f000 fe50 	bl	8002638 <HAL_GPIO_Init>
 8001998:	e7b6      	b.n	8001908 <HAL_SPI_MspInit+0x40>
      Error_Handler();
 800199a:	f7ff fbe3 	bl	8001164 <Error_Handler>
 800199e:	e7c0      	b.n	8001922 <HAL_SPI_MspInit+0x5a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a4:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80019a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019aa:	9323      	str	r3, [sp, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ac:	a80c      	add	r0, sp, #48	; 0x30
 80019ae:	f001 fe21 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d147      	bne.n	8001a46 <HAL_SPI_MspInit+0x17e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019b6:	4b74      	ldr	r3, [pc, #464]	; (8001b88 <HAL_SPI_MspInit+0x2c0>)
 80019b8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019c0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80019c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019cc:	9202      	str	r2, [sp, #8]
 80019ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019d4:	f042 0204 	orr.w	r2, r2, #4
 80019d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019e0:	f002 0204 	and.w	r2, r2, #4
 80019e4:	9203      	str	r2, [sp, #12]
 80019e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019ec:	f042 0202 	orr.w	r2, r2, #2
 80019f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	9304      	str	r3, [sp, #16]
 80019fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a00:	2402      	movs	r4, #2
 8001a02:	943b      	str	r4, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2600      	movs	r6, #0
 8001a08:	963d      	str	r6, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	963e      	str	r6, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a0c:	2505      	movs	r5, #5
 8001a0e:	953f      	str	r5, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	4f5f      	ldr	r7, [pc, #380]	; (8001b90 <HAL_SPI_MspInit+0x2c8>)
 8001a12:	a93b      	add	r1, sp, #236	; 0xec
 8001a14:	4638      	mov	r0, r7
 8001a16:	f000 fe0f 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a20:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	963e      	str	r6, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a24:	953f      	str	r5, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a26:	a93b      	add	r1, sp, #236	; 0xec
 8001a28:	4638      	mov	r0, r7
 8001a2a:	f000 fe05 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a32:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a36:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	943e      	str	r4, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3a:	953f      	str	r5, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	a93b      	add	r1, sp, #236	; 0xec
 8001a3e:	4855      	ldr	r0, [pc, #340]	; (8001b94 <HAL_SPI_MspInit+0x2cc>)
 8001a40:	f000 fdfa 	bl	8002638 <HAL_GPIO_Init>
 8001a44:	e760      	b.n	8001908 <HAL_SPI_MspInit+0x40>
      Error_Handler();
 8001a46:	f7ff fb8d 	bl	8001164 <Error_Handler>
 8001a4a:	e7b4      	b.n	80019b6 <HAL_SPI_MspInit+0xee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a56:	9323      	str	r3, [sp, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a58:	a80c      	add	r0, sp, #48	; 0x30
 8001a5a:	f001 fdcb 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d149      	bne.n	8001af6 <HAL_SPI_MspInit+0x22e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_SPI_MspInit+0x2c0>)
 8001a64:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001a70:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a74:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001a78:	9205      	str	r2, [sp, #20]
 8001a7a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a80:	f042 0204 	orr.w	r2, r2, #4
 8001a84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a8c:	f002 0204 	and.w	r2, r2, #4
 8001a90:	9206      	str	r2, [sp, #24]
 8001a92:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a98:	f042 0202 	orr.w	r2, r2, #2
 8001a9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	9307      	str	r3, [sp, #28]
 8001aaa:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab0:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2402      	movs	r4, #2
 8001ab4:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab6:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab8:	943e      	str	r4, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aba:	2506      	movs	r5, #6
 8001abc:	953f      	str	r5, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	4f34      	ldr	r7, [pc, #208]	; (8001b90 <HAL_SPI_MspInit+0x2c8>)
 8001ac0:	a93b      	add	r1, sp, #236	; 0xec
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f000 fdb8 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001acc:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	963d      	str	r6, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	963e      	str	r6, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad6:	953f      	str	r5, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad8:	a93b      	add	r1, sp, #236	; 0xec
 8001ada:	4638      	mov	r0, r7
 8001adc:	f000 fdac 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ae6:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	963e      	str	r6, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aea:	953f      	str	r5, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	a93b      	add	r1, sp, #236	; 0xec
 8001aee:	4829      	ldr	r0, [pc, #164]	; (8001b94 <HAL_SPI_MspInit+0x2cc>)
 8001af0:	f000 fda2 	bl	8002638 <HAL_GPIO_Init>
 8001af4:	e708      	b.n	8001908 <HAL_SPI_MspInit+0x40>
      Error_Handler();
 8001af6:	f7ff fb35 	bl	8001164 <Error_Handler>
 8001afa:	e7b2      	b.n	8001a62 <HAL_SPI_MspInit+0x19a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_SPI_MspInit+0x2c0>)
 8001afe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001b02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b06:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001b0a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001b0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b12:	9208      	str	r2, [sp, #32]
 8001b14:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b1a:	f042 0210 	orr.w	r2, r2, #16
 8001b1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2402      	movs	r4, #2
 8001b34:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b36:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b38:	943e      	str	r4, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b3a:	2605      	movs	r6, #5
 8001b3c:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3e:	4d16      	ldr	r5, [pc, #88]	; (8001b98 <HAL_SPI_MspInit+0x2d0>)
 8001b40:	a93b      	add	r1, sp, #236	; 0xec
 8001b42:	4628      	mov	r0, r5
 8001b44:	f000 fd78 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b4e:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2700      	movs	r7, #0
 8001b52:	973e      	str	r7, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b54:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b56:	a93b      	add	r1, sp, #236	; 0xec
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f000 fd6d 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5e:	2340      	movs	r3, #64	; 0x40
 8001b60:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	973d      	str	r7, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	973e      	str	r7, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b68:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6a:	a93b      	add	r1, sp, #236	; 0xec
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f000 fd63 	bl	8002638 <HAL_GPIO_Init>
 8001b72:	e6c9      	b.n	8001908 <HAL_SPI_MspInit+0x40>
 8001b74:	40013000 	.word	0x40013000
 8001b78:	40003800 	.word	0x40003800
 8001b7c:	40003c00 	.word	0x40003c00
 8001b80:	40013400 	.word	0x40013400
 8001b84:	40015000 	.word	0x40015000
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58020000 	.word	0x58020000
 8001b90:	58020800 	.word	0x58020800
 8001b94:	58020400 	.word	0x58020400
 8001b98:	58021000 	.word	0x58021000
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_SPI_MspInit+0x350>)
 8001b9e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ba2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ba6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001baa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001bae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bb2:	920a      	str	r2, [sp, #40]	; 0x28
 8001bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2402      	movs	r4, #2
 8001bd4:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bd6:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd8:	943e      	str	r4, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001bda:	2605      	movs	r6, #5
 8001bdc:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bde:	4d0f      	ldr	r5, [pc, #60]	; (8001c1c <HAL_SPI_MspInit+0x354>)
 8001be0:	a93b      	add	r1, sp, #236	; 0xec
 8001be2:	4628      	mov	r0, r5
 8001be4:	f000 fd28 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bec:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bf0:	943d      	str	r4, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2700      	movs	r7, #0
 8001bf4:	973e      	str	r7, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001bf6:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf8:	a93b      	add	r1, sp, #236	; 0xec
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f000 fd1c 	bl	8002638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c04:	933b      	str	r3, [sp, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	943c      	str	r4, [sp, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	973d      	str	r7, [sp, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	973e      	str	r7, [sp, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c0c:	963f      	str	r6, [sp, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c0e:	a93b      	add	r1, sp, #236	; 0xec
 8001c10:	4628      	mov	r0, r5
 8001c12:	f000 fd11 	bl	8002638 <HAL_GPIO_Init>
}
 8001c16:	e677      	b.n	8001908 <HAL_SPI_MspInit+0x40>
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58021400 	.word	0x58021400

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b510      	push	{r4, lr}
 8001c22:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	2300      	movs	r3, #0
 8001c26:	9303      	str	r3, [sp, #12]
 8001c28:	9304      	str	r3, [sp, #16]
 8001c2a:	9305      	str	r3, [sp, #20]
 8001c2c:	9306      	str	r3, [sp, #24]
 8001c2e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==UART4)
 8001c30:	6802      	ldr	r2, [r0, #0]
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_UART_MspInit+0x7c>)
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001c38:	b008      	add	sp, #32
 8001c3a:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c3e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001c42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c46:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001c4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001c4e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001c52:	9201      	str	r2, [sp, #4]
 8001c54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c5a:	f042 0202 	orr.w	r2, r2, #2
 8001c5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2400      	movs	r4, #0
 8001c7a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	a903      	add	r1, sp, #12
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c86:	f000 fcd7 	bl	8002638 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	2034      	movs	r0, #52	; 0x34
 8001c90:	f000 f9a4 	bl	8001fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c94:	2034      	movs	r0, #52	; 0x34
 8001c96:	f000 f9d3 	bl	8002040 <HAL_NVIC_EnableIRQ>
}
 8001c9a:	e7cd      	b.n	8001c38 <HAL_UART_MspInit+0x18>
 8001c9c:	40004c00 	.word	0x40004c00
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58020400 	.word	0x58020400

08001ca8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler>

08001caa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler>

08001cac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler>

08001cae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <BusFault_Handler>

08001cb0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler>

08001cb2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cba:	f000 f951 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbe:	bd08      	pop	{r3, pc}

08001cc0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001cc2:	4802      	ldr	r0, [pc, #8]	; (8001ccc <UART4_IRQHandler+0xc>)
 8001cc4:	f003 f9d4 	bl	8005070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001cc8:	bd08      	pop	{r3, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000470 	.word	0x20000470

08001cd0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	4770      	bx	lr

08001cd4 <_kill>:

int _kill(int pid, int sig)
{
 8001cd4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cd6:	f004 fb21 	bl	800631c <__errno>
 8001cda:	2316      	movs	r3, #22
 8001cdc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001cde:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce2:	bd08      	pop	{r3, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cea:	f7ff fff3 	bl	8001cd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cee:	e7fe      	b.n	8001cee <_exit+0xa>

08001cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2500      	movs	r5, #0
 8001cf8:	42b5      	cmp	r5, r6
 8001cfa:	da07      	bge.n	8001d0c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001cfc:	f3af 8000 	nop.w
 8001d00:	4621      	mov	r1, r4
 8001d02:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001d08:	460c      	mov	r4, r1
 8001d0a:	e7f5      	b.n	8001cf8 <_read+0x8>
	}

return len;
}
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}

08001d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	460c      	mov	r4, r1
 8001d14:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	2500      	movs	r5, #0
 8001d18:	42b5      	cmp	r5, r6
 8001d1a:	da05      	bge.n	8001d28 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8001d1c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d20:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d24:	3501      	adds	r5, #1
 8001d26:	e7f7      	b.n	8001d18 <_write+0x8>
	}
	return len;
}
 8001d28:	4630      	mov	r0, r6
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}

08001d2c <_close>:

int _close(int file)
{
	return -1;
}
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	4770      	bx	lr

08001d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d36:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001d38:	2000      	movs	r0, #0
 8001d3a:	4770      	bx	lr

08001d3c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	4770      	bx	lr

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d40:	2000      	movs	r0, #0
 8001d42:	4770      	bx	lr

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <_sbrk+0x38>)
 8001d4a:	490d      	ldr	r1, [pc, #52]	; (8001d80 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <_sbrk+0x40>)
 8001d4e:	6800      	ldr	r0, [r0, #0]
 8001d50:	b140      	cbz	r0, 8001d64 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	480c      	ldr	r0, [pc, #48]	; (8001d84 <_sbrk+0x40>)
 8001d54:	6800      	ldr	r0, [r0, #0]
 8001d56:	4403      	add	r3, r0
 8001d58:	1a52      	subs	r2, r2, r1
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d806      	bhi.n	8001d6c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <_sbrk+0x40>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001d62:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <_sbrk+0x40>)
 8001d66:	4c08      	ldr	r4, [pc, #32]	; (8001d88 <_sbrk+0x44>)
 8001d68:	6004      	str	r4, [r0, #0]
 8001d6a:	e7f2      	b.n	8001d52 <_sbrk+0xe>
    errno = ENOMEM;
 8001d6c:	f004 fad6 	bl	800631c <__errno>
 8001d70:	230c      	movs	r3, #12
 8001d72:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	e7f3      	b.n	8001d62 <_sbrk+0x1e>
 8001d7a:	bf00      	nop
 8001d7c:	20020000 	.word	0x20020000
 8001d80:	00000400 	.word	0x00000400
 8001d84:	20000220 	.word	0x20000220
 8001d88:	200005e0 	.word	0x200005e0

08001d8c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d8c:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <SystemInit+0xa8>)
 8001d8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d9a:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <SystemInit+0xac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d806      	bhi.n	8001db4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <SystemInit+0xac>)
 8001da8:	6813      	ldr	r3, [r2, #0]
 8001daa:	f023 030f 	bic.w	r3, r3, #15
 8001dae:	f043 0307 	orr.w	r3, r3, #7
 8001db2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <SystemInit+0xb0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <SystemInit+0xb4>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <SystemInit+0xac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f013 0f08 	tst.w	r3, #8
 8001dd2:	d006      	beq.n	8001de2 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dd4:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <SystemInit+0xac>)
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	f023 030f 	bic.w	r3, r3, #15
 8001ddc:	f043 0307 	orr.w	r3, r3, #7
 8001de0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <SystemInit+0xb0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001de8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dec:	4915      	ldr	r1, [pc, #84]	; (8001e44 <SystemInit+0xb8>)
 8001dee:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001df0:	4915      	ldr	r1, [pc, #84]	; (8001e48 <SystemInit+0xbc>)
 8001df2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001df4:	4915      	ldr	r1, [pc, #84]	; (8001e4c <SystemInit+0xc0>)
 8001df6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dfa:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dfe:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001e08:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e0a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <SystemInit+0xc4>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <SystemInit+0xc8>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e18:	d202      	bcs.n	8001e20 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <SystemInit+0xcc>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <SystemInit+0xd0>)
 8001e22:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e26:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <SystemInit+0xa8>)
 8001e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e2e:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00
 8001e38:	52002000 	.word	0x52002000
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e44:	02020200 	.word	0x02020200
 8001e48:	01ff0000 	.word	0x01ff0000
 8001e4c:	01010280 	.word	0x01010280
 8001e50:	5c001000 	.word	0x5c001000
 8001e54:	ffff0000 	.word	0xffff0000
 8001e58:	51008108 	.word	0x51008108
 8001e5c:	52004000 	.word	0x52004000

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e64:	f7ff ff92 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f004 fa4b 	bl	8006328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7ff fafd 	bl	8001490 <main>
  bx  lr
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001ea4:	0800af3c 	.word	0x0800af3c
  ldr r2, =_sbss
 8001ea8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001eac:	200005e0 	.word	0x200005e0

08001eb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC3_IRQHandler>
	...

08001eb4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_InitTick+0x44>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b90b      	cbnz	r3, 8001ebe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001ebc:	4770      	bx	lr
{
 8001ebe:	b510      	push	{r4, lr}
 8001ec0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_InitTick+0x48>)
 8001ecc:	6810      	ldr	r0, [r2, #0]
 8001ece:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ed2:	f000 f8c3 	bl	800205c <HAL_SYSTICK_Config>
 8001ed6:	b968      	cbnz	r0, 8001ef4 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed8:	2c0f      	cmp	r4, #15
 8001eda:	d901      	bls.n	8001ee0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e00a      	b.n	8001ef6 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 f878 	bl	8001fdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_InitTick+0x4c>)
 8001eee:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8001ef4:	2001      	movs	r0, #1
}
 8001ef6:	bd10      	pop	{r4, pc}
 8001ef8:	2000001c 	.word	0x2000001c
 8001efc:	20000014 	.word	0x20000014
 8001f00:	20000020 	.word	0x20000020

08001f04 <HAL_Init>:
{
 8001f04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f06:	2003      	movs	r0, #3
 8001f08:	f000 f856 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f0c:	f000 ffdc 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8001f10:	490f      	ldr	r1, [pc, #60]	; (8001f50 <HAL_Init+0x4c>)
 8001f12:	698b      	ldr	r3, [r1, #24]
 8001f14:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_Init+0x50>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f22:	698b      	ldr	r3, [r1, #24]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	5cd3      	ldrb	r3, [r2, r3]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	fa20 f303 	lsr.w	r3, r0, r3
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_Init+0x54>)
 8001f34:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_Init+0x58>)
 8001f38:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff ffba 	bl	8001eb4 <HAL_InitTick>
 8001f40:	b110      	cbz	r0, 8001f48 <HAL_Init+0x44>
    return HAL_ERROR;
 8001f42:	2401      	movs	r4, #1
}
 8001f44:	4620      	mov	r0, r4
 8001f46:	bd10      	pop	{r4, pc}
 8001f48:	4604      	mov	r4, r0
  HAL_MspInit();
 8001f4a:	f7ff fcab 	bl	80018a4 <HAL_MspInit>
  return HAL_OK;
 8001f4e:	e7f9      	b.n	8001f44 <HAL_Init+0x40>
 8001f50:	58024400 	.word	0x58024400
 8001f54:	0800aa40 	.word	0x0800aa40
 8001f58:	20000018 	.word	0x20000018
 8001f5c:	20000014 	.word	0x20000014

08001f60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_IncTick+0x10>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x14>)
 8001f66:	6811      	ldr	r1, [r2, #0]
 8001f68:	440b      	add	r3, r1
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000001c 	.word	0x2000001c
 8001f74:	200005cc 	.word	0x200005cc

08001f78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <HAL_GetTick+0x8>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200005cc 	.word	0x200005cc

08001f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fff6 	bl	8001f78 <HAL_GetTick>
 8001f8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001f92:	d002      	beq.n	8001f9a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_Delay+0x24>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9a:	f7ff ffed 	bl	8001f78 <HAL_GetTick>
 8001f9e:	1b40      	subs	r0, r0, r5
 8001fa0:	42a0      	cmp	r0, r4
 8001fa2:	d3fa      	bcc.n	8001f9a <HAL_Delay+0x16>
  {
  }
}
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000001c 	.word	0x2000001c

08001fac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001fac:	4b01      	ldr	r3, [pc, #4]	; (8001fb4 <HAL_GetREVID+0x8>)
 8001fae:	6818      	ldr	r0, [r3, #0]
}
 8001fb0:	0c00      	lsrs	r0, r0, #16
 8001fb2:	4770      	bx	lr
 8001fb4:	5c001000 	.word	0x5c001000

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001fba:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	0200      	lsls	r0, r0, #8
 8001fc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001fcc:	4a02      	ldr	r2, [pc, #8]	; (8001fd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fce:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001fd0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	05fa0000 	.word	0x05fa0000

08001fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_NVIC_SetPriority+0x58>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe6:	f1c3 0407 	rsb	r4, r3, #7
 8001fea:	2c04      	cmp	r4, #4
 8001fec:	bf28      	it	cs
 8001fee:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff0:	1d1d      	adds	r5, r3, #4
 8001ff2:	2d06      	cmp	r5, #6
 8001ff4:	d914      	bls.n	8002020 <HAL_NVIC_SetPriority+0x44>
 8001ff6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8001ffc:	fa05 f404 	lsl.w	r4, r5, r4
 8002000:	ea21 0104 	bic.w	r1, r1, r4
 8002004:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002006:	fa05 f303 	lsl.w	r3, r5, r3
 800200a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002010:	2800      	cmp	r0, #0
 8002012:	db07      	blt.n	8002024 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	0109      	lsls	r1, r1, #4
 8002016:	b2c9      	uxtb	r1, r1
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_NVIC_SetPriority+0x5c>)
 800201a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800201c:	bc30      	pop	{r4, r5}
 800201e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002020:	2300      	movs	r3, #0
 8002022:	e7e9      	b.n	8001ff8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	f000 000f 	and.w	r0, r0, #15
 8002028:	0109      	lsls	r1, r1, #4
 800202a:	b2c9      	uxtb	r1, r1
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_NVIC_SetPriority+0x60>)
 800202e:	5419      	strb	r1, [r3, r0]
 8002030:	e7f4      	b.n	800201c <HAL_NVIC_SetPriority+0x40>
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00
 8002038:	e000e400 	.word	0xe000e400
 800203c:	e000ed14 	.word	0xe000ed14

08002040 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002040:	2800      	cmp	r0, #0
 8002042:	db07      	blt.n	8002054 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002044:	f000 021f 	and.w	r2, r0, #31
 8002048:	0940      	lsrs	r0, r0, #5
 800204a:	2301      	movs	r3, #1
 800204c:	4093      	lsls	r3, r2
 800204e:	4a02      	ldr	r2, [pc, #8]	; (8002058 <HAL_NVIC_EnableIRQ+0x18>)
 8002050:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100

0800205c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	3801      	subs	r0, #1
 800205e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002062:	d20a      	bcs.n	800207a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_SYSTICK_Config+0x24>)
 8002066:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_SYSTICK_Config+0x28>)
 800206a:	21f0      	movs	r1, #240	; 0xf0
 800206c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	2000      	movs	r0, #0
 8002072:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff ff74 	bl	8001f78 <HAL_GetTick>

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002090:	2c00      	cmp	r4, #0
 8002092:	f000 8191 	beq.w	80023b8 <HAL_DMA_Abort+0x330>
 8002096:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002098:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d006      	beq.n	80020b0 <HAL_DMA_Abort+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	6563      	str	r3, [r4, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a6:	2300      	movs	r3, #0
 80020a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
  }

  return HAL_OK;
}
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	498c      	ldr	r1, [pc, #560]	; (80022e4 <HAL_DMA_Abort+0x25c>)
 80020b4:	4a8c      	ldr	r2, [pc, #560]	; (80022e8 <HAL_DMA_Abort+0x260>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	bf18      	it	ne
 80020ba:	428b      	cmpne	r3, r1
 80020bc:	d030      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020be:	3218      	adds	r2, #24
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d02d      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020c4:	3218      	adds	r2, #24
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02a      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020ca:	3218      	adds	r2, #24
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020d0:	3218      	adds	r2, #24
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d024      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020d6:	3218      	adds	r2, #24
 80020d8:	4293      	cmp	r3, r2
 80020da:	d021      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020dc:	3218      	adds	r2, #24
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01e      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020ea:	3218      	adds	r2, #24
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d017      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020f0:	3218      	adds	r2, #24
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d014      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020f6:	3218      	adds	r2, #24
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d011      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 80020fc:	3218      	adds	r2, #24
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 8002102:	3218      	adds	r2, #24
 8002104:	4293      	cmp	r3, r2
 8002106:	d00b      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 8002108:	3218      	adds	r2, #24
 800210a:	4293      	cmp	r3, r2
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Abort+0x98>
 800210e:	3218      	adds	r2, #24
 8002110:	4293      	cmp	r3, r2
 8002112:	d005      	beq.n	8002120 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f022 020e 	bic.w	r2, r2, #14
 800211a:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800211c:	6826      	ldr	r6, [r4, #0]
 800211e:	e009      	b.n	8002134 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f022 021e 	bic.w	r2, r2, #30
 8002126:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002128:	6822      	ldr	r2, [r4, #0]
 800212a:	6953      	ldr	r3, [r2, #20]
 800212c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002130:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002132:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	496b      	ldr	r1, [pc, #428]	; (80022e4 <HAL_DMA_Abort+0x25c>)
 8002138:	4a6b      	ldr	r2, [pc, #428]	; (80022e8 <HAL_DMA_Abort+0x260>)
 800213a:	4293      	cmp	r3, r2
 800213c:	bf18      	it	ne
 800213e:	428b      	cmpne	r3, r1
 8002140:	d042      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002142:	3218      	adds	r2, #24
 8002144:	4293      	cmp	r3, r2
 8002146:	d03f      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002148:	3218      	adds	r2, #24
 800214a:	4293      	cmp	r3, r2
 800214c:	d03c      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 800214e:	3218      	adds	r2, #24
 8002150:	4293      	cmp	r3, r2
 8002152:	d039      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002154:	3218      	adds	r2, #24
 8002156:	4293      	cmp	r3, r2
 8002158:	d036      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 800215a:	3218      	adds	r2, #24
 800215c:	4293      	cmp	r3, r2
 800215e:	d033      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002160:	3218      	adds	r2, #24
 8002162:	4293      	cmp	r3, r2
 8002164:	d030      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002166:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800216a:	4293      	cmp	r3, r2
 800216c:	d02c      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 800216e:	3218      	adds	r2, #24
 8002170:	4293      	cmp	r3, r2
 8002172:	d029      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002174:	3218      	adds	r2, #24
 8002176:	4293      	cmp	r3, r2
 8002178:	d026      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 800217a:	3218      	adds	r2, #24
 800217c:	4293      	cmp	r3, r2
 800217e:	d023      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002180:	3218      	adds	r2, #24
 8002182:	4293      	cmp	r3, r2
 8002184:	d020      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002186:	3218      	adds	r2, #24
 8002188:	4293      	cmp	r3, r2
 800218a:	d01d      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 800218c:	3218      	adds	r2, #24
 800218e:	4293      	cmp	r3, r2
 8002190:	d01a      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002192:	3218      	adds	r2, #24
 8002194:	4293      	cmp	r3, r2
 8002196:	d017      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 8002198:	4a54      	ldr	r2, [pc, #336]	; (80022ec <HAL_DMA_Abort+0x264>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d014      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 800219e:	3214      	adds	r2, #20
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d011      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 80021a4:	3214      	adds	r2, #20
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00e      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 80021aa:	3214      	adds	r2, #20
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 80021b0:	3214      	adds	r2, #20
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d008      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 80021b6:	3214      	adds	r2, #20
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d005      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 80021bc:	3214      	adds	r2, #20
 80021be:	4293      	cmp	r3, r2
 80021c0:	d002      	beq.n	80021c8 <HAL_DMA_Abort+0x140>
 80021c2:	3214      	adds	r2, #20
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d104      	bne.n	80021d2 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	4943      	ldr	r1, [pc, #268]	; (80022e4 <HAL_DMA_Abort+0x25c>)
 80021d6:	4a44      	ldr	r2, [pc, #272]	; (80022e8 <HAL_DMA_Abort+0x260>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf18      	it	ne
 80021dc:	428b      	cmpne	r3, r1
 80021de:	d02f      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 80021e0:	3218      	adds	r2, #24
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02c      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 80021e6:	3218      	adds	r2, #24
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d029      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 80021ec:	3218      	adds	r2, #24
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d026      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 80021f2:	3218      	adds	r2, #24
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d023      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 80021f8:	3218      	adds	r2, #24
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d020      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 80021fe:	3218      	adds	r2, #24
 8002200:	4293      	cmp	r3, r2
 8002202:	d01d      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 8002204:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002208:	4293      	cmp	r3, r2
 800220a:	d019      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 800220c:	3218      	adds	r2, #24
 800220e:	4293      	cmp	r3, r2
 8002210:	d016      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 8002212:	3218      	adds	r2, #24
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 8002218:	3218      	adds	r2, #24
 800221a:	4293      	cmp	r3, r2
 800221c:	d010      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 800221e:	3218      	adds	r2, #24
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 8002224:	3218      	adds	r2, #24
 8002226:	4293      	cmp	r3, r2
 8002228:	d00a      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 800222a:	3218      	adds	r2, #24
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 8002230:	3218      	adds	r2, #24
 8002232:	4293      	cmp	r3, r2
 8002234:	d004      	beq.n	8002240 <HAL_DMA_Abort+0x1b8>
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e003      	b.n	8002248 <HAL_DMA_Abort+0x1c0>
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002248:	6833      	ldr	r3, [r6, #0]
 800224a:	f013 0f01 	tst.w	r3, #1
 800224e:	d00e      	beq.n	800226e <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002250:	f7ff fe92 	bl	8001f78 <HAL_GetTick>
 8002254:	1b43      	subs	r3, r0, r5
 8002256:	2b05      	cmp	r3, #5
 8002258:	d9f6      	bls.n	8002248 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800225a:	2320      	movs	r3, #32
 800225c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800225e:	2300      	movs	r3, #0
 8002260:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8002264:	2303      	movs	r3, #3
 8002266:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 800226a:	2001      	movs	r0, #1
 800226c:	e71f      	b.n	80020ae <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	491c      	ldr	r1, [pc, #112]	; (80022e4 <HAL_DMA_Abort+0x25c>)
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_DMA_Abort+0x260>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf18      	it	ne
 8002278:	428b      	cmpne	r3, r1
 800227a:	d039      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 800227c:	3218      	adds	r2, #24
 800227e:	4293      	cmp	r3, r2
 8002280:	d036      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 8002282:	3218      	adds	r2, #24
 8002284:	4293      	cmp	r3, r2
 8002286:	d033      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 8002288:	3218      	adds	r2, #24
 800228a:	4293      	cmp	r3, r2
 800228c:	d030      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 800228e:	3218      	adds	r2, #24
 8002290:	4293      	cmp	r3, r2
 8002292:	d02d      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 8002294:	3218      	adds	r2, #24
 8002296:	4293      	cmp	r3, r2
 8002298:	d02a      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 800229a:	3218      	adds	r2, #24
 800229c:	4293      	cmp	r3, r2
 800229e:	d027      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022a0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d023      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022a8:	3218      	adds	r2, #24
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d020      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022ae:	3218      	adds	r2, #24
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d01d      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022b4:	3218      	adds	r2, #24
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01a      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022ba:	3218      	adds	r2, #24
 80022bc:	4293      	cmp	r3, r2
 80022be:	d017      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022c0:	3218      	adds	r2, #24
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d014      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022c6:	3218      	adds	r2, #24
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d011      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
 80022cc:	3218      	adds	r2, #24
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00e      	beq.n	80022f0 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022d6:	f003 021f 	and.w	r2, r3, #31
 80022da:	2301      	movs	r3, #1
 80022dc:	4093      	lsls	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	e00d      	b.n	80022fe <HAL_DMA_Abort+0x276>
 80022e2:	bf00      	nop
 80022e4:	40020010 	.word	0x40020010
 80022e8:	40020028 	.word	0x40020028
 80022ec:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	233f      	movs	r3, #63	; 0x3f
 80022fa:	4093      	lsls	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	492e      	ldr	r1, [pc, #184]	; (80023bc <HAL_DMA_Abort+0x334>)
 8002302:	4a2f      	ldr	r2, [pc, #188]	; (80023c0 <HAL_DMA_Abort+0x338>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf18      	it	ne
 8002308:	428b      	cmpne	r3, r1
 800230a:	d042      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800230c:	3218      	adds	r2, #24
 800230e:	4293      	cmp	r3, r2
 8002310:	d03f      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002312:	3218      	adds	r2, #24
 8002314:	4293      	cmp	r3, r2
 8002316:	d03c      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002318:	3218      	adds	r2, #24
 800231a:	4293      	cmp	r3, r2
 800231c:	d039      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800231e:	3218      	adds	r2, #24
 8002320:	4293      	cmp	r3, r2
 8002322:	d036      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002324:	3218      	adds	r2, #24
 8002326:	4293      	cmp	r3, r2
 8002328:	d033      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800232a:	3218      	adds	r2, #24
 800232c:	4293      	cmp	r3, r2
 800232e:	d030      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002330:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002334:	4293      	cmp	r3, r2
 8002336:	d02c      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002338:	3218      	adds	r2, #24
 800233a:	4293      	cmp	r3, r2
 800233c:	d029      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800233e:	3218      	adds	r2, #24
 8002340:	4293      	cmp	r3, r2
 8002342:	d026      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002344:	3218      	adds	r2, #24
 8002346:	4293      	cmp	r3, r2
 8002348:	d023      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800234a:	3218      	adds	r2, #24
 800234c:	4293      	cmp	r3, r2
 800234e:	d020      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002350:	3218      	adds	r2, #24
 8002352:	4293      	cmp	r3, r2
 8002354:	d01d      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002356:	3218      	adds	r2, #24
 8002358:	4293      	cmp	r3, r2
 800235a:	d01a      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800235c:	3218      	adds	r2, #24
 800235e:	4293      	cmp	r3, r2
 8002360:	d017      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_DMA_Abort+0x33c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d014      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002368:	3214      	adds	r2, #20
 800236a:	4293      	cmp	r3, r2
 800236c:	d011      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800236e:	3214      	adds	r2, #20
 8002370:	4293      	cmp	r3, r2
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002374:	3214      	adds	r2, #20
 8002376:	4293      	cmp	r3, r2
 8002378:	d00b      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800237a:	3214      	adds	r2, #20
 800237c:	4293      	cmp	r3, r2
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002380:	3214      	adds	r2, #20
 8002382:	4293      	cmp	r3, r2
 8002384:	d005      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 8002386:	3214      	adds	r2, #20
 8002388:	4293      	cmp	r3, r2
 800238a:	d002      	beq.n	8002392 <HAL_DMA_Abort+0x30a>
 800238c:	3214      	adds	r2, #20
 800238e:	4293      	cmp	r3, r2
 8002390:	d10b      	bne.n	80023aa <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002394:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002396:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002398:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800239a:	b133      	cbz	r3, 80023aa <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80023a6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80023a8:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80023b6:	e67a      	b.n	80020ae <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 80023b8:	2001      	movs	r0, #1
 80023ba:	e678      	b.n	80020ae <HAL_DMA_Abort+0x26>
 80023bc:	40020010 	.word	0x40020010
 80023c0:	40020028 	.word	0x40020028
 80023c4:	58025408 	.word	0x58025408

080023c8 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023c8:	2800      	cmp	r0, #0
 80023ca:	f000 8129 	beq.w	8002620 <HAL_DMA_Abort_IT+0x258>
{
 80023ce:	b508      	push	{r3, lr}
 80023d0:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d003      	beq.n	80023e4 <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80023e0:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80023e2:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	4890      	ldr	r0, [pc, #576]	; (8002628 <HAL_DMA_Abort_IT+0x260>)
 80023e8:	4990      	ldr	r1, [pc, #576]	; (800262c <HAL_DMA_Abort_IT+0x264>)
 80023ea:	428b      	cmp	r3, r1
 80023ec:	bf18      	it	ne
 80023ee:	4283      	cmpne	r3, r0
 80023f0:	bf0c      	ite	eq
 80023f2:	2101      	moveq	r1, #1
 80023f4:	2100      	movne	r1, #0
 80023f6:	d066      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 80023f8:	3030      	adds	r0, #48	; 0x30
 80023fa:	4283      	cmp	r3, r0
 80023fc:	d063      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 80023fe:	3018      	adds	r0, #24
 8002400:	4283      	cmp	r3, r0
 8002402:	d060      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002404:	3018      	adds	r0, #24
 8002406:	4283      	cmp	r3, r0
 8002408:	d05d      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 800240a:	3018      	adds	r0, #24
 800240c:	4283      	cmp	r3, r0
 800240e:	d05a      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002410:	3018      	adds	r0, #24
 8002412:	4283      	cmp	r3, r0
 8002414:	d057      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002416:	3018      	adds	r0, #24
 8002418:	4283      	cmp	r3, r0
 800241a:	d054      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 800241c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002420:	4283      	cmp	r3, r0
 8002422:	d050      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002424:	3018      	adds	r0, #24
 8002426:	4283      	cmp	r3, r0
 8002428:	d04d      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 800242a:	3018      	adds	r0, #24
 800242c:	4283      	cmp	r3, r0
 800242e:	d04a      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002430:	3018      	adds	r0, #24
 8002432:	4283      	cmp	r3, r0
 8002434:	d047      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002436:	3018      	adds	r0, #24
 8002438:	4283      	cmp	r3, r0
 800243a:	d044      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 800243c:	3018      	adds	r0, #24
 800243e:	4283      	cmp	r3, r0
 8002440:	d041      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002442:	3018      	adds	r0, #24
 8002444:	4283      	cmp	r3, r0
 8002446:	d03e      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
 8002448:	3018      	adds	r0, #24
 800244a:	4283      	cmp	r3, r0
 800244c:	d03b      	beq.n	80024c6 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	f021 010e 	bic.w	r1, r1, #14
 8002454:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 800245c:	4973      	ldr	r1, [pc, #460]	; (800262c <HAL_DMA_Abort_IT+0x264>)
 800245e:	428b      	cmp	r3, r1
 8002460:	bf18      	it	ne
 8002462:	4283      	cmpne	r3, r0
 8002464:	d06a      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 8002466:	4972      	ldr	r1, [pc, #456]	; (8002630 <HAL_DMA_Abort_IT+0x268>)
 8002468:	428b      	cmp	r3, r1
 800246a:	d067      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 800246c:	3118      	adds	r1, #24
 800246e:	428b      	cmp	r3, r1
 8002470:	d064      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 8002472:	3118      	adds	r1, #24
 8002474:	428b      	cmp	r3, r1
 8002476:	d061      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 8002478:	3118      	adds	r1, #24
 800247a:	428b      	cmp	r3, r1
 800247c:	d05e      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 800247e:	3118      	adds	r1, #24
 8002480:	428b      	cmp	r3, r1
 8002482:	d05b      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 8002484:	3118      	adds	r1, #24
 8002486:	428b      	cmp	r3, r1
 8002488:	d058      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 800248a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800248e:	428b      	cmp	r3, r1
 8002490:	d054      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 8002492:	3118      	adds	r1, #24
 8002494:	428b      	cmp	r3, r1
 8002496:	d051      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 8002498:	3118      	adds	r1, #24
 800249a:	428b      	cmp	r3, r1
 800249c:	d04e      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 800249e:	3118      	adds	r1, #24
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d04b      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 80024a4:	3118      	adds	r1, #24
 80024a6:	428b      	cmp	r3, r1
 80024a8:	d048      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 80024aa:	3118      	adds	r1, #24
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d045      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 80024b0:	3118      	adds	r1, #24
 80024b2:	428b      	cmp	r3, r1
 80024b4:	d042      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 80024b6:	3118      	adds	r1, #24
 80024b8:	428b      	cmp	r3, r1
 80024ba:	d03f      	beq.n	800253c <HAL_DMA_Abort_IT+0x174>
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	f021 0101 	bic.w	r1, r1, #1
 80024c2:	6019      	str	r1, [r3, #0]
 80024c4:	e03e      	b.n	8002544 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c6:	2004      	movs	r0, #4
 80024c8:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80024cc:	bb81      	cbnz	r1, 8002530 <HAL_DMA_Abort_IT+0x168>
 80024ce:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_DMA_Abort_IT+0x268>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d02d      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 80024d4:	3218      	adds	r2, #24
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02a      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 80024da:	3218      	adds	r2, #24
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 80024e0:	3218      	adds	r2, #24
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d024      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 80024e6:	3218      	adds	r2, #24
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d021      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 80024ec:	3218      	adds	r2, #24
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01e      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 80024f2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01a      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 80024fa:	3218      	adds	r2, #24
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d017      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 8002500:	3218      	adds	r2, #24
 8002502:	4293      	cmp	r3, r2
 8002504:	d014      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 8002506:	3218      	adds	r2, #24
 8002508:	4293      	cmp	r3, r2
 800250a:	d011      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 800250c:	3218      	adds	r2, #24
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 8002512:	3218      	adds	r2, #24
 8002514:	4293      	cmp	r3, r2
 8002516:	d00b      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 8002518:	3218      	adds	r2, #24
 800251a:	4293      	cmp	r3, r2
 800251c:	d008      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 800251e:	3218      	adds	r2, #24
 8002520:	4293      	cmp	r3, r2
 8002522:	d005      	beq.n	8002530 <HAL_DMA_Abort_IT+0x168>
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800252c:	2000      	movs	r0, #0
 800252e:	e758      	b.n	80023e2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002538:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800253a:	e752      	b.n	80023e2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	f021 0101 	bic.w	r1, r1, #1
 8002542:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002544:	6813      	ldr	r3, [r2, #0]
 8002546:	4838      	ldr	r0, [pc, #224]	; (8002628 <HAL_DMA_Abort_IT+0x260>)
 8002548:	4938      	ldr	r1, [pc, #224]	; (800262c <HAL_DMA_Abort_IT+0x264>)
 800254a:	428b      	cmp	r3, r1
 800254c:	bf18      	it	ne
 800254e:	4283      	cmpne	r3, r0
 8002550:	d042      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002552:	3118      	adds	r1, #24
 8002554:	428b      	cmp	r3, r1
 8002556:	d03f      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002558:	3118      	adds	r1, #24
 800255a:	428b      	cmp	r3, r1
 800255c:	d03c      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 800255e:	3118      	adds	r1, #24
 8002560:	428b      	cmp	r3, r1
 8002562:	d039      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002564:	3118      	adds	r1, #24
 8002566:	428b      	cmp	r3, r1
 8002568:	d036      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 800256a:	3118      	adds	r1, #24
 800256c:	428b      	cmp	r3, r1
 800256e:	d033      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002570:	3118      	adds	r1, #24
 8002572:	428b      	cmp	r3, r1
 8002574:	d030      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002576:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800257a:	428b      	cmp	r3, r1
 800257c:	d02c      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 800257e:	3118      	adds	r1, #24
 8002580:	428b      	cmp	r3, r1
 8002582:	d029      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002584:	3118      	adds	r1, #24
 8002586:	428b      	cmp	r3, r1
 8002588:	d026      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 800258a:	3118      	adds	r1, #24
 800258c:	428b      	cmp	r3, r1
 800258e:	d023      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002590:	3118      	adds	r1, #24
 8002592:	428b      	cmp	r3, r1
 8002594:	d020      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 8002596:	3118      	adds	r1, #24
 8002598:	428b      	cmp	r3, r1
 800259a:	d01d      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 800259c:	3118      	adds	r1, #24
 800259e:	428b      	cmp	r3, r1
 80025a0:	d01a      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025a2:	3118      	adds	r1, #24
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d017      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025a8:	4922      	ldr	r1, [pc, #136]	; (8002634 <HAL_DMA_Abort_IT+0x26c>)
 80025aa:	428b      	cmp	r3, r1
 80025ac:	d014      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025ae:	3114      	adds	r1, #20
 80025b0:	428b      	cmp	r3, r1
 80025b2:	d011      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025b4:	3114      	adds	r1, #20
 80025b6:	428b      	cmp	r3, r1
 80025b8:	d00e      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025ba:	3114      	adds	r1, #20
 80025bc:	428b      	cmp	r3, r1
 80025be:	d00b      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025c0:	3114      	adds	r1, #20
 80025c2:	428b      	cmp	r3, r1
 80025c4:	d008      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025c6:	3114      	adds	r1, #20
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d005      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025cc:	3114      	adds	r1, #20
 80025ce:	428b      	cmp	r3, r1
 80025d0:	d002      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x210>
 80025d2:	3114      	adds	r1, #20
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d117      	bne.n	8002608 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025d8:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80025da:	680b      	ldr	r3, [r1, #0]
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e2:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025e4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80025e6:	f003 011f 	and.w	r1, r3, #31
 80025ea:	2301      	movs	r3, #1
 80025ec:	408b      	lsls	r3, r1
 80025ee:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80025f2:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80025f4:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80025f6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80025f8:	b133      	cbz	r3, 8002608 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002600:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002602:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002604:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8002606:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002608:	2300      	movs	r3, #0
 800260a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800260e:	2301      	movs	r3, #1
 8002610:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002614:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002616:	b12b      	cbz	r3, 8002624 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 8002618:	4610      	mov	r0, r2
 800261a:	4798      	blx	r3
  return HAL_OK;
 800261c:	2000      	movs	r0, #0
 800261e:	e6e0      	b.n	80023e2 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
}
 8002622:	4770      	bx	lr
  return HAL_OK;
 8002624:	2000      	movs	r0, #0
 8002626:	e6dc      	b.n	80023e2 <HAL_DMA_Abort_IT+0x1a>
 8002628:	40020010 	.word	0x40020010
 800262c:	40020028 	.word	0x40020028
 8002630:	40020040 	.word	0x40020040
 8002634:	58025408 	.word	0x58025408

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800263c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800263e:	e03a      	b.n	80026b6 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002640:	2409      	movs	r4, #9
 8002642:	e000      	b.n	8002646 <HAL_GPIO_Init+0xe>
 8002644:	2400      	movs	r4, #0
 8002646:	40b4      	lsls	r4, r6
 8002648:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800264a:	3502      	adds	r5, #2
 800264c:	4e6f      	ldr	r6, [pc, #444]	; (800280c <HAL_GPIO_Init+0x1d4>)
 800264e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002652:	4c6f      	ldr	r4, [pc, #444]	; (8002810 <HAL_GPIO_Init+0x1d8>)
 8002654:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002656:	43d4      	mvns	r4, r2
 8002658:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265c:	684f      	ldr	r7, [r1, #4]
 800265e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002662:	d001      	beq.n	8002668 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002664:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002668:	4d69      	ldr	r5, [pc, #420]	; (8002810 <HAL_GPIO_Init+0x1d8>)
 800266a:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800266c:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 800266e:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002672:	684f      	ldr	r7, [r1, #4]
 8002674:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002678:	d001      	beq.n	800267e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800267a:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800267e:	4e64      	ldr	r6, [pc, #400]	; (8002810 <HAL_GPIO_Init+0x1d8>)
 8002680:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002682:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002686:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002688:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800268c:	684f      	ldr	r7, [r1, #4]
 800268e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002692:	d001      	beq.n	8002698 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8002694:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002698:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800269c:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800269e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80026a0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a2:	684e      	ldr	r6, [r1, #4]
 80026a4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80026a8:	d001      	beq.n	80026ae <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80026aa:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b2:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80026b4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026b6:	680a      	ldr	r2, [r1, #0]
 80026b8:	fa32 f403 	lsrs.w	r4, r2, r3
 80026bc:	f000 80a3 	beq.w	8002806 <HAL_GPIO_Init+0x1ce>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026c0:	2401      	movs	r4, #1
 80026c2:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 80026c4:	4022      	ands	r2, r4
 80026c6:	d0f5      	beq.n	80026b4 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c8:	684d      	ldr	r5, [r1, #4]
 80026ca:	1e6e      	subs	r6, r5, #1
 80026cc:	2d11      	cmp	r5, #17
 80026ce:	bf18      	it	ne
 80026d0:	2e01      	cmpne	r6, #1
 80026d2:	d901      	bls.n	80026d8 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d4:	2d12      	cmp	r5, #18
 80026d6:	d112      	bne.n	80026fe <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 80026d8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026da:	005f      	lsls	r7, r3, #1
 80026dc:	2503      	movs	r5, #3
 80026de:	40bd      	lsls	r5, r7
 80026e0:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e4:	68cd      	ldr	r5, [r1, #12]
 80026e6:	40bd      	lsls	r5, r7
 80026e8:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80026ea:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80026ec:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ee:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026f2:	684d      	ldr	r5, [r1, #4]
 80026f4:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80026f8:	409c      	lsls	r4, r3
 80026fa:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80026fc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80026fe:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002700:	005e      	lsls	r6, r3, #1
 8002702:	2503      	movs	r5, #3
 8002704:	40b5      	lsls	r5, r6
 8002706:	43ec      	mvns	r4, r5
 8002708:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270c:	688d      	ldr	r5, [r1, #8]
 800270e:	40b5      	lsls	r5, r6
 8002710:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002712:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002714:	684d      	ldr	r5, [r1, #4]
 8002716:	2d12      	cmp	r5, #18
 8002718:	bf18      	it	ne
 800271a:	2d02      	cmpne	r5, #2
 800271c:	d113      	bne.n	8002746 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->AFR[position >> 3U];
 800271e:	08df      	lsrs	r7, r3, #3
 8002720:	3708      	adds	r7, #8
 8002722:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002726:	f003 0507 	and.w	r5, r3, #7
 800272a:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800272e:	250f      	movs	r5, #15
 8002730:	fa05 f50c 	lsl.w	r5, r5, ip
 8002734:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002738:	690d      	ldr	r5, [r1, #16]
 800273a:	fa05 f50c 	lsl.w	r5, r5, ip
 800273e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002742:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8002746:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002748:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274a:	684c      	ldr	r4, [r1, #4]
 800274c:	f004 0403 	and.w	r4, r4, #3
 8002750:	40b4      	lsls	r4, r6
 8002752:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002754:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002756:	684c      	ldr	r4, [r1, #4]
 8002758:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800275c:	d0aa      	beq.n	80026b4 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	4c2d      	ldr	r4, [pc, #180]	; (8002814 <HAL_GPIO_Init+0x1dc>)
 8002760:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002764:	f045 0502 	orr.w	r5, r5, #2
 8002768:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800276c:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002770:	f004 0402 	and.w	r4, r4, #2
 8002774:	9401      	str	r4, [sp, #4]
 8002776:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002778:	089d      	lsrs	r5, r3, #2
 800277a:	1cae      	adds	r6, r5, #2
 800277c:	4c23      	ldr	r4, [pc, #140]	; (800280c <HAL_GPIO_Init+0x1d4>)
 800277e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002782:	f003 0403 	and.w	r4, r3, #3
 8002786:	00a6      	lsls	r6, r4, #2
 8002788:	240f      	movs	r4, #15
 800278a:	40b4      	lsls	r4, r6
 800278c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002790:	4c21      	ldr	r4, [pc, #132]	; (8002818 <HAL_GPIO_Init+0x1e0>)
 8002792:	42a0      	cmp	r0, r4
 8002794:	f43f af56 	beq.w	8002644 <HAL_GPIO_Init+0xc>
 8002798:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800279c:	42a0      	cmp	r0, r4
 800279e:	d022      	beq.n	80027e6 <HAL_GPIO_Init+0x1ae>
 80027a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027a4:	42a0      	cmp	r0, r4
 80027a6:	d020      	beq.n	80027ea <HAL_GPIO_Init+0x1b2>
 80027a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d01e      	beq.n	80027ee <HAL_GPIO_Init+0x1b6>
 80027b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027b4:	42a0      	cmp	r0, r4
 80027b6:	d01c      	beq.n	80027f2 <HAL_GPIO_Init+0x1ba>
 80027b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027bc:	42a0      	cmp	r0, r4
 80027be:	d01a      	beq.n	80027f6 <HAL_GPIO_Init+0x1be>
 80027c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027c4:	42a0      	cmp	r0, r4
 80027c6:	d018      	beq.n	80027fa <HAL_GPIO_Init+0x1c2>
 80027c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027cc:	42a0      	cmp	r0, r4
 80027ce:	d016      	beq.n	80027fe <HAL_GPIO_Init+0x1c6>
 80027d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027d4:	42a0      	cmp	r0, r4
 80027d6:	d014      	beq.n	8002802 <HAL_GPIO_Init+0x1ca>
 80027d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027dc:	42a0      	cmp	r0, r4
 80027de:	f43f af2f 	beq.w	8002640 <HAL_GPIO_Init+0x8>
 80027e2:	240a      	movs	r4, #10
 80027e4:	e72f      	b.n	8002646 <HAL_GPIO_Init+0xe>
 80027e6:	2401      	movs	r4, #1
 80027e8:	e72d      	b.n	8002646 <HAL_GPIO_Init+0xe>
 80027ea:	2402      	movs	r4, #2
 80027ec:	e72b      	b.n	8002646 <HAL_GPIO_Init+0xe>
 80027ee:	2403      	movs	r4, #3
 80027f0:	e729      	b.n	8002646 <HAL_GPIO_Init+0xe>
 80027f2:	2404      	movs	r4, #4
 80027f4:	e727      	b.n	8002646 <HAL_GPIO_Init+0xe>
 80027f6:	2405      	movs	r4, #5
 80027f8:	e725      	b.n	8002646 <HAL_GPIO_Init+0xe>
 80027fa:	2406      	movs	r4, #6
 80027fc:	e723      	b.n	8002646 <HAL_GPIO_Init+0xe>
 80027fe:	2407      	movs	r4, #7
 8002800:	e721      	b.n	8002646 <HAL_GPIO_Init+0xe>
 8002802:	2408      	movs	r4, #8
 8002804:	e71f      	b.n	8002646 <HAL_GPIO_Init+0xe>
  }
}
 8002806:	b003      	add	sp, #12
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280a:	bf00      	nop
 800280c:	58000400 	.word	0x58000400
 8002810:	58000080 	.word	0x58000080
 8002814:	58024400 	.word	0x58024400
 8002818:	58020000 	.word	0x58020000

0800281c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281c:	b10a      	cbz	r2, 8002822 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281e:	6181      	str	r1, [r0, #24]
 8002820:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002822:	0409      	lsls	r1, r1, #16
 8002824:	6181      	str	r1, [r0, #24]
  }
}
 8002826:	4770      	bx	lr

08002828 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_PWREx_ConfigSupply+0x50>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f013 0f04 	tst.w	r3, #4
 8002830:	d107      	bne.n	8002842 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_PWREx_ConfigSupply+0x50>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	4283      	cmp	r3, r0
 800283c:	d01a      	beq.n	8002874 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800283e:	2001      	movs	r0, #1
 8002840:	4770      	bx	lr
{
 8002842:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_PWREx_ConfigSupply+0x50>)
 8002846:	68d3      	ldr	r3, [r2, #12]
 8002848:	f023 0307 	bic.w	r3, r3, #7
 800284c:	4318      	orrs	r0, r3
 800284e:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002850:	f7ff fb92 	bl	8001f78 <HAL_GetTick>
 8002854:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_PWREx_ConfigSupply+0x50>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800285e:	d107      	bne.n	8002870 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002860:	f7ff fb8a 	bl	8001f78 <HAL_GetTick>
 8002864:	1b00      	subs	r0, r0, r4
 8002866:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800286a:	d9f4      	bls.n	8002856 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
 800286e:	e000      	b.n	8002872 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002870:	2000      	movs	r0, #0
}
 8002872:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002874:	2000      	movs	r0, #0
}
 8002876:	4770      	bx	lr
 8002878:	58024800 	.word	0x58024800

0800287c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800287c:	2800      	cmp	r0, #0
 800287e:	f000 8304 	beq.w	8002e8a <HAL_RCC_OscConfig+0x60e>
{
 8002882:	b538      	push	{r3, r4, r5, lr}
 8002884:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	6803      	ldr	r3, [r0, #0]
 8002888:	f013 0f01 	tst.w	r3, #1
 800288c:	d025      	beq.n	80028da <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288e:	4aae      	ldr	r2, [pc, #696]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002890:	6913      	ldr	r3, [r2, #16]
 8002892:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002896:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002898:	2b10      	cmp	r3, #16
 800289a:	d015      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4c>
 800289c:	2b18      	cmp	r3, #24
 800289e:	d00f      	beq.n	80028c0 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	6863      	ldr	r3, [r4, #4]
 80028a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a6:	d03f      	beq.n	8002928 <HAL_RCC_OscConfig+0xac>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d153      	bne.n	8002954 <HAL_RCC_OscConfig+0xd8>
 80028ac:	4ba6      	ldr	r3, [pc, #664]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e038      	b.n	8002932 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	2a02      	cmp	r2, #2
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	4b9f      	ldr	r3, [pc, #636]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028d0:	d003      	beq.n	80028da <HAL_RCC_OscConfig+0x5e>
 80028d2:	6863      	ldr	r3, [r4, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 82da 	beq.w	8002e8e <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	f013 0f02 	tst.w	r3, #2
 80028e0:	f000 808b 	beq.w	80029fa <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e4:	4a98      	ldr	r2, [pc, #608]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80028e6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028ea:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80028ee:	d05a      	beq.n	80029a6 <HAL_RCC_OscConfig+0x12a>
 80028f0:	2b18      	cmp	r3, #24
 80028f2:	d055      	beq.n	80029a0 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f4:	68e3      	ldr	r3, [r4, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80c8 	beq.w	8002a8c <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028fc:	4992      	ldr	r1, [pc, #584]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80028fe:	680a      	ldr	r2, [r1, #0]
 8002900:	f022 0219 	bic.w	r2, r2, #25
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7ff fb36 	bl	8001f78 <HAL_GetTick>
 800290c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800290e:	4b8e      	ldr	r3, [pc, #568]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f013 0f04 	tst.w	r3, #4
 8002916:	f040 8097 	bne.w	8002a48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291a:	f7ff fb2d 	bl	8001f78 <HAL_GetTick>
 800291e:	1b40      	subs	r0, r0, r5
 8002920:	2802      	cmp	r0, #2
 8002922:	d9f4      	bls.n	800290e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002924:	2003      	movs	r0, #3
 8002926:	e2b9      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002928:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002932:	6863      	ldr	r3, [r4, #4]
 8002934:	b32b      	cbz	r3, 8002982 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002936:	f7ff fb1f 	bl	8001f78 <HAL_GetTick>
 800293a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293c:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002944:	d1c9      	bne.n	80028da <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002946:	f7ff fb17 	bl	8001f78 <HAL_GetTick>
 800294a:	1b40      	subs	r0, r0, r5
 800294c:	2864      	cmp	r0, #100	; 0x64
 800294e:	d9f5      	bls.n	800293c <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002950:	2003      	movs	r0, #3
 8002952:	e2a3      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002958:	d009      	beq.n	800296e <HAL_RCC_OscConfig+0xf2>
 800295a:	4b7b      	ldr	r3, [pc, #492]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e7e1      	b.n	8002932 <HAL_RCC_OscConfig+0xb6>
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e7d7      	b.n	8002932 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8002982:	f7ff faf9 	bl	8001f78 <HAL_GetTick>
 8002986:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002988:	4b6f      	ldr	r3, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002990:	d0a3      	beq.n	80028da <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002992:	f7ff faf1 	bl	8001f78 <HAL_GetTick>
 8002996:	1b40      	subs	r0, r0, r5
 8002998:	2864      	cmp	r0, #100	; 0x64
 800299a:	d9f5      	bls.n	8002988 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800299c:	2003      	movs	r0, #3
 800299e:	e27d      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029a0:	f012 0f03 	tst.w	r2, #3
 80029a4:	d1a6      	bne.n	80028f4 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a6:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f013 0f04 	tst.w	r3, #4
 80029ae:	d003      	beq.n	80029b8 <HAL_RCC_OscConfig+0x13c>
 80029b0:	68e3      	ldr	r3, [r4, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 826d 	beq.w	8002e92 <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	f7ff faf8 	bl	8001fac <HAL_GetREVID>
 80029bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80029c0:	4298      	cmp	r0, r3
 80029c2:	d812      	bhi.n	80029ea <HAL_RCC_OscConfig+0x16e>
 80029c4:	6922      	ldr	r2, [r4, #16]
 80029c6:	2a40      	cmp	r2, #64	; 0x40
 80029c8:	d007      	beq.n	80029da <HAL_RCC_OscConfig+0x15e>
 80029ca:	495f      	ldr	r1, [pc, #380]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80029cc:	684b      	ldr	r3, [r1, #4]
 80029ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	e00f      	b.n	80029fa <HAL_RCC_OscConfig+0x17e>
 80029da:	4a5b      	ldr	r2, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80029dc:	6853      	ldr	r3, [r2, #4]
 80029de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e6:	6053      	str	r3, [r2, #4]
 80029e8:	e007      	b.n	80029fa <HAL_RCC_OscConfig+0x17e>
 80029ea:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 80029ec:	6853      	ldr	r3, [r2, #4]
 80029ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80029f2:	6921      	ldr	r1, [r4, #16]
 80029f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80029f8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	f013 0f10 	tst.w	r3, #16
 8002a00:	f000 8086 	beq.w	8002b10 <HAL_RCC_OscConfig+0x294>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a04:	4a50      	ldr	r2, [pc, #320]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a06:	6913      	ldr	r3, [r2, #16]
 8002a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d054      	beq.n	8002abc <HAL_RCC_OscConfig+0x240>
 8002a12:	2b18      	cmp	r3, #24
 8002a14:	d04e      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a16:	69e3      	ldr	r3, [r4, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b9 	beq.w	8002b90 <HAL_RCC_OscConfig+0x314>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a1e:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a20:	6813      	ldr	r3, [r2, #0]
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff faa6 	bl	8001f78 <HAL_GetTick>
 8002a2c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a2e:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a36:	f040 8089 	bne.w	8002b4c <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a3a:	f7ff fa9d 	bl	8001f78 <HAL_GetTick>
 8002a3e:	1b40      	subs	r0, r0, r5
 8002a40:	2802      	cmp	r0, #2
 8002a42:	d9f4      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8002a44:	2003      	movs	r0, #3
 8002a46:	e229      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	f7ff fab0 	bl	8001fac <HAL_GetREVID>
 8002a4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a50:	4298      	cmp	r0, r3
 8002a52:	d812      	bhi.n	8002a7a <HAL_RCC_OscConfig+0x1fe>
 8002a54:	6922      	ldr	r2, [r4, #16]
 8002a56:	2a40      	cmp	r2, #64	; 0x40
 8002a58:	d007      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1ee>
 8002a5a:	493b      	ldr	r1, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a5c:	684b      	ldr	r3, [r1, #4]
 8002a5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a62:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002a66:	604b      	str	r3, [r1, #4]
 8002a68:	e7c7      	b.n	80029fa <HAL_RCC_OscConfig+0x17e>
 8002a6a:	4a37      	ldr	r2, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a6c:	6853      	ldr	r3, [r2, #4]
 8002a6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a76:	6053      	str	r3, [r2, #4]
 8002a78:	e7bf      	b.n	80029fa <HAL_RCC_OscConfig+0x17e>
 8002a7a:	4a33      	ldr	r2, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a7c:	6853      	ldr	r3, [r2, #4]
 8002a7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a82:	6921      	ldr	r1, [r4, #16]
 8002a84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002a88:	6053      	str	r3, [r2, #4]
 8002a8a:	e7b6      	b.n	80029fa <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a96:	f7ff fa6f 	bl	8001f78 <HAL_GetTick>
 8002a9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f013 0f04 	tst.w	r3, #4
 8002aa4:	d0a9      	beq.n	80029fa <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7ff fa67 	bl	8001f78 <HAL_GetTick>
 8002aaa:	1b40      	subs	r0, r0, r5
 8002aac:	2802      	cmp	r0, #2
 8002aae:	d9f5      	bls.n	8002a9c <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	e1f3      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	2a01      	cmp	r2, #1
 8002aba:	d1ac      	bne.n	8002a16 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_OscConfig+0x252>
 8002ac6:	69e3      	ldr	r3, [r4, #28]
 8002ac8:	2b80      	cmp	r3, #128	; 0x80
 8002aca:	f040 81e4 	bne.w	8002e96 <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ace:	f7ff fa6d 	bl	8001fac <HAL_GetREVID>
 8002ad2:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ad6:	4298      	cmp	r0, r3
 8002ad8:	d812      	bhi.n	8002b00 <HAL_RCC_OscConfig+0x284>
 8002ada:	6a22      	ldr	r2, [r4, #32]
 8002adc:	2a20      	cmp	r2, #32
 8002ade:	d007      	beq.n	8002af0 <HAL_RCC_OscConfig+0x274>
 8002ae0:	4919      	ldr	r1, [pc, #100]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002ae2:	684b      	ldr	r3, [r1, #4]
 8002ae4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ae8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002aec:	604b      	str	r3, [r1, #4]
 8002aee:	e00f      	b.n	8002b10 <HAL_RCC_OscConfig+0x294>
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002af2:	6853      	ldr	r3, [r2, #4]
 8002af4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002afc:	6053      	str	r3, [r2, #4]
 8002afe:	e007      	b.n	8002b10 <HAL_RCC_OscConfig+0x294>
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002b02:	68d3      	ldr	r3, [r2, #12]
 8002b04:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002b08:	6a21      	ldr	r1, [r4, #32]
 8002b0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b0e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	f013 0f08 	tst.w	r3, #8
 8002b16:	d063      	beq.n	8002be0 <HAL_RCC_OscConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b18:	6963      	ldr	r3, [r4, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d04c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x33c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002b20:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7ff fa26 	bl	8001f78 <HAL_GetTick>
 8002b2c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x2cc>)
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	f013 0f02 	tst.w	r3, #2
 8002b36:	d153      	bne.n	8002be0 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b38:	f7ff fa1e 	bl	8001f78 <HAL_GetTick>
 8002b3c:	1b40      	subs	r0, r0, r5
 8002b3e:	2802      	cmp	r0, #2
 8002b40:	d9f5      	bls.n	8002b2e <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 8002b42:	2003      	movs	r0, #3
 8002b44:	e1aa      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002b46:	bf00      	nop
 8002b48:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b4c:	f7ff fa2e 	bl	8001fac <HAL_GetREVID>
 8002b50:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b54:	4298      	cmp	r0, r3
 8002b56:	d812      	bhi.n	8002b7e <HAL_RCC_OscConfig+0x302>
 8002b58:	6a22      	ldr	r2, [r4, #32]
 8002b5a:	2a20      	cmp	r2, #32
 8002b5c:	d007      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2f2>
 8002b5e:	4985      	ldr	r1, [pc, #532]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	684b      	ldr	r3, [r1, #4]
 8002b62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b66:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002b6a:	604b      	str	r3, [r1, #4]
 8002b6c:	e7d0      	b.n	8002b10 <HAL_RCC_OscConfig+0x294>
 8002b6e:	4a81      	ldr	r2, [pc, #516]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002b70:	6853      	ldr	r3, [r2, #4]
 8002b72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b7a:	6053      	str	r3, [r2, #4]
 8002b7c:	e7c8      	b.n	8002b10 <HAL_RCC_OscConfig+0x294>
 8002b7e:	4a7d      	ldr	r2, [pc, #500]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002b80:	68d3      	ldr	r3, [r2, #12]
 8002b82:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002b86:	6a21      	ldr	r1, [r4, #32]
 8002b88:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b8c:	60d3      	str	r3, [r2, #12]
 8002b8e:	e7bf      	b.n	8002b10 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_CSI_DISABLE();
 8002b90:	4a78      	ldr	r2, [pc, #480]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	6813      	ldr	r3, [r2, #0]
 8002b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b9a:	f7ff f9ed 	bl	8001f78 <HAL_GetTick>
 8002b9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ba0:	4b74      	ldr	r3, [pc, #464]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ba8:	d0b2      	beq.n	8002b10 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002baa:	f7ff f9e5 	bl	8001f78 <HAL_GetTick>
 8002bae:	1b40      	subs	r0, r0, r5
 8002bb0:	2802      	cmp	r0, #2
 8002bb2:	d9f5      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x324>
            return HAL_TIMEOUT;
 8002bb4:	2003      	movs	r0, #3
 8002bb6:	e171      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7ff f9d9 	bl	8001f78 <HAL_GetTick>
 8002bc6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f013 0f02 	tst.w	r3, #2
 8002bd0:	d006      	beq.n	8002be0 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f9d1 	bl	8001f78 <HAL_GetTick>
 8002bd6:	1b40      	subs	r0, r0, r5
 8002bd8:	2802      	cmp	r0, #2
 8002bda:	d9f5      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 8002bdc:	2003      	movs	r0, #3
 8002bde:	e15d      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	f013 0f20 	tst.w	r3, #32
 8002be6:	d029      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002be8:	69a3      	ldr	r3, [r4, #24]
 8002bea:	b19b      	cbz	r3, 8002c14 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bec:	4a61      	ldr	r2, [pc, #388]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f9bf 	bl	8001f78 <HAL_GetTick>
 8002bfa:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002c04:	d11a      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c06:	f7ff f9b7 	bl	8001f78 <HAL_GetTick>
 8002c0a:	1b40      	subs	r0, r0, r5
 8002c0c:	2802      	cmp	r0, #2
 8002c0e:	d9f5      	bls.n	8002bfc <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8002c10:	2003      	movs	r0, #3
 8002c12:	e143      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c14:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f9ab 	bl	8001f78 <HAL_GetTick>
 8002c22:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002c2c:	d006      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c2e:	f7ff f9a3 	bl	8001f78 <HAL_GetTick>
 8002c32:	1b40      	subs	r0, r0, r5
 8002c34:	2802      	cmp	r0, #2
 8002c36:	d9f5      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 8002c38:	2003      	movs	r0, #3
 8002c3a:	e12f      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f013 0f04 	tst.w	r3, #4
 8002c42:	d121      	bne.n	8002c88 <HAL_RCC_OscConfig+0x40c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8127 	beq.w	8002e9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c4c:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	6912      	ldr	r2, [r2, #16]
 8002c50:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002c54:	2a18      	cmp	r2, #24
 8002c56:	f000 80ef 	beq.w	8002e38 <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d075      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4a45      	ldr	r2, [pc, #276]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff f986 	bl	8001f78 <HAL_GetTick>
 8002c6c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c76:	f000 80dd 	beq.w	8002e34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7ff f97d 	bl	8001f78 <HAL_GetTick>
 8002c7e:	1b00      	subs	r0, r0, r4
 8002c80:	2802      	cmp	r0, #2
 8002c82:	d9f4      	bls.n	8002c6e <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8002c84:	2003      	movs	r0, #3
 8002c86:	e109      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
    PWR->CR1 |= PWR_CR1_DBP;
 8002c88:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <HAL_RCC_OscConfig+0x4fc>)
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c92:	f7ff f971 	bl	8001f78 <HAL_GetTick>
 8002c96:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_OscConfig+0x4fc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x434>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ca2:	f7ff f969 	bl	8001f78 <HAL_GetTick>
 8002ca6:	1b40      	subs	r0, r0, r5
 8002ca8:	2864      	cmp	r0, #100	; 0x64
 8002caa:	d9f5      	bls.n	8002c98 <HAL_RCC_OscConfig+0x41c>
        return HAL_TIMEOUT;
 8002cac:	2003      	movs	r0, #3
 8002cae:	e0f5      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	68a3      	ldr	r3, [r4, #8]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCC_OscConfig+0x450>
 8002cb6:	bb0b      	cbnz	r3, 8002cfc <HAL_RCC_OscConfig+0x480>
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	671a      	str	r2, [r3, #112]	; 0x70
 8002cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cc4:	f022 0204 	bic.w	r2, r2, #4
 8002cc8:	671a      	str	r2, [r3, #112]	; 0x70
 8002cca:	e004      	b.n	8002cd6 <HAL_RCC_OscConfig+0x45a>
 8002ccc:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd6:	68a3      	ldr	r3, [r4, #8]
 8002cd8:	b333      	cbz	r3, 8002d28 <HAL_RCC_OscConfig+0x4ac>
      tickstart = HAL_GetTick();
 8002cda:	f7ff f94d 	bl	8001f78 <HAL_GetTick>
 8002cde:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f013 0f02 	tst.w	r3, #2
 8002ce8:	d1ac      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7ff f945 	bl	8001f78 <HAL_GetTick>
 8002cee:	1b40      	subs	r0, r0, r5
 8002cf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cf4:	4298      	cmp	r0, r3
 8002cf6:	d9f3      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x464>
          return HAL_TIMEOUT;
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	e0cf      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCC_OscConfig+0x498>
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d04:	f022 0201 	bic.w	r2, r2, #1
 8002d08:	671a      	str	r2, [r3, #112]	; 0x70
 8002d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d0c:	f022 0204 	bic.w	r2, r2, #4
 8002d10:	671a      	str	r2, [r3, #112]	; 0x70
 8002d12:	e7e0      	b.n	8002cd6 <HAL_RCC_OscConfig+0x45a>
 8002d14:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d18:	f042 0204 	orr.w	r2, r2, #4
 8002d1c:	671a      	str	r2, [r3, #112]	; 0x70
 8002d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	671a      	str	r2, [r3, #112]	; 0x70
 8002d26:	e7d6      	b.n	8002cd6 <HAL_RCC_OscConfig+0x45a>
      tickstart = HAL_GetTick();
 8002d28:	f7ff f926 	bl	8001f78 <HAL_GetTick>
 8002d2c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f013 0f02 	tst.w	r3, #2
 8002d36:	d085      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7ff f91e 	bl	8001f78 <HAL_GetTick>
 8002d3c:	1b40      	subs	r0, r0, r5
 8002d3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d42:	4298      	cmp	r0, r3
 8002d44:	d9f3      	bls.n	8002d2e <HAL_RCC_OscConfig+0x4b2>
          return HAL_TIMEOUT;
 8002d46:	2003      	movs	r0, #3
 8002d48:	e0a8      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002d4c:	6813      	ldr	r3, [r2, #0]
 8002d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d54:	f7ff f910 	bl	8001f78 <HAL_GetTick>
 8002d58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d62:	d00b      	beq.n	8002d7c <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7ff f908 	bl	8001f78 <HAL_GetTick>
 8002d68:	1b40      	subs	r0, r0, r5
 8002d6a:	2802      	cmp	r0, #2
 8002d6c:	d9f5      	bls.n	8002d5a <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8002d6e:	2003      	movs	r0, #3
 8002d70:	e094      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002d72:	bf00      	nop
 8002d74:	58024400 	.word	0x58024400
 8002d78:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7c:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_RCC_OscConfig+0x640>)
 8002d7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002d80:	4a4f      	ldr	r2, [pc, #316]	; (8002ec0 <HAL_RCC_OscConfig+0x644>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002d88:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d92:	3a01      	subs	r2, #1
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d9a:	3901      	subs	r1, #1
 8002d9c:	0249      	lsls	r1, r1, #9
 8002d9e:	b289      	uxth	r1, r1
 8002da0:	430a      	orrs	r2, r1
 8002da2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002da4:	3901      	subs	r1, #1
 8002da6:	0409      	lsls	r1, r1, #16
 8002da8:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002dac:	430a      	orrs	r2, r1
 8002dae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002db0:	3901      	subs	r1, #1
 8002db2:	0609      	lsls	r1, r1, #24
 8002db4:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002db8:	430a      	orrs	r2, r1
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc6:	4a3f      	ldr	r2, [pc, #252]	; (8002ec4 <HAL_RCC_OscConfig+0x648>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002dcc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	f022 020c 	bic.w	r2, r2, #12
 8002dd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	f022 0202 	bic.w	r2, r2, #2
 8002de4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002de6:	430a      	orrs	r2, r1
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e12:	f7ff f8b1 	bl	8001f78 <HAL_GetTick>
 8002e16:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_RCC_OscConfig+0x640>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e22:	f7ff f8a9 	bl	8001f78 <HAL_GetTick>
 8002e26:	1b00      	subs	r0, r0, r4
 8002e28:	2802      	cmp	r0, #2
 8002e2a:	d9f5      	bls.n	8002e18 <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	e035      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002e30:	2000      	movs	r0, #0
 8002e32:	e033      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002e34:	2000      	movs	r0, #0
 8002e36:	e031      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <HAL_RCC_OscConfig+0x640>)
 8002e3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e3c:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d02d      	beq.n	8002e9e <HAL_RCC_OscConfig+0x622>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	f001 0303 	and.w	r3, r1, #3
 8002e46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d12a      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x626>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e4c:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8002e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	4299      	cmp	r1, r3
 8002e54:	d127      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e56:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d123      	bne.n	8002eaa <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e62:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8002e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e68:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d11f      	bne.n	8002eae <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e6e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11b      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x636>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e7a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002e7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e82:	4298      	cmp	r0, r3
 8002e84:	d117      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x63a>
  return HAL_OK;
 8002e86:	2000      	movs	r0, #0
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
    return HAL_ERROR;
 8002e8a:	2001      	movs	r0, #1
}
 8002e8c:	4770      	bx	lr
        return HAL_ERROR;
 8002e8e:	2001      	movs	r0, #1
 8002e90:	e004      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 8002e92:	2001      	movs	r0, #1
 8002e94:	e002      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 8002e96:	2001      	movs	r0, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
  return HAL_OK;
 8002e9a:	2000      	movs	r0, #0
}
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	e7fc      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	e7fa      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	e7f8      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002eaa:	2001      	movs	r0, #1
 8002eac:	e7f6      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7f4      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	e7f2      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	e7f0      	b.n	8002e9c <HAL_RCC_OscConfig+0x620>
 8002eba:	bf00      	nop
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	fffffc0c 	.word	0xfffffc0c
 8002ec4:	ffff0007 	.word	0xffff0007

08002ec8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec8:	4b74      	ldr	r3, [pc, #464]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	f000 80df 	beq.w	8003094 <HAL_RCC_GetSysClockFreq+0x1cc>
 8002ed6:	2b18      	cmp	r3, #24
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002eda:	b10b      	cbz	r3, 8002ee0 <HAL_RCC_GetSysClockFreq+0x18>
 8002edc:	4870      	ldr	r0, [pc, #448]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002ede:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee0:	4b6e      	ldr	r3, [pc, #440]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f013 0f20 	tst.w	r3, #32
 8002ee8:	f000 80d6 	beq.w	8003098 <HAL_RCC_GetSysClockFreq+0x1d0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002eec:	4b6b      	ldr	r3, [pc, #428]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002ef4:	4b6b      	ldr	r3, [pc, #428]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002ef6:	fa23 f000 	lsr.w	r0, r3, r0
 8002efa:	4770      	bx	lr
{
 8002efc:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002efe:	4a67      	ldr	r2, [pc, #412]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f02:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002f06:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8002f08:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f0e:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002f12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f14:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002f18:	fb03 f302 	mul.w	r3, r3, r2
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8002f24:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8002f28:	f000 8094 	beq.w	8003054 <HAL_RCC_GetSysClockFreq+0x18c>
    {
      switch (pllsource)
 8002f2c:	2901      	cmp	r1, #1
 8002f2e:	d066      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x136>
 8002f30:	2902      	cmp	r1, #2
 8002f32:	f000 8092 	beq.w	800305a <HAL_RCC_GetSysClockFreq+0x192>
 8002f36:	b1e1      	cbz	r1, 8002f72 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f38:	ee07 0a10 	vmov	s14, r0
 8002f3c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002f40:	ed9f 6a59 	vldr	s12, [pc, #356]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x1e0>
 8002f44:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002f48:	4b54      	ldr	r3, [pc, #336]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f50:	ee06 3a90 	vmov	s13, r3
 8002f54:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002f58:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80030ac <HAL_RCC_GetSysClockFreq+0x1e4>
 8002f5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8002f70:	e061      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f013 0f20 	tst.w	r3, #32
 8002f7a:	d023      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f7c:	4947      	ldr	r1, [pc, #284]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f7e:	680a      	ldr	r2, [r1, #0]
 8002f80:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002f84:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002f86:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f88:	ee07 3a10 	vmov	s14, r3
 8002f8c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002f90:	ee07 0a10 	vmov	s14, r0
 8002f94:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8002f98:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002f9c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee06 3a90 	vmov	s13, r3
 8002fa6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002faa:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80030ac <HAL_RCC_GetSysClockFreq+0x1e4>
 8002fae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fc2:	e038      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fc4:	ee07 0a10 	vmov	s14, r0
 8002fc8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002fcc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80030b0 <HAL_RCC_GetSysClockFreq+0x1e8>
 8002fd0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fdc:	ee06 3a90 	vmov	s13, r3
 8002fe0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002fe4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80030ac <HAL_RCC_GetSysClockFreq+0x1e4>
 8002fe8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ffc:	e01b      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ffe:	ee07 0a10 	vmov	s14, r0
 8003002:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003006:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x1e0>
 800300a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	ee06 3a90 	vmov	s13, r3
 800301a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800301e:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80030ac <HAL_RCC_GetSysClockFreq+0x1e4>
 8003022:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800302e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003032:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800303e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800304c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003050:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003058:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800305a:	ee07 0a10 	vmov	s14, r0
 800305e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003062:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003066:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	ee06 3a90 	vmov	s13, r3
 8003076:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800307a:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80030ac <HAL_RCC_GetSysClockFreq+0x1e4>
 800307e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003092:	e7d0      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x16e>
    sysclockfreq = HSE_VALUE;
 8003094:	4808      	ldr	r0, [pc, #32]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003096:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800309a:	4770      	bx	lr
 800309c:	58024400 	.word	0x58024400
 80030a0:	003d0900 	.word	0x003d0900
 80030a4:	03d09000 	.word	0x03d09000
 80030a8:	4a742400 	.word	0x4a742400
 80030ac:	39000000 	.word	0x39000000
 80030b0:	4c742400 	.word	0x4c742400
 80030b4:	4bbebc20 	.word	0x4bbebc20
 80030b8:	017d7840 	.word	0x017d7840

080030bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80030bc:	2800      	cmp	r0, #0
 80030be:	f000 8132 	beq.w	8003326 <HAL_RCC_ClockConfig+0x26a>
{
 80030c2:	b570      	push	{r4, r5, r6, lr}
 80030c4:	460d      	mov	r5, r1
 80030c6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b9b      	ldr	r3, [pc, #620]	; (8003338 <HAL_RCC_ClockConfig+0x27c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	428b      	cmp	r3, r1
 80030d2:	d20b      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d4:	4a98      	ldr	r2, [pc, #608]	; (8003338 <HAL_RCC_ClockConfig+0x27c>)
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	f023 030f 	bic.w	r3, r3, #15
 80030dc:	430b      	orrs	r3, r1
 80030de:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	428b      	cmp	r3, r1
 80030e8:	f040 811f 	bne.w	800332a <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	f013 0f04 	tst.w	r3, #4
 80030f2:	d00c      	beq.n	800310e <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030f4:	6922      	ldr	r2, [r4, #16]
 80030f6:	4b91      	ldr	r3, [pc, #580]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030fe:	429a      	cmp	r2, r3
 8003100:	d905      	bls.n	800310e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003102:	498e      	ldr	r1, [pc, #568]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003104:	698b      	ldr	r3, [r1, #24]
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	431a      	orrs	r2, r3
 800310c:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	f013 0f08 	tst.w	r3, #8
 8003114:	d00c      	beq.n	8003130 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003116:	6962      	ldr	r2, [r4, #20]
 8003118:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003120:	429a      	cmp	r2, r3
 8003122:	d905      	bls.n	8003130 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003124:	4985      	ldr	r1, [pc, #532]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003126:	69cb      	ldr	r3, [r1, #28]
 8003128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312c:	431a      	orrs	r2, r3
 800312e:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	f013 0f10 	tst.w	r3, #16
 8003136:	d00c      	beq.n	8003152 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003138:	69a2      	ldr	r2, [r4, #24]
 800313a:	4b80      	ldr	r3, [pc, #512]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003142:	429a      	cmp	r2, r3
 8003144:	d905      	bls.n	8003152 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003146:	497d      	ldr	r1, [pc, #500]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003148:	69cb      	ldr	r3, [r1, #28]
 800314a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800314e:	431a      	orrs	r2, r3
 8003150:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	f013 0f20 	tst.w	r3, #32
 8003158:	d00c      	beq.n	8003174 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800315a:	69e2      	ldr	r2, [r4, #28]
 800315c:	4b77      	ldr	r3, [pc, #476]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003164:	429a      	cmp	r2, r3
 8003166:	d905      	bls.n	8003174 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003168:	4974      	ldr	r1, [pc, #464]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800316a:	6a0b      	ldr	r3, [r1, #32]
 800316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003170:	431a      	orrs	r2, r3
 8003172:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	f013 0f02 	tst.w	r3, #2
 800317a:	d00c      	beq.n	8003196 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800317c:	68e2      	ldr	r2, [r4, #12]
 800317e:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	429a      	cmp	r2, r3
 8003188:	d905      	bls.n	8003196 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318a:	496c      	ldr	r1, [pc, #432]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800318c:	698b      	ldr	r3, [r1, #24]
 800318e:	f023 030f 	bic.w	r3, r3, #15
 8003192:	431a      	orrs	r2, r3
 8003194:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f013 0f01 	tst.w	r3, #1
 800319c:	d041      	beq.n	8003222 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800319e:	4a67      	ldr	r2, [pc, #412]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80031a0:	6993      	ldr	r3, [r2, #24]
 80031a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031a6:	68a1      	ldr	r1, [r4, #8]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ac:	6863      	ldr	r3, [r4, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d027      	beq.n	8003206 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d02c      	beq.n	8003214 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ba:	4a60      	ldr	r2, [pc, #384]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	f012 0f04 	tst.w	r2, #4
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80031c4:	2001      	movs	r0, #1
 80031c6:	e0ad      	b.n	8003324 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80031ce:	f000 80ae 	beq.w	800332e <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	495a      	ldr	r1, [pc, #360]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80031d4:	690a      	ldr	r2, [r1, #16]
 80031d6:	f022 0207 	bic.w	r2, r2, #7
 80031da:	4313      	orrs	r3, r2
 80031dc:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80031de:	f7fe fecb 	bl	8001f78 <HAL_GetTick>
 80031e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e4:	4b55      	ldr	r3, [pc, #340]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ec:	6862      	ldr	r2, [r4, #4]
 80031ee:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80031f2:	d016      	beq.n	8003222 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fe fec0 	bl	8001f78 <HAL_GetTick>
 80031f8:	1b80      	subs	r0, r0, r6
 80031fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80031fe:	4298      	cmp	r0, r3
 8003200:	d9f0      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 8003202:	2003      	movs	r0, #3
 8003204:	e08e      	b.n	8003324 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003206:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800320e:	d1e0      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8003210:	2001      	movs	r0, #1
 8003212:	e087      	b.n	8003324 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	f412 7f80 	tst.w	r2, #256	; 0x100
 800321c:	d1d9      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
 8003220:	e080      	b.n	8003324 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f013 0f02 	tst.w	r3, #2
 8003228:	d00c      	beq.n	8003244 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800322a:	68e2      	ldr	r2, [r4, #12]
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	429a      	cmp	r2, r3
 8003236:	d205      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4940      	ldr	r1, [pc, #256]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800323a:	698b      	ldr	r3, [r1, #24]
 800323c:	f023 030f 	bic.w	r3, r3, #15
 8003240:	431a      	orrs	r2, r3
 8003242:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_RCC_ClockConfig+0x27c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	42ab      	cmp	r3, r5
 800324e:	d90a      	bls.n	8003266 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003250:	4a39      	ldr	r2, [pc, #228]	; (8003338 <HAL_RCC_ClockConfig+0x27c>)
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	f023 030f 	bic.w	r3, r3, #15
 8003258:	432b      	orrs	r3, r5
 800325a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325c:	6813      	ldr	r3, [r2, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	42ab      	cmp	r3, r5
 8003264:	d165      	bne.n	8003332 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f013 0f04 	tst.w	r3, #4
 800326c:	d00c      	beq.n	8003288 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800326e:	6922      	ldr	r2, [r4, #16]
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003278:	429a      	cmp	r2, r3
 800327a:	d205      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800327c:	492f      	ldr	r1, [pc, #188]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 800327e:	698b      	ldr	r3, [r1, #24]
 8003280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003284:	431a      	orrs	r2, r3
 8003286:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	f013 0f08 	tst.w	r3, #8
 800328e:	d00c      	beq.n	80032aa <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003290:	6962      	ldr	r2, [r4, #20]
 8003292:	4b2a      	ldr	r3, [pc, #168]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329a:	429a      	cmp	r2, r3
 800329c:	d205      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800329e:	4927      	ldr	r1, [pc, #156]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80032a0:	69cb      	ldr	r3, [r1, #28]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	431a      	orrs	r2, r3
 80032a8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f013 0f10 	tst.w	r3, #16
 80032b0:	d00c      	beq.n	80032cc <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032b2:	69a2      	ldr	r2, [r4, #24]
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032bc:	429a      	cmp	r2, r3
 80032be:	d205      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032c0:	491e      	ldr	r1, [pc, #120]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80032c2:	69cb      	ldr	r3, [r1, #28]
 80032c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032c8:	431a      	orrs	r2, r3
 80032ca:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	f013 0f20 	tst.w	r3, #32
 80032d2:	d00c      	beq.n	80032ee <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032d4:	69e2      	ldr	r2, [r4, #28]
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032de:	429a      	cmp	r2, r3
 80032e0:	d205      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032e2:	4916      	ldr	r1, [pc, #88]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80032e4:	6a0b      	ldr	r3, [r1, #32]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	431a      	orrs	r2, r3
 80032ec:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032ee:	f7ff fdeb 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 80032f2:	4912      	ldr	r1, [pc, #72]	; (800333c <HAL_RCC_ClockConfig+0x280>)
 80032f4:	698b      	ldr	r3, [r1, #24]
 80032f6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80032fa:	4a11      	ldr	r2, [pc, #68]	; (8003340 <HAL_RCC_ClockConfig+0x284>)
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003304:	698b      	ldr	r3, [r1, #24]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	fa20 f303 	lsr.w	r3, r0, r3
 8003314:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x288>)
 8003316:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x28c>)
 800331a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x290>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	f7fe fdc8 	bl	8001eb4 <HAL_InitTick>
}
 8003324:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003326:	2001      	movs	r0, #1
}
 8003328:	4770      	bx	lr
      return HAL_ERROR;
 800332a:	2001      	movs	r0, #1
 800332c:	e7fa      	b.n	8003324 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800332e:	2001      	movs	r0, #1
 8003330:	e7f8      	b.n	8003324 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8003332:	2001      	movs	r0, #1
 8003334:	e7f6      	b.n	8003324 <HAL_RCC_ClockConfig+0x268>
 8003336:	bf00      	nop
 8003338:	52002000 	.word	0x52002000
 800333c:	58024400 	.word	0x58024400
 8003340:	0800aa40 	.word	0x0800aa40
 8003344:	20000018 	.word	0x20000018
 8003348:	20000014 	.word	0x20000014
 800334c:	20000020 	.word	0x20000020

08003350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003350:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003352:	f7ff fdb9 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_RCC_GetHCLKFreq+0x34>)
 8003358:	6993      	ldr	r3, [r2, #24]
 800335a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800335e:	490a      	ldr	r1, [pc, #40]	; (8003388 <HAL_RCC_GetHCLKFreq+0x38>)
 8003360:	5ccb      	ldrb	r3, [r1, r3]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800336a:	6992      	ldr	r2, [r2, #24]
 800336c:	f002 020f 	and.w	r2, r2, #15
 8003370:	5c88      	ldrb	r0, [r1, r2]
 8003372:	f000 001f 	and.w	r0, r0, #31
 8003376:	fa23 f000 	lsr.w	r0, r3, r0
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_RCC_GetHCLKFreq+0x3c>)
 800337c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800337e:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_RCC_GetHCLKFreq+0x40>)
 8003380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003382:	bd08      	pop	{r3, pc}
 8003384:	58024400 	.word	0x58024400
 8003388:	0800aa40 	.word	0x0800aa40
 800338c:	20000018 	.word	0x20000018
 8003390:	20000014 	.word	0x20000014

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003396:	f7ff ffdb 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80033a2:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033aa:	40d8      	lsrs	r0, r3
 80033ac:	bd08      	pop	{r3, pc}
 80033ae:	bf00      	nop
 80033b0:	58024400 	.word	0x58024400
 80033b4:	0800aa40 	.word	0x0800aa40

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033ba:	f7ff ffc9 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033ce:	40d8      	lsrs	r0, r3
 80033d0:	bd08      	pop	{r3, pc}
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
 80033d8:	0800aa40 	.word	0x0800aa40

080033dc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033dc:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d079      	beq.n	80034dc <RCCEx_PLL2_Config+0x100>
{
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4605      	mov	r5, r0
 80033ec:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80033ee:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fe fdbe 	bl	8001f78 <HAL_GetTick>
 80033fc:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003406:	d006      	beq.n	8003416 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003408:	f7fe fdb6 	bl	8001f78 <HAL_GetTick>
 800340c:	1b03      	subs	r3, r0, r4
 800340e:	2b02      	cmp	r3, #2
 8003410:	d9f5      	bls.n	80033fe <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003412:	2003      	movs	r0, #3

  }


  return status;
}
 8003414:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003416:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 8003418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800341e:	6829      	ldr	r1, [r5, #0]
 8003420:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
 8003426:	686a      	ldr	r2, [r5, #4]
 8003428:	3a01      	subs	r2, #1
 800342a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800342e:	68a9      	ldr	r1, [r5, #8]
 8003430:	3901      	subs	r1, #1
 8003432:	0249      	lsls	r1, r1, #9
 8003434:	b289      	uxth	r1, r1
 8003436:	430a      	orrs	r2, r1
 8003438:	68e9      	ldr	r1, [r5, #12]
 800343a:	3901      	subs	r1, #1
 800343c:	0409      	lsls	r1, r1, #16
 800343e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003442:	430a      	orrs	r2, r1
 8003444:	6929      	ldr	r1, [r5, #16]
 8003446:	3901      	subs	r1, #1
 8003448:	0609      	lsls	r1, r1, #24
 800344a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800344e:	430a      	orrs	r2, r1
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003454:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003458:	6969      	ldr	r1, [r5, #20]
 800345a:	430a      	orrs	r2, r1
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	f022 0220 	bic.w	r2, r2, #32
 8003464:	69a9      	ldr	r1, [r5, #24]
 8003466:	430a      	orrs	r2, r1
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	f022 0210 	bic.w	r2, r2, #16
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003472:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003474:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <RCCEx_PLL2_Config+0x108>)
 8003476:	400a      	ands	r2, r1
 8003478:	69e9      	ldr	r1, [r5, #28]
 800347a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	f042 0210 	orr.w	r2, r2, #16
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003488:	b9c6      	cbnz	r6, 80034bc <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800348a:	461a      	mov	r2, r3
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003492:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8003494:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800349c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800349e:	f7fe fd6b 	bl	8001f78 <HAL_GetTick>
 80034a2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80034a4:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80034ac:	d114      	bne.n	80034d8 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80034ae:	f7fe fd63 	bl	8001f78 <HAL_GetTick>
 80034b2:	1b00      	subs	r0, r0, r4
 80034b4:	2802      	cmp	r0, #2
 80034b6:	d9f5      	bls.n	80034a4 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80034b8:	2003      	movs	r0, #3
 80034ba:	e7ab      	b.n	8003414 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80034bc:	2e01      	cmp	r6, #1
 80034be:	d005      	beq.n	80034cc <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80034c0:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 80034c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80034c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034ca:	e7e3      	b.n	8003494 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <RCCEx_PLL2_Config+0x104>)
 80034ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80034d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034d6:	e7dd      	b.n	8003494 <RCCEx_PLL2_Config+0xb8>
  return status;
 80034d8:	2000      	movs	r0, #0
 80034da:	e79b      	b.n	8003414 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80034dc:	2001      	movs	r0, #1
}
 80034de:	4770      	bx	lr
 80034e0:	58024400 	.word	0x58024400
 80034e4:	ffff0007 	.word	0xffff0007

080034e8 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034e8:	4b40      	ldr	r3, [pc, #256]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d079      	beq.n	80035e8 <RCCEx_PLL3_Config+0x100>
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	4605      	mov	r5, r0
 80034f8:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 80034fc:	6813      	ldr	r3, [r2, #0]
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe fd38 	bl	8001f78 <HAL_GetTick>
 8003508:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800350a:	4b38      	ldr	r3, [pc, #224]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003512:	d006      	beq.n	8003522 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003514:	f7fe fd30 	bl	8001f78 <HAL_GetTick>
 8003518:	1b03      	subs	r3, r0, r4
 800351a:	2b02      	cmp	r3, #2
 800351c:	d9f5      	bls.n	800350a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800351e:	2003      	movs	r0, #3

  }


  return status;
}
 8003520:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003522:	4b32      	ldr	r3, [pc, #200]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 8003524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003526:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800352a:	6829      	ldr	r1, [r5, #0]
 800352c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
 8003532:	686a      	ldr	r2, [r5, #4]
 8003534:	3a01      	subs	r2, #1
 8003536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353a:	68a9      	ldr	r1, [r5, #8]
 800353c:	3901      	subs	r1, #1
 800353e:	0249      	lsls	r1, r1, #9
 8003540:	b289      	uxth	r1, r1
 8003542:	430a      	orrs	r2, r1
 8003544:	68e9      	ldr	r1, [r5, #12]
 8003546:	3901      	subs	r1, #1
 8003548:	0409      	lsls	r1, r1, #16
 800354a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800354e:	430a      	orrs	r2, r1
 8003550:	6929      	ldr	r1, [r5, #16]
 8003552:	3901      	subs	r1, #1
 8003554:	0609      	lsls	r1, r1, #24
 8003556:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800355a:	430a      	orrs	r2, r1
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003564:	6969      	ldr	r1, [r5, #20]
 8003566:	430a      	orrs	r2, r1
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003570:	69a9      	ldr	r1, [r5, #24]
 8003572:	430a      	orrs	r2, r1
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800357e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <RCCEx_PLL3_Config+0x108>)
 8003582:	400a      	ands	r2, r1
 8003584:	69e9      	ldr	r1, [r5, #28]
 8003586:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 800358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003594:	b9c6      	cbnz	r6, 80035c8 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003596:	461a      	mov	r2, r3
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800359e:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80035a0:	4a12      	ldr	r2, [pc, #72]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80035aa:	f7fe fce5 	bl	8001f78 <HAL_GetTick>
 80035ae:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80035b8:	d114      	bne.n	80035e4 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80035ba:	f7fe fcdd 	bl	8001f78 <HAL_GetTick>
 80035be:	1b00      	subs	r0, r0, r4
 80035c0:	2802      	cmp	r0, #2
 80035c2:	d9f5      	bls.n	80035b0 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80035c4:	2003      	movs	r0, #3
 80035c6:	e7ab      	b.n	8003520 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80035c8:	2e01      	cmp	r6, #1
 80035ca:	d005      	beq.n	80035d8 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80035cc:	4a07      	ldr	r2, [pc, #28]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 80035ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80035d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035d6:	e7e3      	b.n	80035a0 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <RCCEx_PLL3_Config+0x104>)
 80035da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80035dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035e2:	e7dd      	b.n	80035a0 <RCCEx_PLL3_Config+0xb8>
  return status;
 80035e4:	2000      	movs	r0, #0
 80035e6:	e79b      	b.n	8003520 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 80035e8:	2001      	movs	r0, #1
}
 80035ea:	4770      	bx	lr
 80035ec:	58024400 	.word	0x58024400
 80035f0:	ffff0007 	.word	0xffff0007

080035f4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f8:	6803      	ldr	r3, [r0, #0]
 80035fa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80035fe:	d030      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003600:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003606:	d026      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003608:	d80e      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800360a:	b1eb      	cbz	r3, 8003648 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800360c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003610:	d107      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003612:	2102      	movs	r1, #2
 8003614:	3004      	adds	r0, #4
 8003616:	f7ff fee1 	bl	80033dc <RCCEx_PLL2_Config>
 800361a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800361c:	b145      	cbz	r5, 8003630 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800361e:	462e      	mov	r6, r5
 8003620:	e021      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003622:	2601      	movs	r6, #1
 8003624:	4635      	mov	r5, r6
 8003626:	e01e      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800362c:	d109      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800362e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003630:	4a96      	ldr	r2, [pc, #600]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003632:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003634:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003638:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800363a:	430b      	orrs	r3, r1
 800363c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800363e:	2600      	movs	r6, #0
 8003640:	e011      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003642:	2601      	movs	r6, #1
 8003644:	4635      	mov	r5, r6
 8003646:	e00e      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003648:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800364a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003650:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003652:	2500      	movs	r5, #0
 8003654:	e7ec      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003656:	2102      	movs	r1, #2
 8003658:	3024      	adds	r0, #36	; 0x24
 800365a:	f7ff ff45 	bl	80034e8 <RCCEx_PLL3_Config>
 800365e:	4605      	mov	r5, r0
      break;
 8003660:	e7dc      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003662:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003664:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	f413 7f80 	tst.w	r3, #256	; 0x100
 800366c:	d014      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800366e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003670:	2b04      	cmp	r3, #4
 8003672:	d830      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003674:	e8df f003 	tbb	[pc, r3]
 8003678:	08282203 	.word	0x08282203
 800367c:	08          	.byte	0x08
 800367d:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367e:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003680:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003688:	bb45      	cbnz	r5, 80036dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368a:	4a80      	ldr	r2, [pc, #512]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800368c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800368e:	f023 0307 	bic.w	r3, r3, #7
 8003692:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003694:	430b      	orrs	r3, r1
 8003696:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800369e:	d02f      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80036a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d04a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x148>
 80036a6:	d81e      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d041      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d117      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b0:	2100      	movs	r1, #0
 80036b2:	1d20      	adds	r0, r4, #4
 80036b4:	f7ff fe92 	bl	80033dc <RCCEx_PLL2_Config>
 80036b8:	4605      	mov	r5, r0
      break;
 80036ba:	e019      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036bc:	2100      	movs	r1, #0
 80036be:	1d20      	adds	r0, r4, #4
 80036c0:	f7ff fe8c 	bl	80033dc <RCCEx_PLL2_Config>
 80036c4:	4605      	mov	r5, r0
      break;
 80036c6:	e7df      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036c8:	2100      	movs	r1, #0
 80036ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036ce:	f7ff ff0b 	bl	80034e8 <RCCEx_PLL3_Config>
 80036d2:	4605      	mov	r5, r0
      break;
 80036d4:	e7d8      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80036d6:	2601      	movs	r6, #1
 80036d8:	4635      	mov	r5, r6
 80036da:	e7dd      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036dc:	462e      	mov	r6, r5
 80036de:	e7db      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 80036e0:	2601      	movs	r6, #1
 80036e2:	4635      	mov	r5, r6
 80036e4:	e00c      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036e6:	2bc0      	cmp	r3, #192	; 0xc0
 80036e8:	d002      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80036ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ee:	d11c      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x136>
    if(ret == HAL_OK)
 80036f0:	bb5d      	cbnz	r5, 800374a <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036f2:	4a66      	ldr	r2, [pc, #408]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80036f4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80036f6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80036fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003706:	d034      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003708:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800370c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003710:	d04d      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8003712:	d81f      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d044      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800371c:	d117      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800371e:	2100      	movs	r1, #0
 8003720:	1d20      	adds	r0, r4, #4
 8003722:	f7ff fe5b 	bl	80033dc <RCCEx_PLL2_Config>
 8003726:	4605      	mov	r5, r0
      break;
 8003728:	e01a      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Sai23ClockSelection)
 800372a:	2601      	movs	r6, #1
 800372c:	4635      	mov	r5, r6
 800372e:	e7e7      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003730:	4a56      	ldr	r2, [pc, #344]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003732:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800373a:	e7d9      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800373c:	2100      	movs	r1, #0
 800373e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003742:	f7ff fed1 	bl	80034e8 <RCCEx_PLL3_Config>
 8003746:	4605      	mov	r5, r0
      break;
 8003748:	e7d2      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800374a:	462e      	mov	r6, r5
 800374c:	e7d8      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 800374e:	2601      	movs	r6, #1
 8003750:	4635      	mov	r5, r6
 8003752:	e00e      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003754:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003758:	d002      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800375a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800375e:	d11d      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    if(ret == HAL_OK)
 8003760:	bb65      	cbnz	r5, 80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003762:	4a4a      	ldr	r2, [pc, #296]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003764:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003766:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800376a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800376e:	430b      	orrs	r3, r1
 8003770:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003778:	d035      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->Sai4BClockSelection)
 800377a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800377e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003782:	d053      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003784:	d81f      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800378a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800378e:	d117      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003790:	2100      	movs	r1, #0
 8003792:	1d20      	adds	r0, r4, #4
 8003794:	f7ff fe22 	bl	80033dc <RCCEx_PLL2_Config>
 8003798:	4605      	mov	r5, r0
      break;
 800379a:	e01a      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    switch(PeriphClkInit->Sai4AClockSelection)
 800379c:	2601      	movs	r6, #1
 800379e:	4635      	mov	r5, r6
 80037a0:	e7e7      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a2:	4a3a      	ldr	r2, [pc, #232]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80037a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80037ac:	e7d8      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ae:	2100      	movs	r1, #0
 80037b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037b4:	f7ff fe98 	bl	80034e8 <RCCEx_PLL3_Config>
 80037b8:	4605      	mov	r5, r0
      break;
 80037ba:	e7d1      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037bc:	462e      	mov	r6, r5
 80037be:	e7d8      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4BClockSelection)
 80037c0:	2601      	movs	r6, #1
 80037c2:	4635      	mov	r5, r6
 80037c4:	e00f      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80037c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037ca:	d002      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d0:	d123      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x226>
    if(ret == HAL_OK)
 80037d2:	2d00      	cmp	r5, #0
 80037d4:	d131      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037d6:	4a2d      	ldr	r2, [pc, #180]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80037d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80037da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037de:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037ec:	d02e      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->QspiClockSelection)
 80037ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d03f      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80037f4:	d826      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x250>
 80037f6:	b133      	cbz	r3, 8003806 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d120      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80037fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003806:	2d00      	cmp	r5, #0
 8003808:	d13a      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800380a:	4a20      	ldr	r2, [pc, #128]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800380c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800380e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003812:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003814:	430b      	orrs	r3, r1
 8003816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003818:	e018      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Sai4BClockSelection)
 800381a:	2601      	movs	r6, #1
 800381c:	4635      	mov	r5, r6
 800381e:	e7e2      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003822:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800382a:	e7d2      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800382c:	2100      	movs	r1, #0
 800382e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003832:	f7ff fe59 	bl	80034e8 <RCCEx_PLL3_Config>
 8003836:	4605      	mov	r5, r0
      break;
 8003838:	e7cb      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 800383a:	462e      	mov	r6, r5
 800383c:	e7d3      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->QspiClockSelection)
 800383e:	2601      	movs	r6, #1
 8003840:	4635      	mov	r5, r6
 8003842:	e003      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003844:	2b30      	cmp	r3, #48	; 0x30
 8003846:	d0de      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003848:	2601      	movs	r6, #1
 800384a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003852:	d02c      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	d04d      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800385c:	d818      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d044      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003866:	d10d      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003868:	2100      	movs	r1, #0
 800386a:	1d20      	adds	r0, r4, #4
 800386c:	f7ff fdb6 	bl	80033dc <RCCEx_PLL2_Config>
 8003870:	4605      	mov	r5, r0
      break;
 8003872:	e013      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003874:	2102      	movs	r1, #2
 8003876:	1d20      	adds	r0, r4, #4
 8003878:	f7ff fdb0 	bl	80033dc <RCCEx_PLL2_Config>
 800387c:	4605      	mov	r5, r0
      break;
 800387e:	e7c2      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003880:	462e      	mov	r6, r5
 8003882:	e7e3      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003884:	2601      	movs	r6, #1
 8003886:	4635      	mov	r5, r6
 8003888:	e011      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400
 8003890:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003894:	d002      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800389a:	d124      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    if(ret == HAL_OK)
 800389c:	2d00      	cmp	r5, #0
 800389e:	d132      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038a0:	4a98      	ldr	r2, [pc, #608]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80038a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80038a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80038aa:	430b      	orrs	r3, r1
 80038ac:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80038b4:	d037      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi45ClockSelection)
 80038b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038bc:	d051      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80038be:	d827      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80038c0:	b13b      	cbz	r3, 80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c6:	d120      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038c8:	2101      	movs	r1, #1
 80038ca:	1d20      	adds	r0, r4, #4
 80038cc:	f7ff fd86 	bl	80033dc <RCCEx_PLL2_Config>
 80038d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	d14c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038d6:	4a8b      	ldr	r2, [pc, #556]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80038d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80038da:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80038de:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6513      	str	r3, [r2, #80]	; 0x50
 80038e4:	e01f      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi123ClockSelection)
 80038e6:	2601      	movs	r6, #1
 80038e8:	4635      	mov	r5, r6
 80038ea:	e7e0      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4a85      	ldr	r2, [pc, #532]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80038ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80038f6:	e7d1      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038f8:	2100      	movs	r1, #0
 80038fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038fe:	f7ff fdf3 	bl	80034e8 <RCCEx_PLL3_Config>
 8003902:	4605      	mov	r5, r0
      break;
 8003904:	e7ca      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003906:	462e      	mov	r6, r5
 8003908:	e7d1      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi45ClockSelection)
 800390a:	2601      	movs	r6, #1
 800390c:	4635      	mov	r5, r6
 800390e:	e00a      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003914:	d0dd      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391a:	d0da      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800391c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003920:	d0d7      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003922:	2601      	movs	r6, #1
 8003924:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800392c:	d030      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Spi6ClockSelection)
 800392e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003936:	d044      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003938:	d81f      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800393a:	b13b      	cbz	r3, 800394c <HAL_RCCEx_PeriphCLKConfig+0x358>
 800393c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003940:	d118      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x380>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003942:	2101      	movs	r1, #1
 8003944:	1d20      	adds	r0, r4, #4
 8003946:	f7ff fd49 	bl	80033dc <RCCEx_PLL2_Config>
 800394a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800394c:	2d00      	cmp	r5, #0
 800394e:	d13f      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003950:	4a6c      	ldr	r2, [pc, #432]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003952:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003954:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003958:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800395c:	430b      	orrs	r3, r1
 800395e:	6593      	str	r3, [r2, #88]	; 0x58
 8003960:	e016      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003962:	2101      	movs	r1, #1
 8003964:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003968:	f7ff fdbe 	bl	80034e8 <RCCEx_PLL3_Config>
 800396c:	4605      	mov	r5, r0
      break;
 800396e:	e7b0      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003970:	462e      	mov	r6, r5
 8003972:	e7d8      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003974:	2601      	movs	r6, #1
 8003976:	4635      	mov	r5, r6
 8003978:	e00a      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d0e5      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003984:	d0e2      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003986:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800398a:	d0df      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x358>
 800398c:	2601      	movs	r6, #1
 800398e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003996:	d009      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->FdcanClockSelection)
 8003998:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399e:	d019      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a4:	d024      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80039a6:	b1d3      	cbz	r3, 80039de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80039a8:	2601      	movs	r6, #1
 80039aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80039b2:	d03d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->FmcClockSelection)
 80039b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d836      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80039ba:	e8df f003 	tbb	[pc, r3]
 80039be:	2126      	.short	0x2126
 80039c0:	262f      	.short	0x262f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039c2:	2101      	movs	r1, #1
 80039c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039c8:	f7ff fd8e 	bl	80034e8 <RCCEx_PLL3_Config>
 80039cc:	4605      	mov	r5, r0
      break;
 80039ce:	e7bd      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x358>
 80039d0:	462e      	mov	r6, r5
 80039d2:	e7dd      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4a4b      	ldr	r2, [pc, #300]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80039d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80039de:	b96d      	cbnz	r5, 80039fc <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039e0:	4a48      	ldr	r2, [pc, #288]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80039e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80039e4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80039e8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6513      	str	r3, [r2, #80]	; 0x50
 80039ee:	e7dd      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f0:	2101      	movs	r1, #1
 80039f2:	1d20      	adds	r0, r4, #4
 80039f4:	f7ff fcf2 	bl	80033dc <RCCEx_PLL2_Config>
 80039f8:	4605      	mov	r5, r0
      break;
 80039fa:	e7f0      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80039fc:	462e      	mov	r6, r5
 80039fe:	e7d5      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a00:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003a02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a08:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003a0a:	b985      	cbnz	r5, 8003a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a0c:	4a3d      	ldr	r2, [pc, #244]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003a0e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003a10:	f023 0303 	bic.w	r3, r3, #3
 8003a14:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003a16:	430b      	orrs	r3, r1
 8003a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1a:	e009      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	1d20      	adds	r0, r4, #4
 8003a20:	f7ff fcdc 	bl	80033dc <RCCEx_PLL2_Config>
 8003a24:	4605      	mov	r5, r0
      break;
 8003a26:	e7f0      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->FmcClockSelection)
 8003a28:	2601      	movs	r6, #1
 8003a2a:	4635      	mov	r5, r6
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8003a2e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003a36:	d11f      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	f013 0f01 	tst.w	r3, #1
 8003a3e:	f000 809b 	beq.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a42:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003a44:	2b28      	cmp	r3, #40	; 0x28
 8003a46:	f200 8095 	bhi.w	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003a4a:	e8df f003 	tbb	[pc, r3]
 8003a4e:	9383      	.short	0x9383
 8003a50:	93939393 	.word	0x93939393
 8003a54:	937e9393 	.word	0x937e9393
 8003a58:	93939393 	.word	0x93939393
 8003a5c:	938c9393 	.word	0x938c9393
 8003a60:	93939393 	.word	0x93939393
 8003a64:	93839393 	.word	0x93839393
 8003a68:	93939393 	.word	0x93939393
 8003a6c:	93839393 	.word	0x93839393
 8003a70:	93939393 	.word	0x93939393
 8003a74:	9393      	.short	0x9393
 8003a76:	83          	.byte	0x83
 8003a77:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a78:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a82:	f7fe fa79 	bl	8001f78 <HAL_GetTick>
 8003a86:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a90:	d105      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe fa71 	bl	8001f78 <HAL_GetTick>
 8003a96:	1bc0      	subs	r0, r0, r7
 8003a98:	2864      	cmp	r0, #100	; 0x64
 8003a9a:	d9f5      	bls.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8003a9c:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	d14f      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003aa2:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003aaa:	4053      	eors	r3, r2
 8003aac:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ab6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003abc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003ac0:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ac4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003ac8:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003aca:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003acc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	d01a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x518>
      if(ret == HAL_OK)
 8003ad6:	2d00      	cmp	r5, #0
 8003ad8:	d135      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ada:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003ade:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003ae2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003ae6:	d022      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8003ae8:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003aea:	6913      	ldr	r3, [r2, #16]
 8003aec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003af0:	6113      	str	r3, [r2, #16]
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003af4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003af6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003afa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003afe:	4313      	orrs	r3, r2
 8003b00:	670b      	str	r3, [r1, #112]	; 0x70
 8003b02:	e799      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003b04:	58024400 	.word	0x58024400
 8003b08:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fa34 	bl	8001f78 <HAL_GetTick>
 8003b10:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b12:	4b87      	ldr	r3, [pc, #540]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	f013 0f02 	tst.w	r3, #2
 8003b1a:	d1dc      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fe fa2c 	bl	8001f78 <HAL_GetTick>
 8003b20:	1bc0      	subs	r0, r0, r7
 8003b22:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b26:	4298      	cmp	r0, r3
 8003b28:	d9f3      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x51e>
            ret = HAL_TIMEOUT;
 8003b2a:	2503      	movs	r5, #3
 8003b2c:	e7d3      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2e:	4880      	ldr	r0, [pc, #512]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003b30:	6902      	ldr	r2, [r0, #16]
 8003b32:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003b36:	497f      	ldr	r1, [pc, #508]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8003b38:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	6103      	str	r3, [r0, #16]
 8003b40:	e7d7      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      status = ret;
 8003b42:	462e      	mov	r6, r5
 8003b44:	e778      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x444>
        status = ret;
 8003b46:	462e      	mov	r6, r5
 8003b48:	e776      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x444>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	1d20      	adds	r0, r4, #4
 8003b4e:	f7ff fc45 	bl	80033dc <RCCEx_PLL2_Config>
 8003b52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b54:	b9e5      	cbnz	r5, 8003b90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b56:	4a76      	ldr	r2, [pc, #472]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003b58:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b5a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003b5e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6553      	str	r3, [r2, #84]	; 0x54
 8003b64:	e008      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b66:	2101      	movs	r1, #1
 8003b68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b6c:	f7ff fcbc 	bl	80034e8 <RCCEx_PLL3_Config>
 8003b70:	4605      	mov	r5, r0
      break;
 8003b72:	e7ef      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b74:	2601      	movs	r6, #1
 8003b76:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	f013 0f02 	tst.w	r3, #2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b80:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d81b      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003b86:	e8df f003 	tbb	[pc, r3]
 8003b8a:	050a      	.short	0x050a
 8003b8c:	0a0a0a13 	.word	0x0a0a0a13
 8003b90:	462e      	mov	r6, r5
 8003b92:	e7f1      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b94:	2101      	movs	r1, #1
 8003b96:	1d20      	adds	r0, r4, #4
 8003b98:	f7ff fc20 	bl	80033dc <RCCEx_PLL2_Config>
 8003b9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b9e:	b98d      	cbnz	r5, 8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ba0:	4a63      	ldr	r2, [pc, #396]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003ba2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ba4:	f023 0307 	bic.w	r3, r3, #7
 8003ba8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6553      	str	r3, [r2, #84]	; 0x54
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bb6:	f7ff fc97 	bl	80034e8 <RCCEx_PLL3_Config>
 8003bba:	4605      	mov	r5, r0
      break;
 8003bbc:	e7ef      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003bbe:	2601      	movs	r6, #1
 8003bc0:	4635      	mov	r5, r6
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8003bc4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	f013 0f04 	tst.w	r3, #4
 8003bcc:	d022      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003bce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d81a      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003bd6:	e8df f003 	tbb	[pc, r3]
 8003bda:	0308      	.short	0x0308
 8003bdc:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003be0:	2101      	movs	r1, #1
 8003be2:	1d20      	adds	r0, r4, #4
 8003be4:	f7ff fbfa 	bl	80033dc <RCCEx_PLL2_Config>
 8003be8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003bea:	b995      	cbnz	r5, 8003c12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bec:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003bee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003bf0:	f023 0307 	bic.w	r3, r3, #7
 8003bf4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c04:	f7ff fc70 	bl	80034e8 <RCCEx_PLL3_Config>
 8003c08:	4605      	mov	r5, r0
      break;
 8003c0a:	e7ee      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c0c:	2601      	movs	r6, #1
 8003c0e:	4635      	mov	r5, r6
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8003c12:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f013 0f20 	tst.w	r3, #32
 8003c1a:	d027      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c1c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c24:	d040      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003c26:	d816      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c28:	b13b      	cbz	r3, 8003c3a <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c2e:	d10f      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c30:	2100      	movs	r1, #0
 8003c32:	1d20      	adds	r0, r4, #4
 8003c34:	f7ff fbd2 	bl	80033dc <RCCEx_PLL2_Config>
 8003c38:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	d13b      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c3e:	4a3c      	ldr	r2, [pc, #240]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003c40:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c42:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003c46:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6553      	str	r3, [r2, #84]	; 0x54
 8003c4e:	e00d      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c50:	2601      	movs	r6, #1
 8003c52:	4635      	mov	r5, r6
 8003c54:	e00a      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c60:	d0eb      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c66:	d0e8      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003c68:	2601      	movs	r6, #1
 8003c6a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c72:	d030      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7c:	d04b      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8003c7e:	d81f      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003c80:	b13b      	cbz	r3, 8003c92 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d118      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c88:	2100      	movs	r1, #0
 8003c8a:	1d20      	adds	r0, r4, #4
 8003c8c:	f7ff fba6 	bl	80033dc <RCCEx_PLL2_Config>
 8003c90:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c92:	2d00      	cmp	r5, #0
 8003c94:	d146      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x730>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c96:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003c98:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003c9a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003c9e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca6:	e016      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ca8:	2102      	movs	r1, #2
 8003caa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cae:	f7ff fc1b 	bl	80034e8 <RCCEx_PLL3_Config>
 8003cb2:	4605      	mov	r5, r0
      break;
 8003cb4:	e7c1      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003cb6:	462e      	mov	r6, r5
 8003cb8:	e7d8      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003cba:	2601      	movs	r6, #1
 8003cbc:	4635      	mov	r5, r6
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d0e5      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003cc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cca:	d0e2      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003ccc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cd0:	d0df      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003cd2:	2601      	movs	r6, #1
 8003cd4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003cdc:	d037      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003cde:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce6:	f000 80a2 	beq.w	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8003cea:	d825      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8003cec:	b13b      	cbz	r3, 8003cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf2:	d119      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	1d20      	adds	r0, r4, #4
 8003cf8:	f7ff fb70 	bl	80033dc <RCCEx_PLL2_Config>
 8003cfc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	f040 809c 	bne.w	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003d06:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003d08:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d0c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6593      	str	r3, [r2, #88]	; 0x58
 8003d14:	e01b      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d16:	2102      	movs	r1, #2
 8003d18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d1c:	f7ff fbe4 	bl	80034e8 <RCCEx_PLL3_Config>
 8003d20:	4605      	mov	r5, r0
      break;
 8003d22:	e7b6      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003d24:	462e      	mov	r6, r5
 8003d26:	e7d6      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d28:	2601      	movs	r6, #1
 8003d2a:	4635      	mov	r5, r6
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003d2e:	bf00      	nop
 8003d30:	58024400 	.word	0x58024400
 8003d34:	00ffffcf 	.word	0x00ffffcf
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3c:	d0df      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003d3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d42:	d0dc      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003d44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d48:	d0d9      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003d4a:	2601      	movs	r6, #1
 8003d4c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	f013 0f08 	tst.w	r3, #8
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d56:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d06f      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d60:	4a94      	ldr	r2, [pc, #592]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003d62:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d68:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	f013 0f10 	tst.w	r3, #16
 8003d76:	d00c      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d80:	d067      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d82:	4a8c      	ldr	r2, [pc, #560]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003d84:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003d98:	d00b      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch(PeriphClkInit->AdcClockSelection)
 8003d9a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d06e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003da8:	d061      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d05a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8003dae:	2601      	movs	r6, #1
 8003db0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003db8:	d00c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->UsbClockSelection)
 8003dba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc2:	d076      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8003dc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dc8:	d069      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dce:	d061      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8003dd0:	2601      	movs	r6, #1
 8003dd2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003dda:	d007      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003ddc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d070      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d07b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003de8:	2601      	movs	r6, #1
 8003dea:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003df2:	d17d      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003dfa:	f000 8086 	beq.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x916>
    switch(PeriphClkInit->RngClockSelection)
 8003dfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e04:	f000 80c6 	beq.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8003e08:	d97c      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e14:	f040 80bc 	bne.w	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    if(ret == HAL_OK)
 8003e18:	2d00      	cmp	r5, #0
 8003e1a:	f040 80c1 	bne.w	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e1e:	4a65      	ldr	r2, [pc, #404]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003e20:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6553      	str	r3, [r2, #84]	; 0x54
 8003e2c:	e06d      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x916>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e2e:	2102      	movs	r1, #2
 8003e30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e34:	f7ff fb58 	bl	80034e8 <RCCEx_PLL3_Config>
 8003e38:	4605      	mov	r5, r0
      break;
 8003e3a:	e760      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003e3c:	462e      	mov	r6, r5
 8003e3e:	e786      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x75a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e40:	2102      	movs	r1, #2
 8003e42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e46:	f7ff fb4f 	bl	80034e8 <RCCEx_PLL3_Config>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d088      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x76c>
          status = HAL_ERROR;
 8003e4e:	2601      	movs	r6, #1
 8003e50:	e786      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x76c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e52:	2102      	movs	r1, #2
 8003e54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e58:	f7ff fb46 	bl	80034e8 <RCCEx_PLL3_Config>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d090      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x78e>
        status = HAL_ERROR;
 8003e60:	2601      	movs	r6, #1
 8003e62:	e78e      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e64:	2100      	movs	r1, #0
 8003e66:	1d20      	adds	r0, r4, #4
 8003e68:	f7ff fab8 	bl	80033dc <RCCEx_PLL2_Config>
 8003e6c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e6e:	b97d      	cbnz	r5, 8003e90 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e70:	4a50      	ldr	r2, [pc, #320]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003e72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e78:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e80:	e797      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e82:	2102      	movs	r1, #2
 8003e84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e88:	f7ff fb2e 	bl	80034e8 <RCCEx_PLL3_Config>
 8003e8c:	4605      	mov	r5, r0
      break;
 8003e8e:	e7ee      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003e90:	462e      	mov	r6, r5
 8003e92:	e78e      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e94:	4a47      	ldr	r2, [pc, #284]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003e96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e9e:	b97d      	cbnz	r5, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea0:	4a44      	ldr	r2, [pc, #272]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003ea2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ea4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ea8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6553      	str	r3, [r2, #84]	; 0x54
 8003eb0:	e790      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003eb8:	f7ff fb16 	bl	80034e8 <RCCEx_PLL3_Config>
 8003ebc:	4605      	mov	r5, r0
      break;
 8003ebe:	e7ee      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003ec0:	462e      	mov	r6, r5
 8003ec2:	e787      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec4:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003ec6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003ece:	b96d      	cbnz	r5, 8003eec <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ed0:	4a38      	ldr	r2, [pc, #224]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003ed2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003eda:	430b      	orrs	r3, r1
 8003edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ede:	e785      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	1d20      	adds	r0, r4, #4
 8003ee4:	f7ff fa7a 	bl	80033dc <RCCEx_PLL2_Config>
 8003ee8:	4605      	mov	r5, r0
      break;
 8003eea:	e7f0      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8003eec:	462e      	mov	r6, r5
 8003eee:	e77d      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ef6:	f7ff faf7 	bl	80034e8 <RCCEx_PLL3_Config>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	f43f af7a 	beq.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      status=HAL_ERROR;
 8003f00:	2601      	movs	r6, #1
 8003f02:	e777      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch(PeriphClkInit->RngClockSelection)
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d087      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003f08:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003f10:	d006      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f12:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003f14:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f1a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f26:	d007      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x944>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f28:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003f2a:	6913      	ldr	r3, [r2, #16]
 8003f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f30:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003f3e:	d006      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x95a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003f42:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f48:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003f54:	d009      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x976>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f5e:	611a      	str	r2, [r3, #16]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003f66:	430a      	orrs	r2, r1
 8003f68:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db19      	blt.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003f76:	d007      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x994>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003f7a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f7c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f80:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 8003f88:	b106      	cbz	r6, 8003f8c <HAL_RCCEx_PeriphCLKConfig+0x998>
  return HAL_ERROR;
 8003f8a:	2601      	movs	r6, #1
}
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8003f90:	2601      	movs	r6, #1
 8003f92:	e7ba      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f94:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003f96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003f9e:	e73b      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003fa0:	462e      	mov	r6, r5
 8003fa2:	e7b2      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x916>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fa4:	4a03      	ldr	r2, [pc, #12]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003fa6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003fa8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003fac:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fb2:	e7dd      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003fb4:	58024400 	.word	0x58024400

08003fb8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8003fb8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fba:	f7ff f9c9 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003fc6:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	f003 031f 	and.w	r3, r3, #31
}
 8003fce:	40d8      	lsrs	r0, r3
 8003fd0:	bd08      	pop	{r3, pc}
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	0800aa40 	.word	0x0800aa40

08003fdc <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8003fdc:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fde:	4a78      	ldr	r2, [pc, #480]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003fe0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003fe2:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8003fe4:	f3c4 3505 	ubfx	r5, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fe8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fea:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003fee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ff0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003ff4:	fb03 f302 	mul.w	r3, r3, r2
  if (pll2m != 0U)
 8003ff8:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 8003ffc:	f000 80da 	beq.w	80041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8004000:	f001 0103 	and.w	r1, r1, #3
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800400c:	2901      	cmp	r1, #1
 800400e:	d066      	beq.n	80040de <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8004010:	2902      	cmp	r1, #2
 8004012:	f000 80b2 	beq.w	800417a <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
 8004016:	b1e1      	cbz	r1, 8004052 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004018:	ee07 5a10 	vmov	s14, r5
 800401c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004020:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004024:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004028:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004030:	ee07 3a10 	vmov	s14, r3
 8004034:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004038:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800403c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800404c:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004050:	e061      	b.n	8004116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004052:	4b5b      	ldr	r3, [pc, #364]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f013 0f20 	tst.w	r3, #32
 800405a:	d023      	beq.n	80040a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800405c:	4958      	ldr	r1, [pc, #352]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800405e:	680a      	ldr	r2, [r1, #0]
 8004060:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004066:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004068:	ee07 3a10 	vmov	s14, r3
 800406c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004070:	ee06 5a90 	vmov	s13, r5
 8004074:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004078:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800407c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800407e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004082:	ee07 3a10 	vmov	s14, r3
 8004086:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800408a:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800408e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800409a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800409e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040a2:	e038      	b.n	8004116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040a4:	ee07 5a10 	vmov	s14, r5
 80040a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80040ac:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80040b0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80040b4:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040bc:	ee07 3a10 	vmov	s14, r3
 80040c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80040c4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80040c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80040cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040dc:	e01b      	b.n	8004116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040de:	ee07 5a10 	vmov	s14, r5
 80040e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80040e6:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80040ea:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a10 	vmov	s14, r3
 80040fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80040fe:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004102:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800410e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004112:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004116:	4a2a      	ldr	r2, [pc, #168]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004118:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800411a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800411e:	ee07 3a10 	vmov	s14, r3
 8004122:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004126:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800412a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800412e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004136:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800413a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800413c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004140:	ee07 3a10 	vmov	s14, r3
 8004144:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004148:	ee37 7a06 	vadd.f32	s14, s14, s12
 800414c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004154:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004158:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800415a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	ee77 7a86 	vadd.f32	s15, s15, s12
 800416a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004172:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004176:	bc30      	pop	{r4, r5}
 8004178:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800417a:	ee07 5a10 	vmov	s14, r5
 800417e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004182:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8004186:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004192:	ee07 3a10 	vmov	s14, r3
 8004196:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800419a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80041c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800419e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80041a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80041b2:	e7b0      	b.n	8004116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041b8:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041ba:	6083      	str	r3, [r0, #8]
}
 80041bc:	e7db      	b.n	8004176 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400
 80041c4:	4a742400 	.word	0x4a742400
 80041c8:	39000000 	.word	0x39000000
 80041cc:	03d09000 	.word	0x03d09000
 80041d0:	4c742400 	.word	0x4c742400
 80041d4:	4bbebc20 	.word	0x4bbebc20

080041d8 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80041d8:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041da:	4a78      	ldr	r2, [pc, #480]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80041dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80041de:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80041e0:	f3c4 5505 	ubfx	r5, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041e6:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80041ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041ec:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80041f0:	fb03 f302 	mul.w	r3, r3, r2
  if (pll3m != 0U)
 80041f4:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 80041f8:	f000 80da 	beq.w	80043b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 80041fc:	f001 0103 	and.w	r1, r1, #3
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004208:	2901      	cmp	r1, #1
 800420a:	d066      	beq.n	80042da <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 800420c:	2902      	cmp	r1, #2
 800420e:	f000 80b2 	beq.w	8004376 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
 8004212:	b1e1      	cbz	r1, 800424e <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004214:	ee07 5a10 	vmov	s14, r5
 8004218:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800421c:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004220:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004224:	4b65      	ldr	r3, [pc, #404]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422c:	ee07 3a10 	vmov	s14, r3
 8004230:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004234:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004238:	ee67 7a86 	vmul.f32	s15, s15, s12
 800423c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004244:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004248:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800424c:	e061      	b.n	8004312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800424e:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f013 0f20 	tst.w	r3, #32
 8004256:	d023      	beq.n	80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004258:	4958      	ldr	r1, [pc, #352]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800425a:	680a      	ldr	r2, [r1, #0]
 800425c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8004262:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004264:	ee07 3a10 	vmov	s14, r3
 8004268:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800426c:	ee06 5a90 	vmov	s13, r5
 8004270:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004274:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427e:	ee07 3a10 	vmov	s14, r3
 8004282:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004286:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800428a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800429a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800429e:	e038      	b.n	8004312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042a0:	ee07 5a10 	vmov	s14, r5
 80042a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042a8:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80042ac:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80042b0:	4b42      	ldr	r3, [pc, #264]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b8:	ee07 3a10 	vmov	s14, r3
 80042bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042c0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80042c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80042c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042d8:	e01b      	b.n	8004312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042da:	ee07 5a10 	vmov	s14, r5
 80042de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042e2:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80042e6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80042ea:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	ee07 3a10 	vmov	s14, r3
 80042f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042fa:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80042fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800430a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800430e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004312:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004314:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004316:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800431a:	ee07 3a10 	vmov	s14, r3
 800431e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004322:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004326:	ee37 7a06 	vadd.f32	s14, s14, s12
 800432a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004332:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004336:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004338:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800433c:	ee07 3a10 	vmov	s14, r3
 8004340:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004344:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800434c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004350:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004354:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004356:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800436e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004372:	bc30      	pop	{r4, r5}
 8004374:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004376:	ee07 5a10 	vmov	s14, r5
 800437a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800437e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80043d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8004382:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a10 	vmov	s14, r3
 8004392:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004396:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800439a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80043ae:	e7b0      	b.n	8004312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043b4:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043b6:	6083      	str	r3, [r0, #8]
}
 80043b8:	e7db      	b.n	8004372 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80043ba:	bf00      	nop
 80043bc:	58024400 	.word	0x58024400
 80043c0:	4a742400 	.word	0x4a742400
 80043c4:	39000000 	.word	0x39000000
 80043c8:	03d09000 	.word	0x03d09000
 80043cc:	4c742400 	.word	0x4c742400
 80043d0:	4bbebc20 	.word	0x4bbebc20

080043d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80043d4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 80043d6:	6802      	ldr	r2, [r0, #0]
 80043d8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80043da:	6991      	ldr	r1, [r2, #24]
 80043dc:	f041 0108 	orr.w	r1, r1, #8
 80043e0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80043e2:	6801      	ldr	r1, [r0, #0]
 80043e4:	698a      	ldr	r2, [r1, #24]
 80043e6:	f042 0210 	orr.w	r2, r2, #16
 80043ea:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ec:	6801      	ldr	r1, [r0, #0]
 80043ee:	680a      	ldr	r2, [r1, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80043f6:	6801      	ldr	r1, [r0, #0]
 80043f8:	690c      	ldr	r4, [r1, #16]
 80043fa:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <SPI_CloseTransfer+0xcc>)
 80043fc:	4022      	ands	r2, r4
 80043fe:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004400:	6801      	ldr	r1, [r0, #0]
 8004402:	688a      	ldr	r2, [r1, #8]
 8004404:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004408:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800440a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	2a04      	cmp	r2, #4
 8004412:	d00d      	beq.n	8004430 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004414:	f013 0f20 	tst.w	r3, #32
 8004418:	d00a      	beq.n	8004430 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800441a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800441e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004422:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004426:	6801      	ldr	r1, [r0, #0]
 8004428:	698a      	ldr	r2, [r1, #24]
 800442a:	f042 0220 	orr.w	r2, r2, #32
 800442e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004430:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	2a03      	cmp	r2, #3
 8004438:	d00d      	beq.n	8004456 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800443a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800443e:	d00a      	beq.n	8004456 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004440:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8004444:	f042 0204 	orr.w	r2, r2, #4
 8004448:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444c:	6801      	ldr	r1, [r0, #0]
 800444e:	698a      	ldr	r2, [r1, #24]
 8004450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004454:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004456:	f413 7f00 	tst.w	r3, #512	; 0x200
 800445a:	d00a      	beq.n	8004472 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800445c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004468:	6801      	ldr	r1, [r0, #0]
 800446a:	698a      	ldr	r2, [r1, #24]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004472:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004476:	d00a      	beq.n	800448e <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004478:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800447c:	f043 0308 	orr.w	r3, r3, #8
 8004480:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004484:	6802      	ldr	r2, [r0, #0]
 8004486:	6993      	ldr	r3, [r2, #24]
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800448e:	2300      	movs	r3, #0
 8004490:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004494:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8004498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	fffffc90 	.word	0xfffffc90

080044a4 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80044a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80044a6:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80044a8:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80044aa:	3008      	adds	r0, #8
 80044ac:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 80044ae:	fb03 0000 	mla	r0, r3, r0, r0
 80044b2:	4770      	bx	lr

080044b4 <SPI_WaitOnFlagUntilTimeout>:
{
 80044b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b8:	4680      	mov	r8, r0
 80044ba:	460f      	mov	r7, r1
 80044bc:	4616      	mov	r6, r2
 80044be:	4699      	mov	r9, r3
 80044c0:	9c08      	ldr	r4, [sp, #32]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044c2:	e000      	b.n	80044c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c4:	b1bc      	cbz	r4, 80044f6 <SPI_WaitOnFlagUntilTimeout+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044c6:	f8d8 3000 	ldr.w	r3, [r8]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	ea37 0303 	bics.w	r3, r7, r3
 80044d0:	bf0c      	ite	eq
 80044d2:	2501      	moveq	r5, #1
 80044d4:	2500      	movne	r5, #0
 80044d6:	42b5      	cmp	r5, r6
 80044d8:	d10a      	bne.n	80044f0 <SPI_WaitOnFlagUntilTimeout+0x3c>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044da:	f7fd fd4d 	bl	8001f78 <HAL_GetTick>
 80044de:	eba0 0009 	sub.w	r0, r0, r9
 80044e2:	42a0      	cmp	r0, r4
 80044e4:	d3ee      	bcc.n	80044c4 <SPI_WaitOnFlagUntilTimeout+0x10>
 80044e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80044ea:	d0eb      	beq.n	80044c4 <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 80044ec:	2003      	movs	r0, #3
 80044ee:	e000      	b.n	80044f2 <SPI_WaitOnFlagUntilTimeout+0x3e>
  return HAL_OK;
 80044f0:	2000      	movs	r0, #0
}
 80044f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80044f6:	2003      	movs	r0, #3
 80044f8:	e7fb      	b.n	80044f2 <SPI_WaitOnFlagUntilTimeout+0x3e>
	...

080044fc <HAL_SPI_Init>:
  if (hspi == NULL)
 80044fc:	2800      	cmp	r0, #0
 80044fe:	f000 809f 	beq.w	8004640 <HAL_SPI_Init+0x144>
{
 8004502:	b570      	push	{r4, r5, r6, lr}
 8004504:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800450a:	6805      	ldr	r5, [r0, #0]
 800450c:	4b50      	ldr	r3, [pc, #320]	; (8004650 <HAL_SPI_Init+0x154>)
 800450e:	4e51      	ldr	r6, [pc, #324]	; (8004654 <HAL_SPI_Init+0x158>)
 8004510:	429d      	cmp	r5, r3
 8004512:	bf18      	it	ne
 8004514:	42b5      	cmpne	r5, r6
 8004516:	bf14      	ite	ne
 8004518:	2601      	movne	r6, #1
 800451a:	2600      	moveq	r6, #0
 800451c:	d007      	beq.n	800452e <HAL_SPI_Init+0x32>
 800451e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8004522:	429d      	cmp	r5, r3
 8004524:	d003      	beq.n	800452e <HAL_SPI_Init+0x32>
 8004526:	68c3      	ldr	r3, [r0, #12]
 8004528:	2b0f      	cmp	r3, #15
 800452a:	f200 808b 	bhi.w	8004644 <HAL_SPI_Init+0x148>
  packet_length = SPI_GetPacketSize(hspi);
 800452e:	4620      	mov	r0, r4
 8004530:	f7ff ffb8 	bl	80044a4 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004534:	b12e      	cbz	r6, 8004542 <HAL_SPI_Init+0x46>
 8004536:	4b48      	ldr	r3, [pc, #288]	; (8004658 <HAL_SPI_Init+0x15c>)
 8004538:	429d      	cmp	r5, r3
 800453a:	d002      	beq.n	8004542 <HAL_SPI_Init+0x46>
 800453c:	2808      	cmp	r0, #8
 800453e:	f200 8083 	bhi.w	8004648 <HAL_SPI_Init+0x14c>
 8004542:	4a43      	ldr	r2, [pc, #268]	; (8004650 <HAL_SPI_Init+0x154>)
 8004544:	4b43      	ldr	r3, [pc, #268]	; (8004654 <HAL_SPI_Init+0x158>)
 8004546:	429d      	cmp	r5, r3
 8004548:	bf18      	it	ne
 800454a:	4295      	cmpne	r5, r2
 800454c:	d003      	beq.n	8004556 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800454e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004552:	429d      	cmp	r5, r3
 8004554:	d101      	bne.n	800455a <HAL_SPI_Init+0x5e>
 8004556:	2810      	cmp	r0, #16
 8004558:	d878      	bhi.n	800464c <HAL_SPI_Init+0x150>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800455a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800455e:	2b00      	cmp	r3, #0
 8004560:	d054      	beq.n	800460c <HAL_SPI_Init+0x110>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004562:	2302      	movs	r3, #2
 8004564:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004572:	69a3      	ldr	r3, [r4, #24]
 8004574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004578:	d04e      	beq.n	8004618 <HAL_SPI_Init+0x11c>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800457a:	69e3      	ldr	r3, [r4, #28]
 800457c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800457e:	4313      	orrs	r3, r2
 8004580:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004582:	4313      	orrs	r3, r2
 8004584:	68e1      	ldr	r1, [r4, #12]
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	430b      	orrs	r3, r1
 800458a:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800458c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800458e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004590:	4313      	orrs	r3, r2
 8004592:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004594:	4313      	orrs	r3, r2
 8004596:	69a2      	ldr	r2, [r4, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	6922      	ldr	r2, [r4, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	6962      	ldr	r2, [r4, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	6a22      	ldr	r2, [r4, #32]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80045ac:	4313      	orrs	r3, r2
 80045ae:	68a2      	ldr	r2, [r4, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80045b4:	4313      	orrs	r3, r2
 80045b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	430b      	orrs	r3, r1
 80045bc:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	b96b      	cbnz	r3, 80045de <HAL_SPI_Init+0xe2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	6893      	ldr	r3, [r2, #8]
 80045c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80045ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045ce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	6893      	ldr	r3, [r2, #8]
 80045d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045dc:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045de:	6822      	ldr	r2, [r4, #0]
 80045e0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80045ee:	d006      	beq.n	80045fe <HAL_SPI_Init+0x102>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	68d3      	ldr	r3, [r2, #12]
 80045f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80045fa:	430b      	orrs	r3, r1
 80045fc:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045fe:	2000      	movs	r0, #0
 8004600:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004604:	2301      	movs	r3, #1
 8004606:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800460a:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800460c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8004610:	4620      	mov	r0, r4
 8004612:	f7fd f959 	bl	80018c8 <HAL_SPI_MspInit>
 8004616:	e7a4      	b.n	8004562 <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461e:	d006      	beq.n	800462e <HAL_SPI_Init+0x132>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1aa      	bne.n	800457a <HAL_SPI_Init+0x7e>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004624:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462a:	d1a6      	bne.n	800457a <HAL_SPI_Init+0x7e>
 800462c:	e002      	b.n	8004634 <HAL_SPI_Init+0x138>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800462e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004630:	2a00      	cmp	r2, #0
 8004632:	d1f5      	bne.n	8004620 <HAL_SPI_Init+0x124>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e79c      	b.n	800457a <HAL_SPI_Init+0x7e>
    return HAL_ERROR;
 8004640:	2001      	movs	r0, #1
}
 8004642:	4770      	bx	lr
    return HAL_ERROR;
 8004644:	2001      	movs	r0, #1
 8004646:	e7e0      	b.n	800460a <HAL_SPI_Init+0x10e>
    return HAL_ERROR;
 8004648:	2001      	movs	r0, #1
 800464a:	e7de      	b.n	800460a <HAL_SPI_Init+0x10e>
 800464c:	2001      	movs	r0, #1
 800464e:	e7dc      	b.n	800460a <HAL_SPI_Init+0x10e>
 8004650:	40013000 	.word	0x40013000
 8004654:	40003800 	.word	0x40003800
 8004658:	40003c00 	.word	0x40003c00

0800465c <HAL_SPI_Transmit>:
{
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004664:	f8d0 8000 	ldr.w	r8, [r0]
  __HAL_LOCK(hspi);
 8004668:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800466c:	2b01      	cmp	r3, #1
 800466e:	f000 8153 	beq.w	8004918 <HAL_SPI_Transmit+0x2bc>
 8004672:	4604      	mov	r4, r0
 8004674:	468a      	mov	sl, r1
 8004676:	4691      	mov	r9, r2
 8004678:	2301      	movs	r3, #1
 800467a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800467e:	f7fd fc7b 	bl	8001f78 <HAL_GetTick>
 8004682:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004684:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 8004688:	b2f6      	uxtb	r6, r6
 800468a:	2e01      	cmp	r6, #1
 800468c:	d135      	bne.n	80046fa <HAL_SPI_Transmit+0x9e>
  if ((pData == NULL) || (Size == 0UL))
 800468e:	fab9 f389 	clz	r3, r9
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	f1ba 0f00 	cmp.w	sl, #0
 8004698:	bf08      	it	eq
 800469a:	2301      	moveq	r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d134      	bne.n	800470a <HAL_SPI_Transmit+0xae>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046a0:	2303      	movs	r3, #3
 80046a2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046ac:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80046b0:	f8a4 9060 	strh.w	r9, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 80046b4:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 80046b8:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80046ba:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80046be:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80046c2:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 80046c4:	6723      	str	r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c6:	68a3      	ldr	r3, [r4, #8]
 80046c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80046cc:	d021      	beq.n	8004712 <HAL_SPI_Transmit+0xb6>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	4a92      	ldr	r2, [pc, #584]	; (800491c <HAL_SPI_Transmit+0x2c0>)
 80046d4:	400a      	ands	r2, r1
 80046d6:	ea49 0202 	orr.w	r2, r9, r2
 80046da:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	6813      	ldr	r3, [r2, #0]
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ec:	d017      	beq.n	800471e <HAL_SPI_Transmit+0xc2>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80046ee:	68e3      	ldr	r3, [r4, #12]
 80046f0:	2b0f      	cmp	r3, #15
 80046f2:	d823      	bhi.n	800473c <HAL_SPI_Transmit+0xe0>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046f4:	2b07      	cmp	r3, #7
 80046f6:	d858      	bhi.n	80047aa <HAL_SPI_Transmit+0x14e>
 80046f8:	e0b6      	b.n	8004868 <HAL_SPI_Transmit+0x20c>
    __HAL_UNLOCK(hspi);
 80046fa:	2300      	movs	r3, #0
 80046fc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8004700:	2602      	movs	r6, #2
}
 8004702:	4630      	mov	r0, r6
 8004704:	b002      	add	sp, #8
 8004706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800470a:	2300      	movs	r3, #0
 800470c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8004710:	e7f7      	b.n	8004702 <HAL_SPI_Transmit+0xa6>
    SPI_1LINE_TX(hspi);
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e7d7      	b.n	80046ce <HAL_SPI_Transmit+0x72>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e7e1      	b.n	80046ee <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fd fc25 	bl	8001f78 <HAL_GetTick>
 800472e:	1bc0      	subs	r0, r0, r7
 8004730:	42a8      	cmp	r0, r5
 8004732:	d302      	bcc.n	800473a <HAL_SPI_Transmit+0xde>
 8004734:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004738:	d119      	bne.n	800476e <HAL_SPI_Transmit+0x112>
 800473a:	b1c5      	cbz	r5, 800476e <HAL_SPI_Transmit+0x112>
    while (hspi->TxXferCount > 0UL)
 800473c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80ca 	beq.w	80048dc <HAL_SPI_Transmit+0x280>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	f012 0f02 	tst.w	r2, #2
 8004750:	d0eb      	beq.n	800472a <HAL_SPI_Transmit+0xce>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004752:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004758:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800475a:	3304      	adds	r3, #4
 800475c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800475e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8004762:	b292      	uxth	r2, r2
 8004764:	3a01      	subs	r2, #1
 8004766:	b292      	uxth	r2, r2
 8004768:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800476c:	e7e6      	b.n	800473c <HAL_SPI_Transmit+0xe0>
          SPI_CloseTransfer(hspi);
 800476e:	4620      	mov	r0, r4
 8004770:	f7ff fe30 	bl	80043d4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8004774:	2300      	movs	r3, #0
 8004776:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800477a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004786:	2301      	movs	r3, #1
 8004788:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_ERROR;
 800478c:	e7b9      	b.n	8004702 <HAL_SPI_Transmit+0xa6>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800478e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	f8a8 3020 	strh.w	r3, [r8, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004796:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004798:	3302      	adds	r3, #2
 800479a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800479c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 80047aa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8093 	beq.w	80048dc <HAL_SPI_Transmit+0x280>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	6953      	ldr	r3, [r2, #20]
 80047ba:	f013 0f02 	tst.w	r3, #2
 80047be:	d015      	beq.n	80047ec <HAL_SPI_Transmit+0x190>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80047c0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d9e1      	bls.n	800478e <HAL_SPI_Transmit+0x132>
 80047ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0de      	beq.n	800478e <HAL_SPI_Transmit+0x132>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80047d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6213      	str	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80047d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047d8:	3304      	adds	r3, #4
 80047da:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80047dc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b02      	subs	r3, #2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80047ea:	e7de      	b.n	80047aa <HAL_SPI_Transmit+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ec:	f7fd fbc4 	bl	8001f78 <HAL_GetTick>
 80047f0:	1bc0      	subs	r0, r0, r7
 80047f2:	42a8      	cmp	r0, r5
 80047f4:	d302      	bcc.n	80047fc <HAL_SPI_Transmit+0x1a0>
 80047f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80047fa:	d101      	bne.n	8004800 <HAL_SPI_Transmit+0x1a4>
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	d1d4      	bne.n	80047aa <HAL_SPI_Transmit+0x14e>
          SPI_CloseTransfer(hspi);
 8004800:	4620      	mov	r0, r4
 8004802:	f7ff fde7 	bl	80043d4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8004806:	2300      	movs	r3, #0
 8004808:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800480c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004814:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004818:	2301      	movs	r3, #1
 800481a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_ERROR;
 800481e:	e770      	b.n	8004702 <HAL_SPI_Transmit+0xa6>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004820:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d910      	bls.n	800484c <HAL_SPI_Transmit+0x1f0>
 800482a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800482c:	b173      	cbz	r3, 800484c <HAL_SPI_Transmit+0x1f0>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800482e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	f8a8 3020 	strh.w	r3, [r8, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004836:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004838:	3302      	adds	r3, #2
 800483a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800483c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b02      	subs	r3, #2
 8004844:	b29b      	uxth	r3, r3
 8004846:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800484a:	e00d      	b.n	8004868 <HAL_SPI_Transmit+0x20c>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800484c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004856:	3301      	adds	r3, #1
 8004858:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800485a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29b      	uxth	r3, r3
 8004864:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8004868:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d034      	beq.n	80048dc <HAL_SPI_Transmit+0x280>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	6953      	ldr	r3, [r2, #20]
 8004876:	f013 0f02 	tst.w	r3, #2
 800487a:	d015      	beq.n	80048a8 <HAL_SPI_Transmit+0x24c>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800487c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b03      	cmp	r3, #3
 8004884:	d9cc      	bls.n	8004820 <HAL_SPI_Transmit+0x1c4>
 8004886:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d9c9      	bls.n	8004820 <HAL_SPI_Transmit+0x1c4>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800488c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6213      	str	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004892:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004894:	3304      	adds	r3, #4
 8004896:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004898:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b04      	subs	r3, #4
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80048a6:	e7df      	b.n	8004868 <HAL_SPI_Transmit+0x20c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a8:	f7fd fb66 	bl	8001f78 <HAL_GetTick>
 80048ac:	1bc0      	subs	r0, r0, r7
 80048ae:	42a8      	cmp	r0, r5
 80048b0:	d302      	bcc.n	80048b8 <HAL_SPI_Transmit+0x25c>
 80048b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80048b6:	d101      	bne.n	80048bc <HAL_SPI_Transmit+0x260>
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	d1d5      	bne.n	8004868 <HAL_SPI_Transmit+0x20c>
          SPI_CloseTransfer(hspi);
 80048bc:	4620      	mov	r0, r4
 80048be:	f7ff fd89 	bl	80043d4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 80048c2:	2300      	movs	r3, #0
 80048c4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80048c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80048cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_ERROR;
 80048da:	e712      	b.n	8004702 <HAL_SPI_Transmit+0xa6>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80048dc:	9500      	str	r5, [sp, #0]
 80048de:	463b      	mov	r3, r7
 80048e0:	2200      	movs	r2, #0
 80048e2:	2108      	movs	r1, #8
 80048e4:	4620      	mov	r0, r4
 80048e6:	f7ff fde5 	bl	80044b4 <SPI_WaitOnFlagUntilTimeout>
 80048ea:	b128      	cbz	r0, 80048f8 <HAL_SPI_Transmit+0x29c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80048f0:	f043 0320 	orr.w	r3, r3, #32
 80048f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7ff fd6b 	bl	80043d4 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 80048fe:	2300      	movs	r3, #0
 8004900:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8004904:	2301      	movs	r3, #1
 8004906:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800490a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800490e:	2b00      	cmp	r3, #0
 8004910:	f47f aef7 	bne.w	8004702 <HAL_SPI_Transmit+0xa6>
  return errorcode;
 8004914:	2600      	movs	r6, #0
 8004916:	e6f4      	b.n	8004702 <HAL_SPI_Transmit+0xa6>
  __HAL_LOCK(hspi);
 8004918:	2602      	movs	r6, #2
 800491a:	e6f2      	b.n	8004702 <HAL_SPI_Transmit+0xa6>
 800491c:	ffff0000 	.word	0xffff0000

08004920 <HAL_SPI_TransmitReceive>:
{
 8004920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	461d      	mov	r5, r3
 8004928:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800492a:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800492e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004932:	2b01      	cmp	r3, #1
 8004934:	f000 8200 	beq.w	8004d38 <HAL_SPI_TransmitReceive+0x418>
 8004938:	4604      	mov	r4, r0
 800493a:	4688      	mov	r8, r1
 800493c:	4691      	mov	r9, r2
 800493e:	2301      	movs	r3, #1
 8004940:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004944:	f7fd fb18 	bl	8001f78 <HAL_GetTick>
 8004948:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800494a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800494e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004950:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004952:	2b01      	cmp	r3, #1
 8004954:	d007      	beq.n	8004966 <HAL_SPI_TransmitReceive+0x46>
 8004956:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800495a:	d140      	bne.n	80049de <HAL_SPI_TransmitReceive+0xbe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800495c:	68a2      	ldr	r2, [r4, #8]
 800495e:	2a00      	cmp	r2, #0
 8004960:	d13d      	bne.n	80049de <HAL_SPI_TransmitReceive+0xbe>
 8004962:	2b04      	cmp	r3, #4
 8004964:	d13b      	bne.n	80049de <HAL_SPI_TransmitReceive+0xbe>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004966:	fab9 f389 	clz	r3, r9
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	f1b8 0f00 	cmp.w	r8, #0
 8004970:	bf08      	it	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d139      	bne.n	80049ec <HAL_SPI_TransmitReceive+0xcc>
 8004978:	2d00      	cmp	r5, #0
 800497a:	d037      	beq.n	80049ec <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800497c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b04      	cmp	r3, #4
 8004984:	d002      	beq.n	800498c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004986:	2305      	movs	r3, #5
 8004988:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800498c:	2300      	movs	r3, #0
 800498e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004992:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004996:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800499a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800499e:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80049a2:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80049a6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80049aa:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 80049ac:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	6851      	ldr	r1, [r2, #4]
 80049b2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80049b6:	400b      	ands	r3, r1
 80049b8:	432b      	orrs	r3, r5
 80049ba:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	6813      	ldr	r3, [r2, #0]
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049c6:	6863      	ldr	r3, [r4, #4]
 80049c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049cc:	d013      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0xd6>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80049ce:	68e3      	ldr	r3, [r4, #12]
 80049d0:	2b0f      	cmp	r3, #15
 80049d2:	d867      	bhi.n	8004aa4 <HAL_SPI_TransmitReceive+0x184>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049d4:	2b07      	cmp	r3, #7
 80049d6:	f200 80e5 	bhi.w	8004ba4 <HAL_SPI_TransmitReceive+0x284>
  initial_RxXferCount = Size;
 80049da:	46a8      	mov	r8, r5
 80049dc:	e132      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x324>
    __HAL_UNLOCK(hspi);
 80049de:	2300      	movs	r3, #0
 80049e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 80049e4:	2002      	movs	r0, #2
}
 80049e6:	b002      	add	sp, #8
 80049e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 80049ec:	2300      	movs	r3, #0
 80049ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 80049f2:	2001      	movs	r0, #1
 80049f4:	e7f7      	b.n	80049e6 <HAL_SPI_TransmitReceive+0xc6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	e7e5      	b.n	80049ce <HAL_SPI_TransmitReceive+0xae>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	6959      	ldr	r1, [r3, #20]
 8004a06:	f248 0208 	movw	r2, #32776	; 0x8008
 8004a0a:	4211      	tst	r1, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_SPI_TransmitReceive+0x116>
 8004a0e:	f1b8 0f00 	cmp.w	r8, #0
 8004a12:	d010      	beq.n	8004a36 <HAL_SPI_TransmitReceive+0x116>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004a14:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8004a20:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004a2e:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8004a32:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a36:	f7fd fa9f 	bl	8001f78 <HAL_GetTick>
 8004a3a:	1bc0      	subs	r0, r0, r7
 8004a3c:	42b0      	cmp	r0, r6
 8004a3e:	d302      	bcc.n	8004a46 <HAL_SPI_TransmitReceive+0x126>
 8004a40:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004a44:	d11e      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x164>
 8004a46:	b1ee      	cbz	r6, 8004a84 <HAL_SPI_TransmitReceive+0x164>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004a48:	ea45 0308 	orr.w	r3, r5, r8
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8156 	beq.w	8004d00 <HAL_SPI_TransmitReceive+0x3e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	f012 0f02 	tst.w	r2, #2
 8004a5c:	d0d1      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0xe2>
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	d0cf      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0xe2>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004a62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8004a6e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004a7c:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004a80:	b2ad      	uxth	r5, r5
 8004a82:	e7be      	b.n	8004a02 <HAL_SPI_TransmitReceive+0xe2>
        SPI_CloseTransfer(hspi);
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff fca5 	bl	80043d4 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a90:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a98:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
        return HAL_ERROR;
 8004aa2:	e7a0      	b.n	80049e6 <HAL_SPI_TransmitReceive+0xc6>
  initial_RxXferCount = Size;
 8004aa4:	46a8      	mov	r8, r5
 8004aa6:	e7cf      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x128>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	f8aa 3020 	strh.w	r3, [sl, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8004ab6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004ac4:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004ac8:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8004ad2:	d017      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x1e4>
 8004ad4:	f1b8 0f00 	cmp.w	r8, #0
 8004ad8:	d014      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x1e4>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ae0:	d03d      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x23e>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004ae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aea:	3304      	adds	r3, #4
 8004aec:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004aee:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b02      	subs	r3, #2
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004afc:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8004b00:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b04:	f7fd fa38 	bl	8001f78 <HAL_GetTick>
 8004b08:	1bc0      	subs	r0, r0, r7
 8004b0a:	42b0      	cmp	r0, r6
 8004b0c:	d302      	bcc.n	8004b14 <HAL_SPI_TransmitReceive+0x1f4>
 8004b0e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004b12:	d137      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x264>
 8004b14:	2e00      	cmp	r6, #0
 8004b16:	d035      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0x264>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004b18:	ea45 0308 	orr.w	r3, r5, r8
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80ee 	beq.w	8004d00 <HAL_SPI_TransmitReceive+0x3e0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	f012 0f02 	tst.w	r2, #2
 8004b2c:	d0cd      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x1aa>
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	d0cb      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x1aa>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004b32:	2d01      	cmp	r5, #1
 8004b34:	d9b8      	bls.n	8004aa8 <HAL_SPI_TransmitReceive+0x188>
 8004b36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	d0b5      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x188>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004b3c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b44:	3304      	adds	r3, #4
 8004b46:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004b48:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b02      	subs	r3, #2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004b56:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004b5a:	b2ad      	uxth	r5, r5
 8004b5c:	e7b5      	b.n	8004aca <HAL_SPI_TransmitReceive+0x1aa>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b60:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 8004b64:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b68:	3302      	adds	r3, #2
 8004b6a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8004b6c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004b7a:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8004b7e:	fa1f f888 	uxth.w	r8, r8
 8004b82:	e7bf      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x1e4>
        SPI_CloseTransfer(hspi);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7ff fc25 	bl	80043d4 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b90:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b98:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
        return HAL_ERROR;
 8004ba2:	e720      	b.n	80049e6 <HAL_SPI_TransmitReceive+0xc6>
  initial_RxXferCount = Size;
 8004ba4:	46a8      	mov	r8, r5
 8004ba6:	e7b7      	b.n	8004b18 <HAL_SPI_TransmitReceive+0x1f8>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004ba8:	2d01      	cmp	r5, #1
 8004baa:	d913      	bls.n	8004bd4 <HAL_SPI_TransmitReceive+0x2b4>
 8004bac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004bae:	b18a      	cbz	r2, 8004bd4 <HAL_SPI_TransmitReceive+0x2b4>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	f8aa 3020 	strh.w	r3, [sl, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bba:	3302      	adds	r3, #2
 8004bbc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004bbe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004bcc:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004bd0:	b2ad      	uxth	r5, r5
 8004bd2:	e010      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x2d6>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004bd4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	f883 2020 	strb.w	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bdc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bde:	3301      	adds	r3, #1
 8004be0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8004be2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004bf0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004bf4:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8004bfe:	d017      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x310>
 8004c00:	f1b8 0f00 	cmp.w	r8, #0
 8004c04:	d014      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x310>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004c0c:	d03c      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0x368>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004c0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c16:	3304      	adds	r3, #4
 8004c18:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8004c1a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b04      	subs	r3, #4
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004c28:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8004c2c:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c30:	f7fd f9a2 	bl	8001f78 <HAL_GetTick>
 8004c34:	1bc0      	subs	r0, r0, r7
 8004c36:	42b0      	cmp	r0, r6
 8004c38:	d302      	bcc.n	8004c40 <HAL_SPI_TransmitReceive+0x320>
 8004c3a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004c3e:	d14f      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x3c0>
 8004c40:	2e00      	cmp	r6, #0
 8004c42:	d04d      	beq.n	8004ce0 <HAL_SPI_TransmitReceive+0x3c0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004c44:	ea45 0308 	orr.w	r3, r5, r8
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d058      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x3e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	f012 0f02 	tst.w	r2, #2
 8004c56:	d0ce      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x2d6>
 8004c58:	2d00      	cmp	r5, #0
 8004c5a:	d0cc      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x2d6>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004c5c:	2d03      	cmp	r5, #3
 8004c5e:	d9a3      	bls.n	8004ba8 <HAL_SPI_TransmitReceive+0x288>
 8004c60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c62:	2a40      	cmp	r2, #64	; 0x40
 8004c64:	d9a0      	bls.n	8004ba8 <HAL_SPI_TransmitReceive+0x288>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004c66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004c6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c6e:	3304      	adds	r3, #4
 8004c70:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004c72:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b04      	subs	r3, #4
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004c80:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004c84:	b2ad      	uxth	r5, r5
 8004c86:	e7b6      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x2d6>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
 8004c8e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004c92:	d912      	bls.n	8004cba <HAL_SPI_TransmitReceive+0x39a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c96:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 8004c9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004ca2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b02      	subs	r3, #2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004cb0:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8004cb4:	fa1f f888 	uxth.w	r8, r8
 8004cb8:	e7ba      	b.n	8004c30 <HAL_SPI_TransmitReceive+0x310>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cc0:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8004cc8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004cd6:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8004cda:	fa1f f888 	uxth.w	r8, r8
 8004cde:	e7a7      	b.n	8004c30 <HAL_SPI_TransmitReceive+0x310>
        SPI_CloseTransfer(hspi);
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f7ff fb77 	bl	80043d4 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004cec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
        return HAL_ERROR;
 8004cfe:	e672      	b.n	80049e6 <HAL_SPI_TransmitReceive+0xc6>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004d00:	9600      	str	r6, [sp, #0]
 8004d02:	463b      	mov	r3, r7
 8004d04:	2200      	movs	r2, #0
 8004d06:	2108      	movs	r1, #8
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7ff fbd3 	bl	80044b4 <SPI_WaitOnFlagUntilTimeout>
 8004d0e:	b128      	cbz	r0, 8004d1c <HAL_SPI_TransmitReceive+0x3fc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d10:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004d14:	f043 0320 	orr.w	r3, r3, #32
 8004d18:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7ff fb59 	bl	80043d4 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8004d22:	2300      	movs	r3, #0
 8004d24:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004d32:	b91b      	cbnz	r3, 8004d3c <HAL_SPI_TransmitReceive+0x41c>
  return errorcode;
 8004d34:	2000      	movs	r0, #0
 8004d36:	e656      	b.n	80049e6 <HAL_SPI_TransmitReceive+0xc6>
  __HAL_LOCK(hspi);
 8004d38:	2002      	movs	r0, #2
 8004d3a:	e654      	b.n	80049e6 <HAL_SPI_TransmitReceive+0xc6>
    return HAL_ERROR;
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	e652      	b.n	80049e6 <HAL_SPI_TransmitReceive+0xc6>

08004d40 <HAL_SPI_Receive>:
{
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	4604      	mov	r4, r0
 8004d48:	468a      	mov	sl, r1
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004d4e:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d52:	6843      	ldr	r3, [r0, #4]
 8004d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d58:	d045      	beq.n	8004de6 <HAL_SPI_Receive+0xa6>
  __HAL_LOCK(hspi);
 8004d5a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f000 8146 	beq.w	8004ff0 <HAL_SPI_Receive+0x2b0>
 8004d64:	2301      	movs	r3, #1
 8004d66:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004d6a:	f7fd f905 	bl	8001f78 <HAL_GetTick>
 8004d6e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d70:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 8004d74:	b2f6      	uxtb	r6, r6
 8004d76:	2e01      	cmp	r6, #1
 8004d78:	d142      	bne.n	8004e00 <HAL_SPI_Receive+0xc0>
  if ((pData == NULL) || (Size == 0UL))
 8004d7a:	fab9 f389 	clz	r3, r9
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f1ba 0f00 	cmp.w	sl, #0
 8004d84:	bf08      	it	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d141      	bne.n	8004e10 <HAL_SPI_Receive+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d98:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8004d9c:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 8004da0:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 8004da4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004da6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004daa:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 8004dae:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004db0:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db2:	68a3      	ldr	r3, [r4, #8]
 8004db4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004db8:	d02e      	beq.n	8004e18 <HAL_SPI_Receive+0xd8>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
 8004dbe:	4a8d      	ldr	r2, [pc, #564]	; (8004ff4 <HAL_SPI_Receive+0x2b4>)
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	ea49 0202 	orr.w	r2, r9, r2
 8004dc6:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd8:	d024      	beq.n	8004e24 <HAL_SPI_Receive+0xe4>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004dda:	68e3      	ldr	r3, [r4, #12]
 8004ddc:	2b0f      	cmp	r3, #15
 8004dde:	d830      	bhi.n	8004e42 <HAL_SPI_Receive+0x102>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de0:	2b07      	cmp	r3, #7
 8004de2:	d866      	bhi.n	8004eb2 <HAL_SPI_Receive+0x172>
 8004de4:	e0c9      	b.n	8004f7a <HAL_SPI_Receive+0x23a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004de6:	6883      	ldr	r3, [r0, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1b6      	bne.n	8004d5a <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dec:	2304      	movs	r3, #4
 8004dee:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004df2:	9500      	str	r5, [sp, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	460a      	mov	r2, r1
 8004df8:	f7ff fd92 	bl	8004920 <HAL_SPI_TransmitReceive>
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	e003      	b.n	8004e08 <HAL_SPI_Receive+0xc8>
    __HAL_UNLOCK(hspi);
 8004e00:	2300      	movs	r3, #0
 8004e02:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8004e06:	2602      	movs	r6, #2
}
 8004e08:	4630      	mov	r0, r6
 8004e0a:	b002      	add	sp, #8
 8004e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 8004e10:	2300      	movs	r3, #0
 8004e12:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8004e16:	e7f7      	b.n	8004e08 <HAL_SPI_Receive+0xc8>
    SPI_1LINE_RX(hspi);
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	6813      	ldr	r3, [r2, #0]
 8004e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e7ca      	b.n	8004dba <HAL_SPI_Receive+0x7a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e7d4      	b.n	8004dda <HAL_SPI_Receive+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e30:	f7fd f8a2 	bl	8001f78 <HAL_GetTick>
 8004e34:	1bc0      	subs	r0, r0, r7
 8004e36:	42a8      	cmp	r0, r5
 8004e38:	d302      	bcc.n	8004e40 <HAL_SPI_Receive+0x100>
 8004e3a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004e3e:	d11a      	bne.n	8004e76 <HAL_SPI_Receive+0x136>
 8004e40:	b1cd      	cbz	r5, 8004e76 <HAL_SPI_Receive+0x136>
    while (hspi->RxXferCount > 0UL)
 8004e42:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80c1 	beq.w	8004fd0 <HAL_SPI_Receive+0x290>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	6959      	ldr	r1, [r3, #20]
 8004e52:	f248 0208 	movw	r2, #32776	; 0x8008
 8004e56:	4211      	tst	r1, r2
 8004e58:	d0ea      	beq.n	8004e30 <HAL_SPI_Receive+0xf0>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e62:	3304      	adds	r3, #4
 8004e64:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8004e66:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	3a01      	subs	r2, #1
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8004e74:	e7e5      	b.n	8004e42 <HAL_SPI_Receive+0x102>
          SPI_CloseTransfer(hspi);
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7ff faac 	bl	80043d4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e82:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_ERROR;
 8004e94:	e7b8      	b.n	8004e08 <HAL_SPI_Receive+0xc8>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e98:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 8004e9c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8004ea4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8004eb2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8089 	beq.w	8004fd0 <HAL_SPI_Receive+0x290>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8004ec6:	d011      	beq.n	8004eec <HAL_SPI_Receive+0x1ac>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ece:	d0e2      	beq.n	8004e96 <HAL_SPI_Receive+0x156>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004ed0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed8:	3304      	adds	r3, #4
 8004eda:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004edc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b02      	subs	r3, #2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8004eea:	e7e2      	b.n	8004eb2 <HAL_SPI_Receive+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eec:	f7fd f844 	bl	8001f78 <HAL_GetTick>
 8004ef0:	1bc0      	subs	r0, r0, r7
 8004ef2:	42a8      	cmp	r0, r5
 8004ef4:	d302      	bcc.n	8004efc <HAL_SPI_Receive+0x1bc>
 8004ef6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004efa:	d101      	bne.n	8004f00 <HAL_SPI_Receive+0x1c0>
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	d1d8      	bne.n	8004eb2 <HAL_SPI_Receive+0x172>
          SPI_CloseTransfer(hspi);
 8004f00:	4620      	mov	r0, r4
 8004f02:	f7ff fa67 	bl	80043d4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8004f06:	2300      	movs	r3, #0
 8004f08:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_ERROR;
 8004f1e:	e773      	b.n	8004e08 <HAL_SPI_Receive+0xc8>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
 8004f26:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004f2a:	d90e      	bls.n	8004f4a <HAL_SPI_Receive+0x20a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f2e:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 8004f32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f36:	3302      	adds	r3, #2
 8004f38:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004f3a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b02      	subs	r3, #2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8004f48:	e017      	b.n	8004f7a <HAL_SPI_Receive+0x23a>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f50:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f54:	3301      	adds	r3, #1
 8004f56:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8004f58:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8004f66:	e008      	b.n	8004f7a <HAL_SPI_Receive+0x23a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f68:	f7fd f806 	bl	8001f78 <HAL_GetTick>
 8004f6c:	1bc0      	subs	r0, r0, r7
 8004f6e:	42a8      	cmp	r0, r5
 8004f70:	d302      	bcc.n	8004f78 <HAL_SPI_Receive+0x238>
 8004f72:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004f76:	d11b      	bne.n	8004fb0 <HAL_SPI_Receive+0x270>
 8004f78:	b1d5      	cbz	r5, 8004fb0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0UL)
 8004f7a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	b333      	cbz	r3, 8004fd0 <HAL_SPI_Receive+0x290>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	695a      	ldr	r2, [r3, #20]
 8004f86:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8004f8a:	d0ed      	beq.n	8004f68 <HAL_SPI_Receive+0x228>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004f92:	d0c5      	beq.n	8004f20 <HAL_SPI_Receive+0x1e0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004f94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8004fa0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b04      	subs	r3, #4
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8004fae:	e7e4      	b.n	8004f7a <HAL_SPI_Receive+0x23a>
          SPI_CloseTransfer(hspi);
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7ff fa0f 	bl	80043d4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004fbc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_ERROR;
 8004fce:	e71b      	b.n	8004e08 <HAL_SPI_Receive+0xc8>
  SPI_CloseTransfer(hspi);
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff f9ff 	bl	80043d4 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f47f af0e 	bne.w	8004e08 <HAL_SPI_Receive+0xc8>
  return errorcode;
 8004fec:	2600      	movs	r6, #0
 8004fee:	e70b      	b.n	8004e08 <HAL_SPI_Receive+0xc8>
  __HAL_LOCK(hspi);
 8004ff0:	2602      	movs	r6, #2
 8004ff2:	e709      	b.n	8004e08 <HAL_SPI_Receive+0xc8>
 8004ff4:	ffff0000 	.word	0xffff0000

08004ff8 <HAL_SPI_GetState>:
  return hspi->State;
 8004ff8:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
}
 8004ffc:	4770      	bx	lr
	...

08005000 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005000:	6802      	ldr	r2, [r0, #0]
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005008:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800500a:	6802      	ldr	r2, [r0, #0]
 800500c:	6891      	ldr	r1, [r2, #8]
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <UART_EndRxTransfer+0x34>)
 8005010:	400b      	ands	r3, r1
 8005012:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005014:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d006      	beq.n	8005028 <UART_EndRxTransfer+0x28>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501a:	2320      	movs	r3, #32
 800501c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005020:	2300      	movs	r3, #0
 8005022:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005024:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005026:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	6802      	ldr	r2, [r0, #0]
 800502a:	6813      	ldr	r3, [r2, #0]
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e7f2      	b.n	800501a <UART_EndRxTransfer+0x1a>
 8005034:	effffffe 	.word	0xeffffffe

08005038 <HAL_UART_TxCpltCallback>:
}
 8005038:	4770      	bx	lr

0800503a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503a:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800503c:	6801      	ldr	r1, [r0, #0]
 800503e:	680a      	ldr	r2, [r1, #0]
 8005040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005044:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005046:	2220      	movs	r2, #32
 8005048:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800504c:	2200      	movs	r2, #0
 800504e:	6742      	str	r2, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005050:	f7ff fff2 	bl	8005038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005054:	bd08      	pop	{r3, pc}

08005056 <HAL_UART_ErrorCallback>:
}
 8005056:	4770      	bx	lr

08005058 <UART_DMAAbortOnError>:
{
 8005058:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800505a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005062:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005066:	f7ff fff6 	bl	8005056 <HAL_UART_ErrorCallback>
}
 800506a:	bd08      	pop	{r3, pc}

0800506c <HAL_UARTEx_RxEventCallback>:
}
 800506c:	4770      	bx	lr
	...

08005070 <HAL_UART_IRQHandler>:
{
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005074:	6801      	ldr	r1, [r0, #0]
 8005076:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005078:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800507a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800507c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005080:	401a      	ands	r2, r3
 8005082:	d108      	bne.n	8005096 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005084:	f013 0f20 	tst.w	r3, #32
 8005088:	d005      	beq.n	8005096 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800508a:	f010 0f20 	tst.w	r0, #32
 800508e:	d134      	bne.n	80050fa <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005090:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005094:	d131      	bne.n	80050fa <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005096:	b12a      	cbz	r2, 80050a4 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005098:	4ab7      	ldr	r2, [pc, #732]	; (8005378 <HAL_UART_IRQHandler+0x308>)
 800509a:	402a      	ands	r2, r5
 800509c:	d133      	bne.n	8005106 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800509e:	4eb7      	ldr	r6, [pc, #732]	; (800537c <HAL_UART_IRQHandler+0x30c>)
 80050a0:	4230      	tst	r0, r6
 80050a2:	d130      	bne.n	8005106 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80050a6:	2a01      	cmp	r2, #1
 80050a8:	f000 80bb 	beq.w	8005222 <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80050b0:	d003      	beq.n	80050ba <HAL_UART_IRQHandler+0x4a>
 80050b2:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80050b6:	f040 8158 	bne.w	800536a <HAL_UART_IRQHandler+0x2fa>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80050ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050be:	d007      	beq.n	80050d0 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80050c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80050c4:	f040 8164 	bne.w	8005390 <HAL_UART_IRQHandler+0x320>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80050c8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80050cc:	f040 8160 	bne.w	8005390 <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050d4:	d003      	beq.n	80050de <HAL_UART_IRQHandler+0x6e>
 80050d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050da:	f040 8160 	bne.w	800539e <HAL_UART_IRQHandler+0x32e>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050de:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80050e2:	d003      	beq.n	80050ec <HAL_UART_IRQHandler+0x7c>
 80050e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80050e8:	f040 815d 	bne.w	80053a6 <HAL_UART_IRQHandler+0x336>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_IRQHandler+0x88>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	f2c0 815b 	blt.w	80053ae <HAL_UART_IRQHandler+0x33e>
}
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80050fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0fb      	beq.n	80050f8 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005100:	4620      	mov	r0, r4
 8005102:	4798      	blx	r3
      return;
 8005104:	e7f8      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005106:	f013 0f01 	tst.w	r3, #1
 800510a:	d009      	beq.n	8005120 <HAL_UART_IRQHandler+0xb0>
 800510c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005110:	d006      	beq.n	8005120 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005112:	2601      	movs	r6, #1
 8005114:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005116:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800511a:	4331      	orrs	r1, r6
 800511c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005120:	f013 0f02 	tst.w	r3, #2
 8005124:	d00b      	beq.n	800513e <HAL_UART_IRQHandler+0xce>
 8005126:	f015 0f01 	tst.w	r5, #1
 800512a:	d008      	beq.n	800513e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800512c:	6821      	ldr	r1, [r4, #0]
 800512e:	2602      	movs	r6, #2
 8005130:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005132:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005136:	f041 0104 	orr.w	r1, r1, #4
 800513a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800513e:	f013 0f04 	tst.w	r3, #4
 8005142:	d00b      	beq.n	800515c <HAL_UART_IRQHandler+0xec>
 8005144:	f015 0f01 	tst.w	r5, #1
 8005148:	d008      	beq.n	800515c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800514a:	6821      	ldr	r1, [r4, #0]
 800514c:	2604      	movs	r6, #4
 800514e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005150:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005154:	f041 0102 	orr.w	r1, r1, #2
 8005158:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800515c:	f013 0f08 	tst.w	r3, #8
 8005160:	d00b      	beq.n	800517a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005162:	f010 0f20 	tst.w	r0, #32
 8005166:	d100      	bne.n	800516a <HAL_UART_IRQHandler+0xfa>
 8005168:	b13a      	cbz	r2, 800517a <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	2108      	movs	r1, #8
 800516e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005170:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005174:	430a      	orrs	r2, r1
 8005176:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800517a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800517e:	d00c      	beq.n	800519a <HAL_UART_IRQHandler+0x12a>
 8005180:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005184:	d009      	beq.n	800519a <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800518c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800518e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005192:	f042 0220 	orr.w	r2, r2, #32
 8005196:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800519a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800519e:	2a00      	cmp	r2, #0
 80051a0:	d0aa      	beq.n	80050f8 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051a2:	f013 0f20 	tst.w	r3, #32
 80051a6:	d009      	beq.n	80051bc <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051a8:	f010 0f20 	tst.w	r0, #32
 80051ac:	d102      	bne.n	80051b4 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051ae:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80051b2:	d003      	beq.n	80051bc <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80051b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80051b6:	b10b      	cbz	r3, 80051bc <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80051b8:	4620      	mov	r0, r4
 80051ba:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80051bc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051c8:	d102      	bne.n	80051d0 <HAL_UART_IRQHandler+0x160>
 80051ca:	f012 0f28 	tst.w	r2, #40	; 0x28
 80051ce:	d021      	beq.n	8005214 <HAL_UART_IRQHandler+0x1a4>
        UART_EndRxTransfer(huart);
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7ff ff15 	bl	8005000 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051de:	d015      	beq.n	800520c <HAL_UART_IRQHandler+0x19c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e6:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80051e8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80051ea:	b15b      	cbz	r3, 8005204 <HAL_UART_IRQHandler+0x194>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ec:	4a64      	ldr	r2, [pc, #400]	; (8005380 <HAL_UART_IRQHandler+0x310>)
 80051ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051f0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80051f2:	f7fd f8e9 	bl	80023c8 <HAL_DMA_Abort_IT>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	f43f af7e 	beq.w	80050f8 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80051fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005200:	4798      	blx	r3
 8005202:	e779      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff ff26 	bl	8005056 <HAL_UART_ErrorCallback>
 800520a:	e775      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800520c:	4620      	mov	r0, r4
 800520e:	f7ff ff22 	bl	8005056 <HAL_UART_ErrorCallback>
 8005212:	e771      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005214:	4620      	mov	r0, r4
 8005216:	f7ff ff1e 	bl	8005056 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521a:	2300      	movs	r3, #0
 800521c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005220:	e76a      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005222:	f013 0f10 	tst.w	r3, #16
 8005226:	f43f af41 	beq.w	80050ac <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800522a:	f010 0f10 	tst.w	r0, #16
 800522e:	f43f af3d 	beq.w	80050ac <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005232:	2310      	movs	r3, #16
 8005234:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	6893      	ldr	r3, [r2, #8]
 800523a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800523e:	d06c      	beq.n	800531a <HAL_UART_IRQHandler+0x2aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005240:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005242:	680b      	ldr	r3, [r1, #0]
 8005244:	4d4f      	ldr	r5, [pc, #316]	; (8005384 <HAL_UART_IRQHandler+0x314>)
 8005246:	4850      	ldr	r0, [pc, #320]	; (8005388 <HAL_UART_IRQHandler+0x318>)
 8005248:	4283      	cmp	r3, r0
 800524a:	bf18      	it	ne
 800524c:	42ab      	cmpne	r3, r5
 800524e:	d02d      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005250:	3018      	adds	r0, #24
 8005252:	4283      	cmp	r3, r0
 8005254:	d02a      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005256:	3018      	adds	r0, #24
 8005258:	4283      	cmp	r3, r0
 800525a:	d027      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 800525c:	3018      	adds	r0, #24
 800525e:	4283      	cmp	r3, r0
 8005260:	d024      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005262:	3018      	adds	r0, #24
 8005264:	4283      	cmp	r3, r0
 8005266:	d021      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005268:	3018      	adds	r0, #24
 800526a:	4283      	cmp	r3, r0
 800526c:	d01e      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 800526e:	3018      	adds	r0, #24
 8005270:	4283      	cmp	r3, r0
 8005272:	d01b      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005274:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8005278:	4283      	cmp	r3, r0
 800527a:	d017      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 800527c:	3018      	adds	r0, #24
 800527e:	4283      	cmp	r3, r0
 8005280:	d014      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005282:	3018      	adds	r0, #24
 8005284:	4283      	cmp	r3, r0
 8005286:	d011      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005288:	3018      	adds	r0, #24
 800528a:	4283      	cmp	r3, r0
 800528c:	d00e      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 800528e:	3018      	adds	r0, #24
 8005290:	4283      	cmp	r3, r0
 8005292:	d00b      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 8005294:	3018      	adds	r0, #24
 8005296:	4283      	cmp	r3, r0
 8005298:	d008      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 800529a:	3018      	adds	r0, #24
 800529c:	4283      	cmp	r3, r0
 800529e:	d005      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 80052a0:	3018      	adds	r0, #24
 80052a2:	4283      	cmp	r3, r0
 80052a4:	d002      	beq.n	80052ac <HAL_UART_IRQHandler+0x23c>
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	e001      	b.n	80052b0 <HAL_UART_IRQHandler+0x240>
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f43f af21 	beq.w	80050f8 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052b6:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 80052ba:	4298      	cmp	r0, r3
 80052bc:	f67f af1c 	bls.w	80050f8 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80052c0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052c4:	69cb      	ldr	r3, [r1, #28]
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ca:	d10a      	bne.n	80052e2 <HAL_UART_IRQHandler+0x272>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80052d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	1ac9      	subs	r1, r1, r3
 80052d8:	b289      	uxth	r1, r1
 80052da:	4620      	mov	r0, r4
 80052dc:	f7ff fec6 	bl	800506c <HAL_UARTEx_RxEventCallback>
      return;
 80052e0:	e70a      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e2:	6813      	ldr	r3, [r2, #0]
 80052e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e8:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	6893      	ldr	r3, [r2, #8]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	6893      	ldr	r3, [r2, #8]
 80052f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fc:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80052fe:	2320      	movs	r3, #32
 8005300:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	2300      	movs	r3, #0
 8005306:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	6822      	ldr	r2, [r4, #0]
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	f023 0310 	bic.w	r3, r3, #16
 8005310:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005312:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005314:	f7fc feb8 	bl	8002088 <HAL_DMA_Abort>
 8005318:	e7d8      	b.n	80052cc <HAL_UART_IRQHandler+0x25c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800531a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800531e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005322:	b29b      	uxth	r3, r3
 8005324:	1ac9      	subs	r1, r1, r3
 8005326:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005328:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	f43f aee2 	beq.w	80050f8 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005334:	2900      	cmp	r1, #0
 8005336:	f43f aedf 	beq.w	80050f8 <HAL_UART_IRQHandler+0x88>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005340:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	6890      	ldr	r0, [r2, #8]
 8005346:	4b11      	ldr	r3, [pc, #68]	; (800538c <HAL_UART_IRQHandler+0x31c>)
 8005348:	4003      	ands	r3, r0
 800534a:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800534c:	2320      	movs	r3, #32
 800534e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	2300      	movs	r3, #0
 8005354:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005356:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	6813      	ldr	r3, [r2, #0]
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005362:	4620      	mov	r0, r4
 8005364:	f7ff fe82 	bl	800506c <HAL_UARTEx_RxEventCallback>
      return;
 8005368:	e6c6      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800536a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800536e:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005370:	4620      	mov	r0, r4
 8005372:	f000 ff67 	bl	8006244 <HAL_UARTEx_WakeupCallback>
    return;
 8005376:	e6bf      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
 8005378:	10000001 	.word	0x10000001
 800537c:	04000120 	.word	0x04000120
 8005380:	08005059 	.word	0x08005059
 8005384:	40020010 	.word	0x40020010
 8005388:	40020028 	.word	0x40020028
 800538c:	effffffe 	.word	0xeffffffe
    if (huart->TxISR != NULL)
 8005390:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005392:	2b00      	cmp	r3, #0
 8005394:	f43f aeb0 	beq.w	80050f8 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005398:	4620      	mov	r0, r4
 800539a:	4798      	blx	r3
    return;
 800539c:	e6ac      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff fe4b 	bl	800503a <UART_EndTransmit_IT>
    return;
 80053a4:	e6a8      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 ff4e 	bl	8006248 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80053ac:	e6a4      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053ae:	4620      	mov	r0, r4
 80053b0:	f000 ff49 	bl	8006246 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80053b4:	e6a0      	b.n	80050f8 <HAL_UART_IRQHandler+0x88>
 80053b6:	bf00      	nop

080053b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4604      	mov	r4, r0
  uint16_t uhMask = huart->Mask;
 80053bc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80053c4:	2a22      	cmp	r2, #34	; 0x22
 80053c6:	d005      	beq.n	80053d4 <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c8:	6802      	ldr	r2, [r0, #0]
 80053ca:	6993      	ldr	r3, [r2, #24]
 80053cc:	f043 0308 	orr.w	r3, r3, #8
 80053d0:	6193      	str	r3, [r2, #24]
  }
}
 80053d2:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053d4:	6802      	ldr	r2, [r0, #0]
 80053d6:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80053dc:	400b      	ands	r3, r1
 80053de:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80053e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80053e2:	3301      	adds	r3, #1
 80053e4:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80053e6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80053f4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e9      	bne.n	80053d2 <UART_RxISR_8BIT+0x1a>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053fe:	6802      	ldr	r2, [r0, #0]
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005406:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	6893      	ldr	r3, [r2, #8]
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005412:	2320      	movs	r3, #32
 8005414:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800541e:	2b01      	cmp	r3, #1
 8005420:	d004      	beq.n	800542c <UART_RxISR_8BIT+0x74>
        HAL_UART_RxCpltCallback(huart);
 8005422:	f7fb fe85 	bl	8001130 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	2300      	movs	r3, #0
 8005428:	66e3      	str	r3, [r4, #108]	; 0x6c
 800542a:	e7d2      	b.n	80053d2 <UART_RxISR_8BIT+0x1a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	6802      	ldr	r2, [r0, #0]
 800542e:	6813      	ldr	r3, [r2, #0]
 8005430:	f023 0310 	bic.w	r3, r3, #16
 8005434:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005436:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800543a:	f7ff fe17 	bl	800506c <HAL_UARTEx_RxEventCallback>
 800543e:	e7f2      	b.n	8005426 <UART_RxISR_8BIT+0x6e>

08005440 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005440:	b510      	push	{r4, lr}
 8005442:	4604      	mov	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005444:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005448:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800544c:	2b22      	cmp	r3, #34	; 0x22
 800544e:	d005      	beq.n	800545c <UART_RxISR_16BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005450:	6802      	ldr	r2, [r0, #0]
 8005452:	6993      	ldr	r3, [r2, #24]
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	6193      	str	r3, [r2, #24]
  }
}
 800545a:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800545c:	6803      	ldr	r3, [r0, #0]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005460:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005462:	4013      	ands	r3, r2
 8005464:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8005466:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005468:	3302      	adds	r3, #2
 800546a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800546c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800547a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ea      	bne.n	800545a <UART_RxISR_16BIT+0x1a>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005484:	6802      	ldr	r2, [r0, #0]
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	6802      	ldr	r2, [r0, #0]
 8005490:	6893      	ldr	r3, [r2, #8]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005498:	2320      	movs	r3, #32
 800549a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d004      	beq.n	80054b2 <UART_RxISR_16BIT+0x72>
        HAL_UART_RxCpltCallback(huart);
 80054a8:	f7fb fe42 	bl	8001130 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	2300      	movs	r3, #0
 80054ae:	66e3      	str	r3, [r4, #108]	; 0x6c
 80054b0:	e7d3      	b.n	800545a <UART_RxISR_16BIT+0x1a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b2:	6802      	ldr	r2, [r0, #0]
 80054b4:	6813      	ldr	r3, [r2, #0]
 80054b6:	f023 0310 	bic.w	r3, r3, #16
 80054ba:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054bc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80054c0:	f7ff fdd4 	bl	800506c <HAL_UARTEx_RxEventCallback>
 80054c4:	e7f2      	b.n	80054ac <UART_RxISR_16BIT+0x6c>
	...

080054c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80054cc:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80054d0:	6803      	ldr	r3, [r0, #0]
 80054d2:	f8d3 901c 	ldr.w	r9, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80054d6:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80054da:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054dc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80054e0:	2a22      	cmp	r2, #34	; 0x22
 80054e2:	d005      	beq.n	80054f0 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	f042 0208 	orr.w	r2, r2, #8
 80054ea:	619a      	str	r2, [r3, #24]
  }
}
 80054ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80054f2:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054f6:	e01e      	b.n	8005536 <UART_RxISR_8BIT_FIFOEN+0x6e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d161      	bne.n	80055c4 <UART_RxISR_8BIT_FIFOEN+0xfc>
      if (huart->RxXferCount == 0U)
 8005500:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005504:	b29b      	uxth	r3, r3
 8005506:	b9b3      	cbnz	r3, 8005536 <UART_RxISR_8BIT_FIFOEN+0x6e>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005510:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	6891      	ldr	r1, [r2, #8]
 8005516:	4b40      	ldr	r3, [pc, #256]	; (8005618 <UART_RxISR_8BIT_FIFOEN+0x150>)
 8005518:	400b      	ands	r3, r1
 800551a:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800551c:	2320      	movs	r3, #32
 800551e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005526:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d052      	beq.n	80055d2 <UART_RxISR_8BIT_FIFOEN+0x10a>
          HAL_UART_RxCpltCallback(huart);
 800552c:	4620      	mov	r0, r4
 800552e:	f7fb fdff 	bl	8001130 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005532:	2300      	movs	r3, #0
 8005534:	66e3      	str	r3, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005536:	2e00      	cmp	r6, #0
 8005538:	d056      	beq.n	80055e8 <UART_RxISR_8BIT_FIFOEN+0x120>
 800553a:	f019 0f20 	tst.w	r9, #32
 800553e:	d053      	beq.n	80055e8 <UART_RxISR_8BIT_FIFOEN+0x120>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005544:	b2eb      	uxtb	r3, r5
 8005546:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005548:	400b      	ands	r3, r1
 800554a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800554c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800554e:	3301      	adds	r3, #1
 8005550:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005552:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	f8d3 901c 	ldr.w	r9, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005566:	f019 0f07 	tst.w	r9, #7
 800556a:	d0c9      	beq.n	8005500 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800556c:	f019 0f01 	tst.w	r9, #1
 8005570:	d009      	beq.n	8005586 <UART_RxISR_8BIT_FIFOEN+0xbe>
 8005572:	f418 7f80 	tst.w	r8, #256	; 0x100
 8005576:	d006      	beq.n	8005586 <UART_RxISR_8BIT_FIFOEN+0xbe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005578:	2201      	movs	r2, #1
 800557a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800557c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005586:	f019 0f02 	tst.w	r9, #2
 800558a:	d00b      	beq.n	80055a4 <UART_RxISR_8BIT_FIFOEN+0xdc>
 800558c:	f017 0f01 	tst.w	r7, #1
 8005590:	d008      	beq.n	80055a4 <UART_RxISR_8BIT_FIFOEN+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	2202      	movs	r2, #2
 8005596:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005598:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800559c:	f043 0304 	orr.w	r3, r3, #4
 80055a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a4:	f019 0f04 	tst.w	r9, #4
 80055a8:	d0a6      	beq.n	80054f8 <UART_RxISR_8BIT_FIFOEN+0x30>
 80055aa:	f017 0f01 	tst.w	r7, #1
 80055ae:	d0a3      	beq.n	80054f8 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	2204      	movs	r2, #4
 80055b4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80055ba:	f043 0302 	orr.w	r3, r3, #2
 80055be:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80055c2:	e799      	b.n	80054f8 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff fd46 	bl	8005056 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80055d0:	e796      	b.n	8005500 <UART_RxISR_8BIT_FIFOEN+0x38>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	6813      	ldr	r3, [r2, #0]
 80055d6:	f023 0310 	bic.w	r3, r3, #16
 80055da:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055dc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7ff fd43 	bl	800506c <HAL_UARTEx_RxEventCallback>
 80055e6:	e7a4      	b.n	8005532 <UART_RxISR_8BIT_FIFOEN+0x6a>
    rxdatacount = huart->RxXferCount;
 80055e8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80055ec:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f43f af7c 	beq.w	80054ec <UART_RxISR_8BIT_FIFOEN+0x24>
 80055f4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80055f8:	429a      	cmp	r2, r3
 80055fa:	f67f af77 	bls.w	80054ec <UART_RxISR_8BIT_FIFOEN+0x24>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	6893      	ldr	r3, [r2, #8]
 8005602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005606:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <UART_RxISR_8BIT_FIFOEN+0x154>)
 800560a:	6723      	str	r3, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e769      	b.n	80054ec <UART_RxISR_8BIT_FIFOEN+0x24>
 8005618:	effffffe 	.word	0xeffffffe
 800561c:	080053b9 	.word	0x080053b9

08005620 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005624:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005628:	6803      	ldr	r3, [r0, #0]
 800562a:	f8d3 901c 	ldr.w	r9, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800562e:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005632:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005634:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005638:	2a22      	cmp	r2, #34	; 0x22
 800563a:	d005      	beq.n	8005648 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	f042 0208 	orr.w	r2, r2, #8
 8005642:	619a      	str	r2, [r3, #24]
  }
}
 8005644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005648:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800564a:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800564e:	e01e      	b.n	800568e <UART_RxISR_16BIT_FIFOEN+0x6e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005650:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d160      	bne.n	800571a <UART_RxISR_16BIT_FIFOEN+0xfa>
      if (huart->RxXferCount == 0U)
 8005658:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800565c:	b29b      	uxth	r3, r3
 800565e:	b9b3      	cbnz	r3, 800568e <UART_RxISR_16BIT_FIFOEN+0x6e>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	6891      	ldr	r1, [r2, #8]
 800566e:	4b40      	ldr	r3, [pc, #256]	; (8005770 <UART_RxISR_16BIT_FIFOEN+0x150>)
 8005670:	400b      	ands	r3, r1
 8005672:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005674:	2320      	movs	r3, #32
 8005676:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d051      	beq.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x108>
          HAL_UART_RxCpltCallback(huart);
 8005684:	4620      	mov	r0, r4
 8005686:	f7fb fd53 	bl	8001130 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	2300      	movs	r3, #0
 800568c:	66e3      	str	r3, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800568e:	2e00      	cmp	r6, #0
 8005690:	d055      	beq.n	800573e <UART_RxISR_16BIT_FIFOEN+0x11e>
 8005692:	f019 0f20 	tst.w	r9, #32
 8005696:	d052      	beq.n	800573e <UART_RxISR_16BIT_FIFOEN+0x11e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800569c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800569e:	402b      	ands	r3, r5
 80056a0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80056a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056a4:	3302      	adds	r3, #2
 80056a6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80056a8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	f8d3 901c 	ldr.w	r9, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056bc:	f019 0f07 	tst.w	r9, #7
 80056c0:	d0ca      	beq.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056c2:	f019 0f01 	tst.w	r9, #1
 80056c6:	d009      	beq.n	80056dc <UART_RxISR_16BIT_FIFOEN+0xbc>
 80056c8:	f418 7f80 	tst.w	r8, #256	; 0x100
 80056cc:	d006      	beq.n	80056dc <UART_RxISR_16BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056ce:	2201      	movs	r2, #1
 80056d0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056dc:	f019 0f02 	tst.w	r9, #2
 80056e0:	d00b      	beq.n	80056fa <UART_RxISR_16BIT_FIFOEN+0xda>
 80056e2:	f017 0f01 	tst.w	r7, #1
 80056e6:	d008      	beq.n	80056fa <UART_RxISR_16BIT_FIFOEN+0xda>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	2202      	movs	r2, #2
 80056ec:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80056f2:	f043 0304 	orr.w	r3, r3, #4
 80056f6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056fa:	f019 0f04 	tst.w	r9, #4
 80056fe:	d0a7      	beq.n	8005650 <UART_RxISR_16BIT_FIFOEN+0x30>
 8005700:	f017 0f01 	tst.w	r7, #1
 8005704:	d0a4      	beq.n	8005650 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	2204      	movs	r2, #4
 800570a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800570c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005718:	e79a      	b.n	8005650 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800571a:	4620      	mov	r0, r4
 800571c:	f7ff fc9b 	bl	8005056 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	2300      	movs	r3, #0
 8005722:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005726:	e797      	b.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x38>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005728:	6822      	ldr	r2, [r4, #0]
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005732:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005736:	4620      	mov	r0, r4
 8005738:	f7ff fc98 	bl	800506c <HAL_UARTEx_RxEventCallback>
 800573c:	e7a5      	b.n	800568a <UART_RxISR_16BIT_FIFOEN+0x6a>
    rxdatacount = huart->RxXferCount;
 800573e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005742:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005744:	2b00      	cmp	r3, #0
 8005746:	f43f af7d 	beq.w	8005644 <UART_RxISR_16BIT_FIFOEN+0x24>
 800574a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800574e:	429a      	cmp	r2, r3
 8005750:	f67f af78 	bls.w	8005644 <UART_RxISR_16BIT_FIFOEN+0x24>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	6893      	ldr	r3, [r2, #8]
 8005758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575c:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <UART_RxISR_16BIT_FIFOEN+0x154>)
 8005760:	6723      	str	r3, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	6813      	ldr	r3, [r2, #0]
 8005766:	f043 0320 	orr.w	r3, r3, #32
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	e76a      	b.n	8005644 <UART_RxISR_16BIT_FIFOEN+0x24>
 800576e:	bf00      	nop
 8005770:	effffffe 	.word	0xeffffffe
 8005774:	08005441 	.word	0x08005441

08005778 <UART_SetConfig>:
{
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005780:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005782:	6883      	ldr	r3, [r0, #8]
 8005784:	6902      	ldr	r2, [r0, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	6942      	ldr	r2, [r0, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	69c2      	ldr	r2, [r0, #28]
 800578e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005790:	6808      	ldr	r0, [r1, #0]
 8005792:	4a88      	ldr	r2, [pc, #544]	; (80059b4 <UART_SetConfig+0x23c>)
 8005794:	4002      	ands	r2, r0
 8005796:	4313      	orrs	r3, r2
 8005798:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	6853      	ldr	r3, [r2, #4]
 800579e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057a2:	68e1      	ldr	r1, [r4, #12]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	4b82      	ldr	r3, [pc, #520]	; (80059b8 <UART_SetConfig+0x240>)
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d001      	beq.n	80057b6 <UART_SetConfig+0x3e>
    tmpreg |= huart->Init.OneBitSampling;
 80057b2:	6a23      	ldr	r3, [r4, #32]
 80057b4:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b6:	6890      	ldr	r0, [r2, #8]
 80057b8:	4b80      	ldr	r3, [pc, #512]	; (80059bc <UART_SetConfig+0x244>)
 80057ba:	4003      	ands	r3, r0
 80057bc:	430b      	orrs	r3, r1
 80057be:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057c4:	f023 030f 	bic.w	r3, r3, #15
 80057c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057ca:	430b      	orrs	r3, r1
 80057cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <UART_SetConfig+0x248>)
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d021      	beq.n	800581a <UART_SetConfig+0xa2>
 80057d6:	4b7b      	ldr	r3, [pc, #492]	; (80059c4 <UART_SetConfig+0x24c>)
 80057d8:	429a      	cmp	r2, r3
 80057da:	f000 808c 	beq.w	80058f6 <UART_SetConfig+0x17e>
 80057de:	4b7a      	ldr	r3, [pc, #488]	; (80059c8 <UART_SetConfig+0x250>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	f000 80a2 	beq.w	800592a <UART_SetConfig+0x1b2>
 80057e6:	4b79      	ldr	r3, [pc, #484]	; (80059cc <UART_SetConfig+0x254>)
 80057e8:	429a      	cmp	r2, r3
 80057ea:	f000 80b5 	beq.w	8005958 <UART_SetConfig+0x1e0>
 80057ee:	4b78      	ldr	r3, [pc, #480]	; (80059d0 <UART_SetConfig+0x258>)
 80057f0:	429a      	cmp	r2, r3
 80057f2:	f000 80c8 	beq.w	8005986 <UART_SetConfig+0x20e>
 80057f6:	4b77      	ldr	r3, [pc, #476]	; (80059d4 <UART_SetConfig+0x25c>)
 80057f8:	429a      	cmp	r2, r3
 80057fa:	f000 80f3 	beq.w	80059e4 <UART_SetConfig+0x26c>
 80057fe:	4b76      	ldr	r3, [pc, #472]	; (80059d8 <UART_SetConfig+0x260>)
 8005800:	429a      	cmp	r2, r3
 8005802:	f000 8118 	beq.w	8005a36 <UART_SetConfig+0x2be>
 8005806:	4b75      	ldr	r3, [pc, #468]	; (80059dc <UART_SetConfig+0x264>)
 8005808:	429a      	cmp	r2, r3
 800580a:	f000 812b 	beq.w	8005a64 <UART_SetConfig+0x2ec>
 800580e:	4b6a      	ldr	r3, [pc, #424]	; (80059b8 <UART_SetConfig+0x240>)
 8005810:	429a      	cmp	r2, r3
 8005812:	f000 813e 	beq.w	8005a92 <UART_SetConfig+0x31a>
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	e033      	b.n	8005882 <UART_SetConfig+0x10a>
 800581a:	4b71      	ldr	r3, [pc, #452]	; (80059e0 <UART_SetConfig+0x268>)
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005822:	2b28      	cmp	r3, #40	; 0x28
 8005824:	d865      	bhi.n	80058f2 <UART_SetConfig+0x17a>
 8005826:	e8df f013 	tbh	[pc, r3, lsl #1]
 800582a:	0029      	.short	0x0029
 800582c:	00640064 	.word	0x00640064
 8005830:	00640064 	.word	0x00640064
 8005834:	00640064 	.word	0x00640064
 8005838:	014c0064 	.word	0x014c0064
 800583c:	00640064 	.word	0x00640064
 8005840:	00640064 	.word	0x00640064
 8005844:	00640064 	.word	0x00640064
 8005848:	002b0064 	.word	0x002b0064
 800584c:	00640064 	.word	0x00640064
 8005850:	00640064 	.word	0x00640064
 8005854:	00640064 	.word	0x00640064
 8005858:	005e0064 	.word	0x005e0064
 800585c:	00640064 	.word	0x00640064
 8005860:	00640064 	.word	0x00640064
 8005864:	00640064 	.word	0x00640064
 8005868:	00600064 	.word	0x00600064
 800586c:	00640064 	.word	0x00640064
 8005870:	00640064 	.word	0x00640064
 8005874:	00640064 	.word	0x00640064
 8005878:	00620064 	.word	0x00620064
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <UART_SetConfig+0x10a>
 8005880:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 8005882:	494d      	ldr	r1, [pc, #308]	; (80059b8 <UART_SetConfig+0x240>)
 8005884:	428a      	cmp	r2, r1
 8005886:	f000 812e 	beq.w	8005ae6 <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588a:	69e0      	ldr	r0, [r4, #28]
 800588c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005890:	f000 81b0 	beq.w	8005bf4 <UART_SetConfig+0x47c>
    switch (clocksource)
 8005894:	2b20      	cmp	r3, #32
 8005896:	f200 8209 	bhi.w	8005cac <UART_SetConfig+0x534>
 800589a:	2b20      	cmp	r3, #32
 800589c:	f200 825d 	bhi.w	8005d5a <UART_SetConfig+0x5e2>
 80058a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058a4:	0230022a 	.word	0x0230022a
 80058a8:	025b025b 	.word	0x025b025b
 80058ac:	025b0233 	.word	0x025b0233
 80058b0:	025b025b 	.word	0x025b025b
 80058b4:	025b0238 	.word	0x025b0238
 80058b8:	025b025b 	.word	0x025b025b
 80058bc:	025b025b 	.word	0x025b025b
 80058c0:	025b025b 	.word	0x025b025b
 80058c4:	025b023d 	.word	0x025b023d
 80058c8:	025b025b 	.word	0x025b025b
 80058cc:	025b025b 	.word	0x025b025b
 80058d0:	025b025b 	.word	0x025b025b
 80058d4:	025b025b 	.word	0x025b025b
 80058d8:	025b025b 	.word	0x025b025b
 80058dc:	025b025b 	.word	0x025b025b
 80058e0:	025b025b 	.word	0x025b025b
 80058e4:	0249      	.short	0x0249
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e6:	2310      	movs	r3, #16
 80058e8:	e7cb      	b.n	8005882 <UART_SetConfig+0x10a>
 80058ea:	2320      	movs	r3, #32
 80058ec:	e7c9      	b.n	8005882 <UART_SetConfig+0x10a>
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	e7c7      	b.n	8005882 <UART_SetConfig+0x10a>
 80058f2:	2380      	movs	r3, #128	; 0x80
 80058f4:	e7c5      	b.n	8005882 <UART_SetConfig+0x10a>
 80058f6:	4b3a      	ldr	r3, [pc, #232]	; (80059e0 <UART_SetConfig+0x268>)
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b05      	cmp	r3, #5
 8005900:	d811      	bhi.n	8005926 <UART_SetConfig+0x1ae>
 8005902:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005906:	0006      	.short	0x0006
 8005908:	000800e0 	.word	0x000800e0
 800590c:	000c000a 	.word	0x000c000a
 8005910:	000e      	.short	0x000e
 8005912:	2300      	movs	r3, #0
 8005914:	e7b5      	b.n	8005882 <UART_SetConfig+0x10a>
 8005916:	2308      	movs	r3, #8
 8005918:	e7b3      	b.n	8005882 <UART_SetConfig+0x10a>
 800591a:	2310      	movs	r3, #16
 800591c:	e7b1      	b.n	8005882 <UART_SetConfig+0x10a>
 800591e:	2320      	movs	r3, #32
 8005920:	e7af      	b.n	8005882 <UART_SetConfig+0x10a>
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	e7ad      	b.n	8005882 <UART_SetConfig+0x10a>
 8005926:	2380      	movs	r3, #128	; 0x80
 8005928:	e7ab      	b.n	8005882 <UART_SetConfig+0x10a>
 800592a:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <UART_SetConfig+0x268>)
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	2b05      	cmp	r3, #5
 8005934:	d80e      	bhi.n	8005954 <UART_SetConfig+0x1dc>
 8005936:	e8df f003 	tbb	[pc, r3]
 800593a:	c803      	.short	0xc803
 800593c:	0b090705 	.word	0x0b090705
 8005940:	2300      	movs	r3, #0
 8005942:	e79e      	b.n	8005882 <UART_SetConfig+0x10a>
 8005944:	2308      	movs	r3, #8
 8005946:	e79c      	b.n	8005882 <UART_SetConfig+0x10a>
 8005948:	2310      	movs	r3, #16
 800594a:	e79a      	b.n	8005882 <UART_SetConfig+0x10a>
 800594c:	2320      	movs	r3, #32
 800594e:	e798      	b.n	8005882 <UART_SetConfig+0x10a>
 8005950:	2340      	movs	r3, #64	; 0x40
 8005952:	e796      	b.n	8005882 <UART_SetConfig+0x10a>
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	e794      	b.n	8005882 <UART_SetConfig+0x10a>
 8005958:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <UART_SetConfig+0x268>)
 800595a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	2b05      	cmp	r3, #5
 8005962:	d80e      	bhi.n	8005982 <UART_SetConfig+0x20a>
 8005964:	e8df f003 	tbb	[pc, r3]
 8005968:	0705b303 	.word	0x0705b303
 800596c:	0b09      	.short	0x0b09
 800596e:	2300      	movs	r3, #0
 8005970:	e787      	b.n	8005882 <UART_SetConfig+0x10a>
 8005972:	2308      	movs	r3, #8
 8005974:	e785      	b.n	8005882 <UART_SetConfig+0x10a>
 8005976:	2310      	movs	r3, #16
 8005978:	e783      	b.n	8005882 <UART_SetConfig+0x10a>
 800597a:	2320      	movs	r3, #32
 800597c:	e781      	b.n	8005882 <UART_SetConfig+0x10a>
 800597e:	2340      	movs	r3, #64	; 0x40
 8005980:	e77f      	b.n	8005882 <UART_SetConfig+0x10a>
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	e77d      	b.n	8005882 <UART_SetConfig+0x10a>
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <UART_SetConfig+0x268>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	2b05      	cmp	r3, #5
 8005990:	d80e      	bhi.n	80059b0 <UART_SetConfig+0x238>
 8005992:	e8df f003 	tbb	[pc, r3]
 8005996:	9e03      	.short	0x9e03
 8005998:	0b090705 	.word	0x0b090705
 800599c:	2300      	movs	r3, #0
 800599e:	e770      	b.n	8005882 <UART_SetConfig+0x10a>
 80059a0:	2308      	movs	r3, #8
 80059a2:	e76e      	b.n	8005882 <UART_SetConfig+0x10a>
 80059a4:	2310      	movs	r3, #16
 80059a6:	e76c      	b.n	8005882 <UART_SetConfig+0x10a>
 80059a8:	2320      	movs	r3, #32
 80059aa:	e76a      	b.n	8005882 <UART_SetConfig+0x10a>
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	e768      	b.n	8005882 <UART_SetConfig+0x10a>
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	e766      	b.n	8005882 <UART_SetConfig+0x10a>
 80059b4:	cfff69f3 	.word	0xcfff69f3
 80059b8:	58000c00 	.word	0x58000c00
 80059bc:	11fff4ff 	.word	0x11fff4ff
 80059c0:	40011000 	.word	0x40011000
 80059c4:	40004400 	.word	0x40004400
 80059c8:	40004800 	.word	0x40004800
 80059cc:	40004c00 	.word	0x40004c00
 80059d0:	40005000 	.word	0x40005000
 80059d4:	40011400 	.word	0x40011400
 80059d8:	40007800 	.word	0x40007800
 80059dc:	40007c00 	.word	0x40007c00
 80059e0:	58024400 	.word	0x58024400
 80059e4:	4b7e      	ldr	r3, [pc, #504]	; (8005be0 <UART_SetConfig+0x468>)
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ec:	2b28      	cmp	r3, #40	; 0x28
 80059ee:	d820      	bhi.n	8005a32 <UART_SetConfig+0x2ba>
 80059f0:	e8df f003 	tbb	[pc, r3]
 80059f4:	1f1f1f15 	.word	0x1f1f1f15
 80059f8:	1f1f1f1f 	.word	0x1f1f1f1f
 80059fc:	1f1f1f71 	.word	0x1f1f1f71
 8005a00:	1f1f1f1f 	.word	0x1f1f1f1f
 8005a04:	1f1f1f17 	.word	0x1f1f1f17
 8005a08:	1f1f1f1f 	.word	0x1f1f1f1f
 8005a0c:	1f1f1f19 	.word	0x1f1f1f19
 8005a10:	1f1f1f1f 	.word	0x1f1f1f1f
 8005a14:	1f1f1f1b 	.word	0x1f1f1f1b
 8005a18:	1f1f1f1f 	.word	0x1f1f1f1f
 8005a1c:	1d          	.byte	0x1d
 8005a1d:	00          	.byte	0x00
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e72f      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a22:	2308      	movs	r3, #8
 8005a24:	e72d      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a26:	2310      	movs	r3, #16
 8005a28:	e72b      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a2a:	2320      	movs	r3, #32
 8005a2c:	e729      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	e727      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	e725      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a36:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <UART_SetConfig+0x468>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d80e      	bhi.n	8005a60 <UART_SetConfig+0x2e8>
 8005a42:	e8df f003 	tbb	[pc, r3]
 8005a46:	4a03      	.short	0x4a03
 8005a48:	0b090705 	.word	0x0b090705
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e718      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a50:	2308      	movs	r3, #8
 8005a52:	e716      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a54:	2310      	movs	r3, #16
 8005a56:	e714      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a58:	2320      	movs	r3, #32
 8005a5a:	e712      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a5c:	2340      	movs	r3, #64	; 0x40
 8005a5e:	e710      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	e70e      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a64:	4b5e      	ldr	r3, [pc, #376]	; (8005be0 <UART_SetConfig+0x468>)
 8005a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d80e      	bhi.n	8005a8e <UART_SetConfig+0x316>
 8005a70:	e8df f003 	tbb	[pc, r3]
 8005a74:	07053503 	.word	0x07053503
 8005a78:	0b09      	.short	0x0b09
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e701      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a7e:	2308      	movs	r3, #8
 8005a80:	e6ff      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a82:	2310      	movs	r3, #16
 8005a84:	e6fd      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a86:	2320      	movs	r3, #32
 8005a88:	e6fb      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	e6f9      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	e6f7      	b.n	8005882 <UART_SetConfig+0x10a>
 8005a92:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	2b05      	cmp	r3, #5
 8005a9e:	d80e      	bhi.n	8005abe <UART_SetConfig+0x346>
 8005aa0:	e8df f003 	tbb	[pc, r3]
 8005aa4:	07051f03 	.word	0x07051f03
 8005aa8:	0b09      	.short	0x0b09
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e6e9      	b.n	8005882 <UART_SetConfig+0x10a>
 8005aae:	2308      	movs	r3, #8
 8005ab0:	e6e7      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	e6e5      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	e6e3      	b.n	8005882 <UART_SetConfig+0x10a>
 8005aba:	2340      	movs	r3, #64	; 0x40
 8005abc:	e6e1      	b.n	8005882 <UART_SetConfig+0x10a>
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	e6df      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	e6dd      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	e6db      	b.n	8005882 <UART_SetConfig+0x10a>
 8005aca:	2304      	movs	r3, #4
 8005acc:	e6d9      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ace:	2304      	movs	r3, #4
 8005ad0:	e6d7      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ad2:	2304      	movs	r3, #4
 8005ad4:	e6d5      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	e6d3      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ada:	2304      	movs	r3, #4
 8005adc:	e6d1      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ade:	2304      	movs	r3, #4
 8005ae0:	e6cf      	b.n	8005882 <UART_SetConfig+0x10a>
 8005ae2:	2304      	movs	r3, #4
 8005ae4:	e6cd      	b.n	8005882 <UART_SetConfig+0x10a>
    switch (clocksource)
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d827      	bhi.n	8005b3a <UART_SetConfig+0x3c2>
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	f0c0 8127 	bcc.w	8005d3e <UART_SetConfig+0x5c6>
 8005af0:	3b02      	subs	r3, #2
 8005af2:	2b1e      	cmp	r3, #30
 8005af4:	f200 8125 	bhi.w	8005d42 <UART_SetConfig+0x5ca>
 8005af8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005afc:	01230052 	.word	0x01230052
 8005b00:	01230058 	.word	0x01230058
 8005b04:	01230123 	.word	0x01230123
 8005b08:	0123005d 	.word	0x0123005d
 8005b0c:	01230123 	.word	0x01230123
 8005b10:	01230123 	.word	0x01230123
 8005b14:	01230123 	.word	0x01230123
 8005b18:	01230062 	.word	0x01230062
 8005b1c:	01230123 	.word	0x01230123
 8005b20:	01230123 	.word	0x01230123
 8005b24:	01230123 	.word	0x01230123
 8005b28:	01230123 	.word	0x01230123
 8005b2c:	01230123 	.word	0x01230123
 8005b30:	01230123 	.word	0x01230123
 8005b34:	01230123 	.word	0x01230123
 8005b38:	006e      	.short	0x006e
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d12e      	bne.n	8005b9c <UART_SetConfig+0x424>
        pclk = (uint32_t) LSE_VALUE;
 8005b3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b44:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <UART_SetConfig+0x46c>)
 8005b46:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005b4a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b4e:	6865      	ldr	r5, [r4, #4]
 8005b50:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005b54:	4299      	cmp	r1, r3
 8005b56:	f200 80f6 	bhi.w	8005d46 <UART_SetConfig+0x5ce>
 8005b5a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005b5e:	f200 80f4 	bhi.w	8005d4a <UART_SetConfig+0x5d2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	f04f 0800 	mov.w	r8, #0
 8005b66:	b292      	uxth	r2, r2
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	f7fa fdcc 	bl	8000708 <__aeabi_uldivmod>
 8005b70:	020f      	lsls	r7, r1, #8
 8005b72:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005b76:	0206      	lsls	r6, r0, #8
 8005b78:	0868      	lsrs	r0, r5, #1
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	1830      	adds	r0, r6, r0
 8005b80:	f147 0100 	adc.w	r1, r7, #0
 8005b84:	f7fa fdc0 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b88:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <UART_SetConfig+0x470>)
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	f200 80dd 	bhi.w	8005d4e <UART_SetConfig+0x5d6>
          huart->Instance->BRR = usartdiv;
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	60d8      	str	r0, [r3, #12]
 8005b98:	4640      	mov	r0, r8
 8005b9a:	e0a2      	b.n	8005ce2 <UART_SetConfig+0x56a>
    switch (clocksource)
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	e0a0      	b.n	8005ce2 <UART_SetConfig+0x56a>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ba0:	f7fe fa0a 	bl	8003fb8 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d1cc      	bne.n	8005b42 <UART_SetConfig+0x3ca>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e09a      	b.n	8005ce2 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bac:	a803      	add	r0, sp, #12
 8005bae:	f7fe fa15 	bl	8003fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bb2:	9804      	ldr	r0, [sp, #16]
        break;
 8005bb4:	e7f6      	b.n	8005ba4 <UART_SetConfig+0x42c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bb6:	4668      	mov	r0, sp
 8005bb8:	f7fe fb0e 	bl	80041d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bbc:	9801      	ldr	r0, [sp, #4]
        break;
 8005bbe:	e7f1      	b.n	8005ba4 <UART_SetConfig+0x42c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc0:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <UART_SetConfig+0x468>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f013 0f20 	tst.w	r3, #32
 8005bc8:	d008      	beq.n	8005bdc <UART_SetConfig+0x464>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <UART_SetConfig+0x468>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005bd2:	4806      	ldr	r0, [pc, #24]	; (8005bec <UART_SetConfig+0x474>)
 8005bd4:	40d8      	lsrs	r0, r3
 8005bd6:	e7e5      	b.n	8005ba4 <UART_SetConfig+0x42c>
    switch (clocksource)
 8005bd8:	4805      	ldr	r0, [pc, #20]	; (8005bf0 <UART_SetConfig+0x478>)
 8005bda:	e7b2      	b.n	8005b42 <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 8005bdc:	4803      	ldr	r0, [pc, #12]	; (8005bec <UART_SetConfig+0x474>)
 8005bde:	e7b0      	b.n	8005b42 <UART_SetConfig+0x3ca>
 8005be0:	58024400 	.word	0x58024400
 8005be4:	0800aa50 	.word	0x0800aa50
 8005be8:	000ffcff 	.word	0x000ffcff
 8005bec:	03d09000 	.word	0x03d09000
 8005bf0:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d815      	bhi.n	8005c24 <UART_SetConfig+0x4ac>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	f200 80aa 	bhi.w	8005d52 <UART_SetConfig+0x5da>
 8005bfe:	e8df f003 	tbb	[pc, r3]
 8005c02:	3832      	.short	0x3832
 8005c04:	a83ba8a8 	.word	0xa83ba8a8
 8005c08:	a840a8a8 	.word	0xa840a8a8
 8005c0c:	a8a8a8a8 	.word	0xa8a8a8a8
 8005c10:	a845a8a8 	.word	0xa845a8a8
 8005c14:	a8a8a8a8 	.word	0xa8a8a8a8
 8005c18:	a8a8a8a8 	.word	0xa8a8a8a8
 8005c1c:	a8a8a8a8 	.word	0xa8a8a8a8
 8005c20:	a8a8      	.short	0xa8a8
 8005c22:	51          	.byte	0x51
 8005c23:	00          	.byte	0x00
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d11c      	bne.n	8005c62 <UART_SetConfig+0x4ea>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c2a:	4b4e      	ldr	r3, [pc, #312]	; (8005d64 <UART_SetConfig+0x5ec>)
 8005c2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c34:	6862      	ldr	r2, [r4, #4]
 8005c36:	0853      	lsrs	r3, r2, #1
 8005c38:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005c3c:	fbb0 f0f2 	udiv	r0, r0, r2
 8005c40:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c42:	f1a0 0210 	sub.w	r2, r0, #16
 8005c46:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	f200 8083 	bhi.w	8005d56 <UART_SetConfig+0x5de>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c50:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c54:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005c58:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	60d8      	str	r0, [r3, #12]
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e03f      	b.n	8005ce2 <UART_SetConfig+0x56a>
    switch (clocksource)
 8005c62:	2001      	movs	r0, #1
 8005c64:	e03d      	b.n	8005ce2 <UART_SetConfig+0x56a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c66:	f7fd fb95 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d1dc      	bne.n	8005c28 <UART_SetConfig+0x4b0>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e037      	b.n	8005ce2 <UART_SetConfig+0x56a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c72:	f7fd fba1 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005c76:	e7f8      	b.n	8005c6a <UART_SetConfig+0x4f2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c78:	a803      	add	r0, sp, #12
 8005c7a:	f7fe f9af 	bl	8003fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c7e:	9804      	ldr	r0, [sp, #16]
        break;
 8005c80:	e7f3      	b.n	8005c6a <UART_SetConfig+0x4f2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c82:	4668      	mov	r0, sp
 8005c84:	f7fe faa8 	bl	80041d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c88:	9801      	ldr	r0, [sp, #4]
        break;
 8005c8a:	e7ee      	b.n	8005c6a <UART_SetConfig+0x4f2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c8c:	4b36      	ldr	r3, [pc, #216]	; (8005d68 <UART_SetConfig+0x5f0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f013 0f20 	tst.w	r3, #32
 8005c94:	d008      	beq.n	8005ca8 <UART_SetConfig+0x530>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <UART_SetConfig+0x5f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005c9e:	4833      	ldr	r0, [pc, #204]	; (8005d6c <UART_SetConfig+0x5f4>)
 8005ca0:	40d8      	lsrs	r0, r3
 8005ca2:	e7e2      	b.n	8005c6a <UART_SetConfig+0x4f2>
    switch (clocksource)
 8005ca4:	4832      	ldr	r0, [pc, #200]	; (8005d70 <UART_SetConfig+0x5f8>)
 8005ca6:	e7bf      	b.n	8005c28 <UART_SetConfig+0x4b0>
          pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4830      	ldr	r0, [pc, #192]	; (8005d6c <UART_SetConfig+0x5f4>)
 8005caa:	e7bd      	b.n	8005c28 <UART_SetConfig+0x4b0>
    switch (clocksource)
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d117      	bne.n	8005ce0 <UART_SetConfig+0x568>
        pclk = (uint32_t) LSE_VALUE;
 8005cb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <UART_SetConfig+0x5ec>)
 8005cb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005cbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005cc0:	6863      	ldr	r3, [r4, #4]
 8005cc2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005cc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8005cca:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ccc:	f1a0 0210 	sub.w	r2, r0, #16
 8005cd0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d842      	bhi.n	8005d5e <UART_SetConfig+0x5e6>
        huart->Instance->BRR = usartdiv;
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	60d8      	str	r0, [r3, #12]
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e000      	b.n	8005ce2 <UART_SetConfig+0x56a>
    switch (clocksource)
 8005ce0:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ce8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005cf0:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005cf2:	b006      	add	sp, #24
 8005cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf8:	f7fd fb4c 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d1d9      	bne.n	8005cb4 <UART_SetConfig+0x53c>
 8005d00:	2000      	movs	r0, #0
 8005d02:	e7ee      	b.n	8005ce2 <UART_SetConfig+0x56a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d04:	f7fd fb58 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005d08:	e7f8      	b.n	8005cfc <UART_SetConfig+0x584>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d0a:	a803      	add	r0, sp, #12
 8005d0c:	f7fe f966 	bl	8003fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d10:	9804      	ldr	r0, [sp, #16]
        break;
 8005d12:	e7f3      	b.n	8005cfc <UART_SetConfig+0x584>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d14:	4668      	mov	r0, sp
 8005d16:	f7fe fa5f 	bl	80041d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d1a:	9801      	ldr	r0, [sp, #4]
        break;
 8005d1c:	e7ee      	b.n	8005cfc <UART_SetConfig+0x584>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <UART_SetConfig+0x5f0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f013 0f20 	tst.w	r3, #32
 8005d26:	d008      	beq.n	8005d3a <UART_SetConfig+0x5c2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <UART_SetConfig+0x5f0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005d30:	480e      	ldr	r0, [pc, #56]	; (8005d6c <UART_SetConfig+0x5f4>)
 8005d32:	40d8      	lsrs	r0, r3
 8005d34:	e7e2      	b.n	8005cfc <UART_SetConfig+0x584>
    switch (clocksource)
 8005d36:	480e      	ldr	r0, [pc, #56]	; (8005d70 <UART_SetConfig+0x5f8>)
 8005d38:	e7bc      	b.n	8005cb4 <UART_SetConfig+0x53c>
          pclk = (uint32_t) HSI_VALUE;
 8005d3a:	480c      	ldr	r0, [pc, #48]	; (8005d6c <UART_SetConfig+0x5f4>)
 8005d3c:	e7ba      	b.n	8005cb4 <UART_SetConfig+0x53c>
    switch (clocksource)
 8005d3e:	2001      	movs	r0, #1
 8005d40:	e7cf      	b.n	8005ce2 <UART_SetConfig+0x56a>
 8005d42:	2001      	movs	r0, #1
 8005d44:	e7cd      	b.n	8005ce2 <UART_SetConfig+0x56a>
        ret = HAL_ERROR;
 8005d46:	2001      	movs	r0, #1
 8005d48:	e7cb      	b.n	8005ce2 <UART_SetConfig+0x56a>
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	e7c9      	b.n	8005ce2 <UART_SetConfig+0x56a>
          ret = HAL_ERROR;
 8005d4e:	2001      	movs	r0, #1
 8005d50:	e7c7      	b.n	8005ce2 <UART_SetConfig+0x56a>
    switch (clocksource)
 8005d52:	2001      	movs	r0, #1
 8005d54:	e7c5      	b.n	8005ce2 <UART_SetConfig+0x56a>
        ret = HAL_ERROR;
 8005d56:	2001      	movs	r0, #1
 8005d58:	e7c3      	b.n	8005ce2 <UART_SetConfig+0x56a>
    switch (clocksource)
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e7c1      	b.n	8005ce2 <UART_SetConfig+0x56a>
        ret = HAL_ERROR;
 8005d5e:	2001      	movs	r0, #1
 8005d60:	e7bf      	b.n	8005ce2 <UART_SetConfig+0x56a>
 8005d62:	bf00      	nop
 8005d64:	0800aa50 	.word	0x0800aa50
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	03d09000 	.word	0x03d09000
 8005d70:	003d0900 	.word	0x003d0900

08005d74 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005d76:	f013 0f01 	tst.w	r3, #1
 8005d7a:	d006      	beq.n	8005d8a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d7c:	6802      	ldr	r2, [r0, #0]
 8005d7e:	6853      	ldr	r3, [r2, #4]
 8005d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d84:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005d86:	430b      	orrs	r3, r1
 8005d88:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005d8c:	f013 0f02 	tst.w	r3, #2
 8005d90:	d006      	beq.n	8005da0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d92:	6802      	ldr	r2, [r0, #0]
 8005d94:	6853      	ldr	r3, [r2, #4]
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005da2:	f013 0f04 	tst.w	r3, #4
 8005da6:	d006      	beq.n	8005db6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da8:	6802      	ldr	r2, [r0, #0]
 8005daa:	6853      	ldr	r3, [r2, #4]
 8005dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005db2:	430b      	orrs	r3, r1
 8005db4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005db6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005db8:	f013 0f08 	tst.w	r3, #8
 8005dbc:	d006      	beq.n	8005dcc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dbe:	6802      	ldr	r2, [r0, #0]
 8005dc0:	6853      	ldr	r3, [r2, #4]
 8005dc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dce:	f013 0f10 	tst.w	r3, #16
 8005dd2:	d006      	beq.n	8005de2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd4:	6802      	ldr	r2, [r0, #0]
 8005dd6:	6893      	ldr	r3, [r2, #8]
 8005dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ddc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005dde:	430b      	orrs	r3, r1
 8005de0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005de2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005de4:	f013 0f20 	tst.w	r3, #32
 8005de8:	d006      	beq.n	8005df8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dea:	6802      	ldr	r2, [r0, #0]
 8005dec:	6893      	ldr	r3, [r2, #8]
 8005dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005df4:	430b      	orrs	r3, r1
 8005df6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dfa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dfe:	d00a      	beq.n	8005e16 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e00:	6802      	ldr	r2, [r0, #0]
 8005e02:	6853      	ldr	r3, [r2, #4]
 8005e04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e08:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e14:	d00b      	beq.n	8005e2e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e1c:	d006      	beq.n	8005e2c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e1e:	6802      	ldr	r2, [r0, #0]
 8005e20:	6853      	ldr	r3, [r2, #4]
 8005e22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e26:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6053      	str	r3, [r2, #4]
}
 8005e2c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e2e:	6802      	ldr	r2, [r0, #0]
 8005e30:	6853      	ldr	r3, [r2, #4]
 8005e32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e36:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6053      	str	r3, [r2, #4]
 8005e3c:	e7eb      	b.n	8005e16 <UART_AdvFeatureConfig+0xa2>

08005e3e <UART_WaitOnFlagUntilTimeout>:
{
 8005e3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e42:	4605      	mov	r5, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	4616      	mov	r6, r2
 8005e48:	4699      	mov	r9, r3
 8005e4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4e:	682c      	ldr	r4, [r5, #0]
 8005e50:	69e4      	ldr	r4, [r4, #28]
 8005e52:	ea37 0304 	bics.w	r3, r7, r4
 8005e56:	bf0c      	ite	eq
 8005e58:	2401      	moveq	r4, #1
 8005e5a:	2400      	movne	r4, #0
 8005e5c:	42b4      	cmp	r4, r6
 8005e5e:	d141      	bne.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0xa6>
    if (Timeout != HAL_MAX_DELAY)
 8005e60:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005e64:	d0f3      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e66:	f7fc f887 	bl	8001f78 <HAL_GetTick>
 8005e6a:	eba0 0009 	sub.w	r0, r0, r9
 8005e6e:	4540      	cmp	r0, r8
 8005e70:	d824      	bhi.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x7e>
 8005e72:	f1b8 0f00 	cmp.w	r8, #0
 8005e76:	d021      	beq.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f012 0f04 	tst.w	r2, #4
 8005e80:	d0e5      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005e88:	d0e1      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e8e:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e90:	682a      	ldr	r2, [r5, #0]
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e98:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9a:	682a      	ldr	r2, [r5, #0]
 8005e9c:	6893      	ldr	r3, [r2, #8]
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005eb8:	2003      	movs	r0, #3
 8005eba:	e014      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ebc:	682a      	ldr	r2, [r5, #0]
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ec4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	682a      	ldr	r2, [r5, #0]
 8005ec8:	6893      	ldr	r3, [r2, #8]
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005eda:	2300      	movs	r3, #0
 8005edc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005ee0:	2003      	movs	r0, #3
 8005ee2:	e000      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xa8>
  return HAL_OK;
 8005ee4:	2000      	movs	r0, #0
}
 8005ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005eea <HAL_UART_Transmit>:
{
 8005eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d15c      	bne.n	8005fb4 <HAL_UART_Transmit+0xca>
 8005efa:	4604      	mov	r4, r0
 8005efc:	460d      	mov	r5, r1
 8005efe:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005f00:	fab2 f382 	clz	r3, r2
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	2900      	cmp	r1, #0
 8005f08:	bf08      	it	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d155      	bne.n	8005fbc <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8005f10:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d053      	beq.n	8005fc0 <HAL_UART_Transmit+0xd6>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f24:	2321      	movs	r3, #33	; 0x21
 8005f26:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8005f2a:	f7fc f825 	bl	8001f78 <HAL_GetTick>
 8005f2e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8005f30:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f34:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f38:	68a3      	ldr	r3, [r4, #8]
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3e:	d005      	beq.n	8005f4c <HAL_UART_Transmit+0x62>
      pdata16bits = NULL;
 8005f40:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8005f44:	2300      	movs	r3, #0
 8005f46:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8005f4a:	e014      	b.n	8005f76 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	b113      	cbz	r3, 8005f56 <HAL_UART_Transmit+0x6c>
      pdata16bits = NULL;
 8005f50:	f04f 0800 	mov.w	r8, #0
 8005f54:	e7f6      	b.n	8005f44 <HAL_UART_Transmit+0x5a>
      pdata16bits = (uint16_t *) pData;
 8005f56:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005f58:	2500      	movs	r5, #0
 8005f5a:	e7f3      	b.n	8005f44 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f5c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f66:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005f68:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	3a01      	subs	r2, #1
 8005f70:	b292      	uxth	r2, r2
 8005f72:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f76:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	b173      	cbz	r3, 8005f9c <HAL_UART_Transmit+0xb2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f7e:	9600      	str	r6, [sp, #0]
 8005f80:	463b      	mov	r3, r7
 8005f82:	2200      	movs	r2, #0
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	4620      	mov	r0, r4
 8005f88:	f7ff ff59 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 8005f8c:	b9d0      	cbnz	r0, 8005fc4 <HAL_UART_Transmit+0xda>
      if (pdata8bits == NULL)
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	d0e4      	beq.n	8005f5c <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f92:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f9a:	e7e5      	b.n	8005f68 <HAL_UART_Transmit+0x7e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f9c:	9600      	str	r6, [sp, #0]
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2140      	movs	r1, #64	; 0x40
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff ff4a 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 8005faa:	b968      	cbnz	r0, 8005fc8 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8005fac:	2320      	movs	r3, #32
 8005fae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8005fb2:	e000      	b.n	8005fb6 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 8005fb4:	2002      	movs	r0, #2
}
 8005fb6:	b002      	add	sp, #8
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	e7fa      	b.n	8005fb6 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005fc0:	2002      	movs	r0, #2
 8005fc2:	e7f8      	b.n	8005fb6 <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 8005fc4:	2003      	movs	r0, #3
 8005fc6:	e7f6      	b.n	8005fb6 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 8005fc8:	2003      	movs	r0, #3
 8005fca:	e7f4      	b.n	8005fb6 <HAL_UART_Transmit+0xcc>

08005fcc <UART_CheckIdleState>:
{
 8005fcc:	b530      	push	{r4, r5, lr}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005fd8:	f7fb ffce 	bl	8001f78 <HAL_GetTick>
 8005fdc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f013 0f08 	tst.w	r3, #8
 8005fe6:	d10f      	bne.n	8006008 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f013 0f04 	tst.w	r3, #4
 8005ff0:	d118      	bne.n	8006024 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005ff8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006000:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006004:	b003      	add	sp, #12
 8006006:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	4603      	mov	r3, r0
 8006010:	2200      	movs	r2, #0
 8006012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff ff11 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 800601c:	2800      	cmp	r0, #0
 800601e:	d0e3      	beq.n	8005fe8 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006020:	2003      	movs	r0, #3
 8006022:	e7ef      	b.n	8006004 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	462b      	mov	r3, r5
 800602c:	2200      	movs	r2, #0
 800602e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006032:	4620      	mov	r0, r4
 8006034:	f7ff ff03 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 8006038:	2800      	cmp	r0, #0
 800603a:	d0da      	beq.n	8005ff2 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800603c:	2003      	movs	r0, #3
 800603e:	e7e1      	b.n	8006004 <UART_CheckIdleState+0x38>

08006040 <HAL_UART_Init>:
  if (huart == NULL)
 8006040:	b378      	cbz	r0, 80060a2 <HAL_UART_Init+0x62>
{
 8006042:	b510      	push	{r4, lr}
 8006044:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006046:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800604a:	b30b      	cbz	r3, 8006090 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800604c:	2324      	movs	r3, #36	; 0x24
 800604e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	6813      	ldr	r3, [r2, #0]
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff fb8b 	bl	8005778 <UART_SetConfig>
 8006062:	2801      	cmp	r0, #1
 8006064:	d013      	beq.n	800608e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006068:	b9bb      	cbnz	r3, 800609a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	6853      	ldr	r3, [r2, #4]
 800606e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006072:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	6893      	ldr	r3, [r2, #8]
 8006078:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800607c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	6813      	ldr	r3, [r2, #0]
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006088:	4620      	mov	r0, r4
 800608a:	f7ff ff9f 	bl	8005fcc <UART_CheckIdleState>
}
 800608e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006090:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006094:	f7fb fdc4 	bl	8001c20 <HAL_UART_MspInit>
 8006098:	e7d8      	b.n	800604c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff fe6a 	bl	8005d74 <UART_AdvFeatureConfig>
 80060a0:	e7e3      	b.n	800606a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80060a2:	2001      	movs	r0, #1
}
 80060a4:	4770      	bx	lr
	...

080060a8 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 80060a8:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80060aa:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80060ae:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80060b6:	6883      	ldr	r3, [r0, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d006      	beq.n	80060cc <UART_Start_Receive_IT+0x24>
 80060be:	b9a3      	cbnz	r3, 80060ea <UART_Start_Receive_IT+0x42>
 80060c0:	6903      	ldr	r3, [r0, #16]
 80060c2:	b973      	cbnz	r3, 80060e2 <UART_Start_Receive_IT+0x3a>
 80060c4:	23ff      	movs	r3, #255	; 0xff
 80060c6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060ca:	e014      	b.n	80060f6 <UART_Start_Receive_IT+0x4e>
 80060cc:	6903      	ldr	r3, [r0, #16]
 80060ce:	b923      	cbnz	r3, 80060da <UART_Start_Receive_IT+0x32>
 80060d0:	f240 13ff 	movw	r3, #511	; 0x1ff
 80060d4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060d8:	e00d      	b.n	80060f6 <UART_Start_Receive_IT+0x4e>
 80060da:	23ff      	movs	r3, #255	; 0xff
 80060dc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060e0:	e009      	b.n	80060f6 <UART_Start_Receive_IT+0x4e>
 80060e2:	237f      	movs	r3, #127	; 0x7f
 80060e4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060e8:	e005      	b.n	80060f6 <UART_Start_Receive_IT+0x4e>
 80060ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ee:	d021      	beq.n	8006134 <UART_Start_Receive_IT+0x8c>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060fc:	2322      	movs	r3, #34	; 0x22
 80060fe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006102:	6801      	ldr	r1, [r0, #0]
 8006104:	688b      	ldr	r3, [r1, #8]
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	608b      	str	r3, [r1, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800610c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006112:	d019      	beq.n	8006148 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006114:	6883      	ldr	r3, [r0, #8]
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	d033      	beq.n	8006184 <UART_Start_Receive_IT+0xdc>
      huart->RxISR = UART_RxISR_8BIT;
 800611c:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <UART_Start_Receive_IT+0xe8>)
 800611e:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006120:	2300      	movs	r3, #0
 8006122:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006126:	6802      	ldr	r2, [r0, #0]
 8006128:	6813      	ldr	r3, [r2, #0]
 800612a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800612e:	6013      	str	r3, [r2, #0]
}
 8006130:	2000      	movs	r0, #0
 8006132:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006134:	6903      	ldr	r3, [r0, #16]
 8006136:	b91b      	cbnz	r3, 8006140 <UART_Start_Receive_IT+0x98>
 8006138:	237f      	movs	r3, #127	; 0x7f
 800613a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800613e:	e7da      	b.n	80060f6 <UART_Start_Receive_IT+0x4e>
 8006140:	233f      	movs	r3, #63	; 0x3f
 8006142:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006146:	e7d6      	b.n	80060f6 <UART_Start_Receive_IT+0x4e>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006148:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800614c:	4293      	cmp	r3, r2
 800614e:	d8e1      	bhi.n	8006114 <UART_Start_Receive_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006150:	6883      	ldr	r3, [r0, #8]
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d00f      	beq.n	8006178 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006158:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <UART_Start_Receive_IT+0xec>)
 800615a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800615c:	2300      	movs	r3, #0
 800615e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006162:	6802      	ldr	r2, [r0, #0]
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616a:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800616c:	6802      	ldr	r2, [r0, #0]
 800616e:	6893      	ldr	r3, [r2, #8]
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006174:	6093      	str	r3, [r2, #8]
 8006176:	e7db      	b.n	8006130 <UART_Start_Receive_IT+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006178:	6903      	ldr	r3, [r0, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ec      	bne.n	8006158 <UART_Start_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <UART_Start_Receive_IT+0xf0>)
 8006180:	6703      	str	r3, [r0, #112]	; 0x70
 8006182:	e7eb      	b.n	800615c <UART_Start_Receive_IT+0xb4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006184:	6903      	ldr	r3, [r0, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1c8      	bne.n	800611c <UART_Start_Receive_IT+0x74>
      huart->RxISR = UART_RxISR_16BIT;
 800618a:	4b04      	ldr	r3, [pc, #16]	; (800619c <UART_Start_Receive_IT+0xf4>)
 800618c:	6703      	str	r3, [r0, #112]	; 0x70
 800618e:	e7c7      	b.n	8006120 <UART_Start_Receive_IT+0x78>
 8006190:	080053b9 	.word	0x080053b9
 8006194:	080054c9 	.word	0x080054c9
 8006198:	08005621 	.word	0x08005621
 800619c:	08005441 	.word	0x08005441

080061a0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80061a0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d11f      	bne.n	80061e8 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80061a8:	fab2 f382 	clz	r3, r2
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	2900      	cmp	r1, #0
 80061b0:	bf08      	it	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	b9d3      	cbnz	r3, 80061ec <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 80061b6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d018      	beq.n	80061f0 <HAL_UART_Receive_IT+0x50>
{
 80061be:	b510      	push	{r4, lr}
    __HAL_LOCK(huart);
 80061c0:	2301      	movs	r3, #1
 80061c2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	2300      	movs	r3, #0
 80061c8:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061ca:	6803      	ldr	r3, [r0, #0]
 80061cc:	4c09      	ldr	r4, [pc, #36]	; (80061f4 <HAL_UART_Receive_IT+0x54>)
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	d007      	beq.n	80061e2 <HAL_UART_Receive_IT+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061d2:	685c      	ldr	r4, [r3, #4]
 80061d4:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 80061d8:	d003      	beq.n	80061e2 <HAL_UART_Receive_IT+0x42>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061da:	681c      	ldr	r4, [r3, #0]
 80061dc:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 80061e0:	601c      	str	r4, [r3, #0]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80061e2:	f7ff ff61 	bl	80060a8 <UART_Start_Receive_IT>
}
 80061e6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80061e8:	2002      	movs	r0, #2
 80061ea:	4770      	bx	lr
      return HAL_ERROR;
 80061ec:	2001      	movs	r0, #1
 80061ee:	4770      	bx	lr
    __HAL_LOCK(huart);
 80061f0:	2002      	movs	r0, #2
}
 80061f2:	4770      	bx	lr
 80061f4:	58000c00 	.word	0x58000c00

080061f8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80061fa:	b92b      	cbnz	r3, 8006208 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006202:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006206:	4770      	bx	lr
{
 8006208:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800620a:	6803      	ldr	r3, [r0, #0]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006212:	6899      	ldr	r1, [r3, #8]
 8006214:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006216:	4d09      	ldr	r5, [pc, #36]	; (800623c <UARTEx_SetNbDataToProcess+0x44>)
 8006218:	5c6b      	ldrb	r3, [r5, r1]
 800621a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800621c:	4c08      	ldr	r4, [pc, #32]	; (8006240 <UARTEx_SetNbDataToProcess+0x48>)
 800621e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006220:	fb93 f3f1 	sdiv	r3, r3, r1
 8006224:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006228:	5cab      	ldrb	r3, [r5, r2]
 800622a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800622c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800622e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006232:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006236:	bc30      	pop	{r4, r5}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	0800aa70 	.word	0x0800aa70
 8006240:	0800aa68 	.word	0x0800aa68

08006244 <HAL_UARTEx_WakeupCallback>:
}
 8006244:	4770      	bx	lr

08006246 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006246:	4770      	bx	lr

08006248 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006248:	4770      	bx	lr

0800624a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800624a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800624e:	2b01      	cmp	r3, #1
 8006250:	d018      	beq.n	8006284 <HAL_UARTEx_DisableFifoMode+0x3a>
 8006252:	2301      	movs	r3, #1
 8006254:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	2324      	movs	r3, #36	; 0x24
 800625a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	f021 0101 	bic.w	r1, r1, #1
 8006268:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800626a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800626e:	2300      	movs	r3, #0
 8006270:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006272:	6801      	ldr	r1, [r0, #0]
 8006274:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006276:	2220      	movs	r2, #32
 8006278:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800627c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006280:	4618      	mov	r0, r3
 8006282:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006284:	2002      	movs	r0, #2
}
 8006286:	4770      	bx	lr

08006288 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006288:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800628a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800628e:	2b01      	cmp	r3, #1
 8006290:	d01d      	beq.n	80062ce <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006292:	4604      	mov	r4, r0
 8006294:	2301      	movs	r3, #1
 8006296:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800629a:	2324      	movs	r3, #36	; 0x24
 800629c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a0:	6803      	ldr	r3, [r0, #0]
 80062a2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062ac:	6802      	ldr	r2, [r0, #0]
 80062ae:	6893      	ldr	r3, [r2, #8]
 80062b0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80062b4:	4319      	orrs	r1, r3
 80062b6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80062b8:	f7ff ff9e 	bl	80061f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	2320      	movs	r3, #32
 80062c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80062c6:	2000      	movs	r0, #0
 80062c8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80062ce:	2002      	movs	r0, #2
 80062d0:	e7fc      	b.n	80062cc <HAL_UARTEx_SetTxFifoThreshold+0x44>

080062d2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80062d2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80062d4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d01d      	beq.n	8006318 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80062dc:	4604      	mov	r4, r0
 80062de:	2301      	movs	r3, #1
 80062e0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80062e4:	2324      	movs	r3, #36	; 0x24
 80062e6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ea:	6803      	ldr	r3, [r0, #0]
 80062ec:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062f6:	6802      	ldr	r2, [r0, #0]
 80062f8:	6893      	ldr	r3, [r2, #8]
 80062fa:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80062fe:	4319      	orrs	r1, r3
 8006300:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006302:	f7ff ff79 	bl	80061f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800630a:	2320      	movs	r3, #32
 800630c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006310:	2000      	movs	r0, #0
 8006312:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006316:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006318:	2002      	movs	r0, #2
 800631a:	e7fc      	b.n	8006316 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800631c <__errno>:
 800631c:	4b01      	ldr	r3, [pc, #4]	; (8006324 <__errno+0x8>)
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000024 	.word	0x20000024

08006328 <__libc_init_array>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4d0d      	ldr	r5, [pc, #52]	; (8006360 <__libc_init_array+0x38>)
 800632c:	4c0d      	ldr	r4, [pc, #52]	; (8006364 <__libc_init_array+0x3c>)
 800632e:	1b64      	subs	r4, r4, r5
 8006330:	10a4      	asrs	r4, r4, #2
 8006332:	2600      	movs	r6, #0
 8006334:	42a6      	cmp	r6, r4
 8006336:	d109      	bne.n	800634c <__libc_init_array+0x24>
 8006338:	4d0b      	ldr	r5, [pc, #44]	; (8006368 <__libc_init_array+0x40>)
 800633a:	4c0c      	ldr	r4, [pc, #48]	; (800636c <__libc_init_array+0x44>)
 800633c:	f004 fb74 	bl	800aa28 <_init>
 8006340:	1b64      	subs	r4, r4, r5
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	2600      	movs	r6, #0
 8006346:	42a6      	cmp	r6, r4
 8006348:	d105      	bne.n	8006356 <__libc_init_array+0x2e>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006350:	4798      	blx	r3
 8006352:	3601      	adds	r6, #1
 8006354:	e7ee      	b.n	8006334 <__libc_init_array+0xc>
 8006356:	f855 3b04 	ldr.w	r3, [r5], #4
 800635a:	4798      	blx	r3
 800635c:	3601      	adds	r6, #1
 800635e:	e7f2      	b.n	8006346 <__libc_init_array+0x1e>
 8006360:	0800af34 	.word	0x0800af34
 8006364:	0800af34 	.word	0x0800af34
 8006368:	0800af34 	.word	0x0800af34
 800636c:	0800af38 	.word	0x0800af38

08006370 <memset>:
 8006370:	4402      	add	r2, r0
 8006372:	4603      	mov	r3, r0
 8006374:	4293      	cmp	r3, r2
 8006376:	d100      	bne.n	800637a <memset+0xa>
 8006378:	4770      	bx	lr
 800637a:	f803 1b01 	strb.w	r1, [r3], #1
 800637e:	e7f9      	b.n	8006374 <memset+0x4>

08006380 <__cvt>:
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	ed2d 8b02 	vpush	{d8}
 8006386:	eeb0 8b40 	vmov.f64	d8, d0
 800638a:	b085      	sub	sp, #20
 800638c:	4617      	mov	r7, r2
 800638e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006390:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006392:	ee18 2a90 	vmov	r2, s17
 8006396:	f025 0520 	bic.w	r5, r5, #32
 800639a:	2a00      	cmp	r2, #0
 800639c:	bfb6      	itet	lt
 800639e:	222d      	movlt	r2, #45	; 0x2d
 80063a0:	2200      	movge	r2, #0
 80063a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80063a6:	2d46      	cmp	r5, #70	; 0x46
 80063a8:	460c      	mov	r4, r1
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	d004      	beq.n	80063b8 <__cvt+0x38>
 80063ae:	2d45      	cmp	r5, #69	; 0x45
 80063b0:	d100      	bne.n	80063b4 <__cvt+0x34>
 80063b2:	3401      	adds	r4, #1
 80063b4:	2102      	movs	r1, #2
 80063b6:	e000      	b.n	80063ba <__cvt+0x3a>
 80063b8:	2103      	movs	r1, #3
 80063ba:	ab03      	add	r3, sp, #12
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	ab02      	add	r3, sp, #8
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	4622      	mov	r2, r4
 80063c4:	4633      	mov	r3, r6
 80063c6:	eeb0 0b48 	vmov.f64	d0, d8
 80063ca:	f001 fd51 	bl	8007e70 <_dtoa_r>
 80063ce:	2d47      	cmp	r5, #71	; 0x47
 80063d0:	d109      	bne.n	80063e6 <__cvt+0x66>
 80063d2:	07fb      	lsls	r3, r7, #31
 80063d4:	d407      	bmi.n	80063e6 <__cvt+0x66>
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063da:	1a1b      	subs	r3, r3, r0
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	b005      	add	sp, #20
 80063e0:	ecbd 8b02 	vpop	{d8}
 80063e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e6:	2d46      	cmp	r5, #70	; 0x46
 80063e8:	eb00 0204 	add.w	r2, r0, r4
 80063ec:	d10c      	bne.n	8006408 <__cvt+0x88>
 80063ee:	7803      	ldrb	r3, [r0, #0]
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	d107      	bne.n	8006404 <__cvt+0x84>
 80063f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80063f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fc:	bf1c      	itt	ne
 80063fe:	f1c4 0401 	rsbne	r4, r4, #1
 8006402:	6034      	strne	r4, [r6, #0]
 8006404:	6833      	ldr	r3, [r6, #0]
 8006406:	441a      	add	r2, r3
 8006408:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800640c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006410:	bf08      	it	eq
 8006412:	9203      	streq	r2, [sp, #12]
 8006414:	2130      	movs	r1, #48	; 0x30
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	4293      	cmp	r3, r2
 800641a:	d2dc      	bcs.n	80063d6 <__cvt+0x56>
 800641c:	1c5c      	adds	r4, r3, #1
 800641e:	9403      	str	r4, [sp, #12]
 8006420:	7019      	strb	r1, [r3, #0]
 8006422:	e7f8      	b.n	8006416 <__cvt+0x96>

08006424 <__exponent>:
 8006424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006426:	4603      	mov	r3, r0
 8006428:	2900      	cmp	r1, #0
 800642a:	bfb8      	it	lt
 800642c:	4249      	neglt	r1, r1
 800642e:	f803 2b02 	strb.w	r2, [r3], #2
 8006432:	bfb4      	ite	lt
 8006434:	222d      	movlt	r2, #45	; 0x2d
 8006436:	222b      	movge	r2, #43	; 0x2b
 8006438:	2909      	cmp	r1, #9
 800643a:	7042      	strb	r2, [r0, #1]
 800643c:	dd2a      	ble.n	8006494 <__exponent+0x70>
 800643e:	f10d 0407 	add.w	r4, sp, #7
 8006442:	46a4      	mov	ip, r4
 8006444:	270a      	movs	r7, #10
 8006446:	46a6      	mov	lr, r4
 8006448:	460a      	mov	r2, r1
 800644a:	fb91 f6f7 	sdiv	r6, r1, r7
 800644e:	fb07 1516 	mls	r5, r7, r6, r1
 8006452:	3530      	adds	r5, #48	; 0x30
 8006454:	2a63      	cmp	r2, #99	; 0x63
 8006456:	f104 34ff 	add.w	r4, r4, #4294967295
 800645a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800645e:	4631      	mov	r1, r6
 8006460:	dcf1      	bgt.n	8006446 <__exponent+0x22>
 8006462:	3130      	adds	r1, #48	; 0x30
 8006464:	f1ae 0502 	sub.w	r5, lr, #2
 8006468:	f804 1c01 	strb.w	r1, [r4, #-1]
 800646c:	1c44      	adds	r4, r0, #1
 800646e:	4629      	mov	r1, r5
 8006470:	4561      	cmp	r1, ip
 8006472:	d30a      	bcc.n	800648a <__exponent+0x66>
 8006474:	f10d 0209 	add.w	r2, sp, #9
 8006478:	eba2 020e 	sub.w	r2, r2, lr
 800647c:	4565      	cmp	r5, ip
 800647e:	bf88      	it	hi
 8006480:	2200      	movhi	r2, #0
 8006482:	4413      	add	r3, r2
 8006484:	1a18      	subs	r0, r3, r0
 8006486:	b003      	add	sp, #12
 8006488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800648e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006492:	e7ed      	b.n	8006470 <__exponent+0x4c>
 8006494:	2330      	movs	r3, #48	; 0x30
 8006496:	3130      	adds	r1, #48	; 0x30
 8006498:	7083      	strb	r3, [r0, #2]
 800649a:	70c1      	strb	r1, [r0, #3]
 800649c:	1d03      	adds	r3, r0, #4
 800649e:	e7f1      	b.n	8006484 <__exponent+0x60>

080064a0 <_printf_float>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	b08b      	sub	sp, #44	; 0x2c
 80064a6:	460c      	mov	r4, r1
 80064a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80064ac:	4616      	mov	r6, r2
 80064ae:	461f      	mov	r7, r3
 80064b0:	4605      	mov	r5, r0
 80064b2:	f002 fdcf 	bl	8009054 <_localeconv_r>
 80064b6:	f8d0 b000 	ldr.w	fp, [r0]
 80064ba:	4658      	mov	r0, fp
 80064bc:	f7f9 ff10 	bl	80002e0 <strlen>
 80064c0:	2300      	movs	r3, #0
 80064c2:	9308      	str	r3, [sp, #32]
 80064c4:	f8d8 3000 	ldr.w	r3, [r8]
 80064c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	3307      	adds	r3, #7
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	f103 0108 	add.w	r1, r3, #8
 80064d8:	f8c8 1000 	str.w	r1, [r8]
 80064dc:	4682      	mov	sl, r0
 80064de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80064e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006748 <_printf_float+0x2a8>
 80064ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80064ee:	eeb0 6bc0 	vabs.f64	d6, d0
 80064f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80064f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fa:	dd24      	ble.n	8006546 <_printf_float+0xa6>
 80064fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006504:	d502      	bpl.n	800650c <_printf_float+0x6c>
 8006506:	232d      	movs	r3, #45	; 0x2d
 8006508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800650c:	4b90      	ldr	r3, [pc, #576]	; (8006750 <_printf_float+0x2b0>)
 800650e:	4891      	ldr	r0, [pc, #580]	; (8006754 <_printf_float+0x2b4>)
 8006510:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006514:	bf94      	ite	ls
 8006516:	4698      	movls	r8, r3
 8006518:	4680      	movhi	r8, r0
 800651a:	2303      	movs	r3, #3
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	f022 0204 	bic.w	r2, r2, #4
 8006522:	2300      	movs	r3, #0
 8006524:	6022      	str	r2, [r4, #0]
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	9700      	str	r7, [sp, #0]
 800652a:	4633      	mov	r3, r6
 800652c:	aa09      	add	r2, sp, #36	; 0x24
 800652e:	4621      	mov	r1, r4
 8006530:	4628      	mov	r0, r5
 8006532:	f000 f9d3 	bl	80068dc <_printf_common>
 8006536:	3001      	adds	r0, #1
 8006538:	f040 808a 	bne.w	8006650 <_printf_float+0x1b0>
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	b00b      	add	sp, #44	; 0x2c
 8006542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006546:	eeb4 0b40 	vcmp.f64	d0, d0
 800654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654e:	d709      	bvc.n	8006564 <_printf_float+0xc4>
 8006550:	ee10 3a90 	vmov	r3, s1
 8006554:	2b00      	cmp	r3, #0
 8006556:	bfbc      	itt	lt
 8006558:	232d      	movlt	r3, #45	; 0x2d
 800655a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800655e:	487e      	ldr	r0, [pc, #504]	; (8006758 <_printf_float+0x2b8>)
 8006560:	4b7e      	ldr	r3, [pc, #504]	; (800675c <_printf_float+0x2bc>)
 8006562:	e7d5      	b.n	8006510 <_printf_float+0x70>
 8006564:	6863      	ldr	r3, [r4, #4]
 8006566:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800656a:	9104      	str	r1, [sp, #16]
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	d13c      	bne.n	80065ea <_printf_float+0x14a>
 8006570:	2306      	movs	r3, #6
 8006572:	6063      	str	r3, [r4, #4]
 8006574:	2300      	movs	r3, #0
 8006576:	9303      	str	r3, [sp, #12]
 8006578:	ab08      	add	r3, sp, #32
 800657a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800657e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006582:	ab07      	add	r3, sp, #28
 8006584:	6861      	ldr	r1, [r4, #4]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	6022      	str	r2, [r4, #0]
 800658a:	f10d 031b 	add.w	r3, sp, #27
 800658e:	4628      	mov	r0, r5
 8006590:	f7ff fef6 	bl	8006380 <__cvt>
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	9907      	ldr	r1, [sp, #28]
 8006598:	2b47      	cmp	r3, #71	; 0x47
 800659a:	4680      	mov	r8, r0
 800659c:	d108      	bne.n	80065b0 <_printf_float+0x110>
 800659e:	1cc8      	adds	r0, r1, #3
 80065a0:	db02      	blt.n	80065a8 <_printf_float+0x108>
 80065a2:	6863      	ldr	r3, [r4, #4]
 80065a4:	4299      	cmp	r1, r3
 80065a6:	dd41      	ble.n	800662c <_printf_float+0x18c>
 80065a8:	f1a9 0902 	sub.w	r9, r9, #2
 80065ac:	fa5f f989 	uxtb.w	r9, r9
 80065b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065b4:	d820      	bhi.n	80065f8 <_printf_float+0x158>
 80065b6:	3901      	subs	r1, #1
 80065b8:	464a      	mov	r2, r9
 80065ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065be:	9107      	str	r1, [sp, #28]
 80065c0:	f7ff ff30 	bl	8006424 <__exponent>
 80065c4:	9a08      	ldr	r2, [sp, #32]
 80065c6:	9004      	str	r0, [sp, #16]
 80065c8:	1813      	adds	r3, r2, r0
 80065ca:	2a01      	cmp	r2, #1
 80065cc:	6123      	str	r3, [r4, #16]
 80065ce:	dc02      	bgt.n	80065d6 <_printf_float+0x136>
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	07d2      	lsls	r2, r2, #31
 80065d4:	d501      	bpl.n	80065da <_printf_float+0x13a>
 80065d6:	3301      	adds	r3, #1
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0a2      	beq.n	8006528 <_printf_float+0x88>
 80065e2:	232d      	movs	r3, #45	; 0x2d
 80065e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e8:	e79e      	b.n	8006528 <_printf_float+0x88>
 80065ea:	9904      	ldr	r1, [sp, #16]
 80065ec:	2947      	cmp	r1, #71	; 0x47
 80065ee:	d1c1      	bne.n	8006574 <_printf_float+0xd4>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1bf      	bne.n	8006574 <_printf_float+0xd4>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7bc      	b.n	8006572 <_printf_float+0xd2>
 80065f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80065fc:	d118      	bne.n	8006630 <_printf_float+0x190>
 80065fe:	2900      	cmp	r1, #0
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	dd0b      	ble.n	800661c <_printf_float+0x17c>
 8006604:	6121      	str	r1, [r4, #16]
 8006606:	b913      	cbnz	r3, 800660e <_printf_float+0x16e>
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	07d0      	lsls	r0, r2, #31
 800660c:	d502      	bpl.n	8006614 <_printf_float+0x174>
 800660e:	3301      	adds	r3, #1
 8006610:	440b      	add	r3, r1
 8006612:	6123      	str	r3, [r4, #16]
 8006614:	2300      	movs	r3, #0
 8006616:	65a1      	str	r1, [r4, #88]	; 0x58
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	e7de      	b.n	80065da <_printf_float+0x13a>
 800661c:	b913      	cbnz	r3, 8006624 <_printf_float+0x184>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	07d2      	lsls	r2, r2, #31
 8006622:	d501      	bpl.n	8006628 <_printf_float+0x188>
 8006624:	3302      	adds	r3, #2
 8006626:	e7f4      	b.n	8006612 <_printf_float+0x172>
 8006628:	2301      	movs	r3, #1
 800662a:	e7f2      	b.n	8006612 <_printf_float+0x172>
 800662c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006630:	9b08      	ldr	r3, [sp, #32]
 8006632:	4299      	cmp	r1, r3
 8006634:	db05      	blt.n	8006642 <_printf_float+0x1a2>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	6121      	str	r1, [r4, #16]
 800663a:	07d8      	lsls	r0, r3, #31
 800663c:	d5ea      	bpl.n	8006614 <_printf_float+0x174>
 800663e:	1c4b      	adds	r3, r1, #1
 8006640:	e7e7      	b.n	8006612 <_printf_float+0x172>
 8006642:	2900      	cmp	r1, #0
 8006644:	bfd4      	ite	le
 8006646:	f1c1 0202 	rsble	r2, r1, #2
 800664a:	2201      	movgt	r2, #1
 800664c:	4413      	add	r3, r2
 800664e:	e7e0      	b.n	8006612 <_printf_float+0x172>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	055a      	lsls	r2, r3, #21
 8006654:	d407      	bmi.n	8006666 <_printf_float+0x1c6>
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	4642      	mov	r2, r8
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	d12a      	bne.n	80066ba <_printf_float+0x21a>
 8006664:	e76a      	b.n	800653c <_printf_float+0x9c>
 8006666:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800666a:	f240 80e2 	bls.w	8006832 <_printf_float+0x392>
 800666e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006672:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667a:	d133      	bne.n	80066e4 <_printf_float+0x244>
 800667c:	4a38      	ldr	r2, [pc, #224]	; (8006760 <_printf_float+0x2c0>)
 800667e:	2301      	movs	r3, #1
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f af58 	beq.w	800653c <_printf_float+0x9c>
 800668c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006690:	429a      	cmp	r2, r3
 8006692:	db02      	blt.n	800669a <_printf_float+0x1fa>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	07d8      	lsls	r0, r3, #31
 8006698:	d50f      	bpl.n	80066ba <_printf_float+0x21a>
 800669a:	4653      	mov	r3, sl
 800669c:	465a      	mov	r2, fp
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	f43f af49 	beq.w	800653c <_printf_float+0x9c>
 80066aa:	f04f 0800 	mov.w	r8, #0
 80066ae:	f104 091a 	add.w	r9, r4, #26
 80066b2:	9b08      	ldr	r3, [sp, #32]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	4543      	cmp	r3, r8
 80066b8:	dc09      	bgt.n	80066ce <_printf_float+0x22e>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	079b      	lsls	r3, r3, #30
 80066be:	f100 8108 	bmi.w	80068d2 <_printf_float+0x432>
 80066c2:	68e0      	ldr	r0, [r4, #12]
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	4298      	cmp	r0, r3
 80066c8:	bfb8      	it	lt
 80066ca:	4618      	movlt	r0, r3
 80066cc:	e738      	b.n	8006540 <_printf_float+0xa0>
 80066ce:	2301      	movs	r3, #1
 80066d0:	464a      	mov	r2, r9
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f af2f 	beq.w	800653c <_printf_float+0x9c>
 80066de:	f108 0801 	add.w	r8, r8, #1
 80066e2:	e7e6      	b.n	80066b2 <_printf_float+0x212>
 80066e4:	9b07      	ldr	r3, [sp, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dc3c      	bgt.n	8006764 <_printf_float+0x2c4>
 80066ea:	4a1d      	ldr	r2, [pc, #116]	; (8006760 <_printf_float+0x2c0>)
 80066ec:	2301      	movs	r3, #1
 80066ee:	4631      	mov	r1, r6
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b8      	blx	r7
 80066f4:	3001      	adds	r0, #1
 80066f6:	f43f af21 	beq.w	800653c <_printf_float+0x9c>
 80066fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80066fe:	4313      	orrs	r3, r2
 8006700:	d102      	bne.n	8006708 <_printf_float+0x268>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	07d9      	lsls	r1, r3, #31
 8006706:	d5d8      	bpl.n	80066ba <_printf_float+0x21a>
 8006708:	4653      	mov	r3, sl
 800670a:	465a      	mov	r2, fp
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af12 	beq.w	800653c <_printf_float+0x9c>
 8006718:	f04f 0900 	mov.w	r9, #0
 800671c:	f104 0a1a 	add.w	sl, r4, #26
 8006720:	9b07      	ldr	r3, [sp, #28]
 8006722:	425b      	negs	r3, r3
 8006724:	454b      	cmp	r3, r9
 8006726:	dc01      	bgt.n	800672c <_printf_float+0x28c>
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	e795      	b.n	8006658 <_printf_float+0x1b8>
 800672c:	2301      	movs	r3, #1
 800672e:	4652      	mov	r2, sl
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f af00 	beq.w	800653c <_printf_float+0x9c>
 800673c:	f109 0901 	add.w	r9, r9, #1
 8006740:	e7ee      	b.n	8006720 <_printf_float+0x280>
 8006742:	bf00      	nop
 8006744:	f3af 8000 	nop.w
 8006748:	ffffffff 	.word	0xffffffff
 800674c:	7fefffff 	.word	0x7fefffff
 8006750:	0800aa7c 	.word	0x0800aa7c
 8006754:	0800aa80 	.word	0x0800aa80
 8006758:	0800aa88 	.word	0x0800aa88
 800675c:	0800aa84 	.word	0x0800aa84
 8006760:	0800aa8c 	.word	0x0800aa8c
 8006764:	9a08      	ldr	r2, [sp, #32]
 8006766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006768:	429a      	cmp	r2, r3
 800676a:	bfa8      	it	ge
 800676c:	461a      	movge	r2, r3
 800676e:	2a00      	cmp	r2, #0
 8006770:	4691      	mov	r9, r2
 8006772:	dc38      	bgt.n	80067e6 <_printf_float+0x346>
 8006774:	2300      	movs	r3, #0
 8006776:	9305      	str	r3, [sp, #20]
 8006778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800677c:	f104 021a 	add.w	r2, r4, #26
 8006780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006782:	9905      	ldr	r1, [sp, #20]
 8006784:	9304      	str	r3, [sp, #16]
 8006786:	eba3 0309 	sub.w	r3, r3, r9
 800678a:	428b      	cmp	r3, r1
 800678c:	dc33      	bgt.n	80067f6 <_printf_float+0x356>
 800678e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006792:	429a      	cmp	r2, r3
 8006794:	db3c      	blt.n	8006810 <_printf_float+0x370>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	07da      	lsls	r2, r3, #31
 800679a:	d439      	bmi.n	8006810 <_printf_float+0x370>
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	9907      	ldr	r1, [sp, #28]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	eba2 0901 	sub.w	r9, r2, r1
 80067a8:	4599      	cmp	r9, r3
 80067aa:	bfa8      	it	ge
 80067ac:	4699      	movge	r9, r3
 80067ae:	f1b9 0f00 	cmp.w	r9, #0
 80067b2:	dc35      	bgt.n	8006820 <_printf_float+0x380>
 80067b4:	f04f 0800 	mov.w	r8, #0
 80067b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067bc:	f104 0a1a 	add.w	sl, r4, #26
 80067c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	eba3 0309 	sub.w	r3, r3, r9
 80067ca:	4543      	cmp	r3, r8
 80067cc:	f77f af75 	ble.w	80066ba <_printf_float+0x21a>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4652      	mov	r2, sl
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f aeae 	beq.w	800653c <_printf_float+0x9c>
 80067e0:	f108 0801 	add.w	r8, r8, #1
 80067e4:	e7ec      	b.n	80067c0 <_printf_float+0x320>
 80067e6:	4613      	mov	r3, r2
 80067e8:	4631      	mov	r1, r6
 80067ea:	4642      	mov	r2, r8
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1bf      	bne.n	8006774 <_printf_float+0x2d4>
 80067f4:	e6a2      	b.n	800653c <_printf_float+0x9c>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	9204      	str	r2, [sp, #16]
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	f43f ae9b 	beq.w	800653c <_printf_float+0x9c>
 8006806:	9b05      	ldr	r3, [sp, #20]
 8006808:	9a04      	ldr	r2, [sp, #16]
 800680a:	3301      	adds	r3, #1
 800680c:	9305      	str	r3, [sp, #20]
 800680e:	e7b7      	b.n	8006780 <_printf_float+0x2e0>
 8006810:	4653      	mov	r3, sl
 8006812:	465a      	mov	r2, fp
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	d1be      	bne.n	800679c <_printf_float+0x2fc>
 800681e:	e68d      	b.n	800653c <_printf_float+0x9c>
 8006820:	9a04      	ldr	r2, [sp, #16]
 8006822:	464b      	mov	r3, r9
 8006824:	4442      	add	r2, r8
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	d1c1      	bne.n	80067b4 <_printf_float+0x314>
 8006830:	e684      	b.n	800653c <_printf_float+0x9c>
 8006832:	9a08      	ldr	r2, [sp, #32]
 8006834:	2a01      	cmp	r2, #1
 8006836:	dc01      	bgt.n	800683c <_printf_float+0x39c>
 8006838:	07db      	lsls	r3, r3, #31
 800683a:	d537      	bpl.n	80068ac <_printf_float+0x40c>
 800683c:	2301      	movs	r3, #1
 800683e:	4642      	mov	r2, r8
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f ae78 	beq.w	800653c <_printf_float+0x9c>
 800684c:	4653      	mov	r3, sl
 800684e:	465a      	mov	r2, fp
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f ae70 	beq.w	800653c <_printf_float+0x9c>
 800685c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006860:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006868:	d01b      	beq.n	80068a2 <_printf_float+0x402>
 800686a:	9b08      	ldr	r3, [sp, #32]
 800686c:	f108 0201 	add.w	r2, r8, #1
 8006870:	3b01      	subs	r3, #1
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	d10e      	bne.n	800689a <_printf_float+0x3fa>
 800687c:	e65e      	b.n	800653c <_printf_float+0x9c>
 800687e:	2301      	movs	r3, #1
 8006880:	464a      	mov	r2, r9
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f ae57 	beq.w	800653c <_printf_float+0x9c>
 800688e:	f108 0801 	add.w	r8, r8, #1
 8006892:	9b08      	ldr	r3, [sp, #32]
 8006894:	3b01      	subs	r3, #1
 8006896:	4543      	cmp	r3, r8
 8006898:	dcf1      	bgt.n	800687e <_printf_float+0x3de>
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068a0:	e6db      	b.n	800665a <_printf_float+0x1ba>
 80068a2:	f04f 0800 	mov.w	r8, #0
 80068a6:	f104 091a 	add.w	r9, r4, #26
 80068aa:	e7f2      	b.n	8006892 <_printf_float+0x3f2>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4642      	mov	r2, r8
 80068b0:	e7df      	b.n	8006872 <_printf_float+0x3d2>
 80068b2:	2301      	movs	r3, #1
 80068b4:	464a      	mov	r2, r9
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f ae3d 	beq.w	800653c <_printf_float+0x9c>
 80068c2:	f108 0801 	add.w	r8, r8, #1
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ca:	1a5b      	subs	r3, r3, r1
 80068cc:	4543      	cmp	r3, r8
 80068ce:	dcf0      	bgt.n	80068b2 <_printf_float+0x412>
 80068d0:	e6f7      	b.n	80066c2 <_printf_float+0x222>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	f104 0919 	add.w	r9, r4, #25
 80068da:	e7f4      	b.n	80068c6 <_printf_float+0x426>

080068dc <_printf_common>:
 80068dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	4616      	mov	r6, r2
 80068e2:	4699      	mov	r9, r3
 80068e4:	688a      	ldr	r2, [r1, #8]
 80068e6:	690b      	ldr	r3, [r1, #16]
 80068e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ec:	4293      	cmp	r3, r2
 80068ee:	bfb8      	it	lt
 80068f0:	4613      	movlt	r3, r2
 80068f2:	6033      	str	r3, [r6, #0]
 80068f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068f8:	4607      	mov	r7, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	b10a      	cbz	r2, 8006902 <_printf_common+0x26>
 80068fe:	3301      	adds	r3, #1
 8006900:	6033      	str	r3, [r6, #0]
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	0699      	lsls	r1, r3, #26
 8006906:	bf42      	ittt	mi
 8006908:	6833      	ldrmi	r3, [r6, #0]
 800690a:	3302      	addmi	r3, #2
 800690c:	6033      	strmi	r3, [r6, #0]
 800690e:	6825      	ldr	r5, [r4, #0]
 8006910:	f015 0506 	ands.w	r5, r5, #6
 8006914:	d106      	bne.n	8006924 <_printf_common+0x48>
 8006916:	f104 0a19 	add.w	sl, r4, #25
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	6832      	ldr	r2, [r6, #0]
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	42ab      	cmp	r3, r5
 8006922:	dc26      	bgt.n	8006972 <_printf_common+0x96>
 8006924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006928:	1e13      	subs	r3, r2, #0
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	bf18      	it	ne
 800692e:	2301      	movne	r3, #1
 8006930:	0692      	lsls	r2, r2, #26
 8006932:	d42b      	bmi.n	800698c <_printf_common+0xb0>
 8006934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006938:	4649      	mov	r1, r9
 800693a:	4638      	mov	r0, r7
 800693c:	47c0      	blx	r8
 800693e:	3001      	adds	r0, #1
 8006940:	d01e      	beq.n	8006980 <_printf_common+0xa4>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	68e5      	ldr	r5, [r4, #12]
 8006946:	6832      	ldr	r2, [r6, #0]
 8006948:	f003 0306 	and.w	r3, r3, #6
 800694c:	2b04      	cmp	r3, #4
 800694e:	bf08      	it	eq
 8006950:	1aad      	subeq	r5, r5, r2
 8006952:	68a3      	ldr	r3, [r4, #8]
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	bf0c      	ite	eq
 8006958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800695c:	2500      	movne	r5, #0
 800695e:	4293      	cmp	r3, r2
 8006960:	bfc4      	itt	gt
 8006962:	1a9b      	subgt	r3, r3, r2
 8006964:	18ed      	addgt	r5, r5, r3
 8006966:	2600      	movs	r6, #0
 8006968:	341a      	adds	r4, #26
 800696a:	42b5      	cmp	r5, r6
 800696c:	d11a      	bne.n	80069a4 <_printf_common+0xc8>
 800696e:	2000      	movs	r0, #0
 8006970:	e008      	b.n	8006984 <_printf_common+0xa8>
 8006972:	2301      	movs	r3, #1
 8006974:	4652      	mov	r2, sl
 8006976:	4649      	mov	r1, r9
 8006978:	4638      	mov	r0, r7
 800697a:	47c0      	blx	r8
 800697c:	3001      	adds	r0, #1
 800697e:	d103      	bne.n	8006988 <_printf_common+0xac>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006988:	3501      	adds	r5, #1
 800698a:	e7c6      	b.n	800691a <_printf_common+0x3e>
 800698c:	18e1      	adds	r1, r4, r3
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	2030      	movs	r0, #48	; 0x30
 8006992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006996:	4422      	add	r2, r4
 8006998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800699c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069a0:	3302      	adds	r3, #2
 80069a2:	e7c7      	b.n	8006934 <_printf_common+0x58>
 80069a4:	2301      	movs	r3, #1
 80069a6:	4622      	mov	r2, r4
 80069a8:	4649      	mov	r1, r9
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d0e6      	beq.n	8006980 <_printf_common+0xa4>
 80069b2:	3601      	adds	r6, #1
 80069b4:	e7d9      	b.n	800696a <_printf_common+0x8e>
	...

080069b8 <_printf_i>:
 80069b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	460c      	mov	r4, r1
 80069be:	4691      	mov	r9, r2
 80069c0:	7e27      	ldrb	r7, [r4, #24]
 80069c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069c4:	2f78      	cmp	r7, #120	; 0x78
 80069c6:	4680      	mov	r8, r0
 80069c8:	469a      	mov	sl, r3
 80069ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069ce:	d807      	bhi.n	80069e0 <_printf_i+0x28>
 80069d0:	2f62      	cmp	r7, #98	; 0x62
 80069d2:	d80a      	bhi.n	80069ea <_printf_i+0x32>
 80069d4:	2f00      	cmp	r7, #0
 80069d6:	f000 80d8 	beq.w	8006b8a <_printf_i+0x1d2>
 80069da:	2f58      	cmp	r7, #88	; 0x58
 80069dc:	f000 80a3 	beq.w	8006b26 <_printf_i+0x16e>
 80069e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069e8:	e03a      	b.n	8006a60 <_printf_i+0xa8>
 80069ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ee:	2b15      	cmp	r3, #21
 80069f0:	d8f6      	bhi.n	80069e0 <_printf_i+0x28>
 80069f2:	a001      	add	r0, pc, #4	; (adr r0, 80069f8 <_printf_i+0x40>)
 80069f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069f8:	08006a51 	.word	0x08006a51
 80069fc:	08006a65 	.word	0x08006a65
 8006a00:	080069e1 	.word	0x080069e1
 8006a04:	080069e1 	.word	0x080069e1
 8006a08:	080069e1 	.word	0x080069e1
 8006a0c:	080069e1 	.word	0x080069e1
 8006a10:	08006a65 	.word	0x08006a65
 8006a14:	080069e1 	.word	0x080069e1
 8006a18:	080069e1 	.word	0x080069e1
 8006a1c:	080069e1 	.word	0x080069e1
 8006a20:	080069e1 	.word	0x080069e1
 8006a24:	08006b71 	.word	0x08006b71
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006b53 	.word	0x08006b53
 8006a30:	080069e1 	.word	0x080069e1
 8006a34:	080069e1 	.word	0x080069e1
 8006a38:	08006b93 	.word	0x08006b93
 8006a3c:	080069e1 	.word	0x080069e1
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	080069e1 	.word	0x080069e1
 8006a48:	080069e1 	.word	0x080069e1
 8006a4c:	08006b5b 	.word	0x08006b5b
 8006a50:	680b      	ldr	r3, [r1, #0]
 8006a52:	1d1a      	adds	r2, r3, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	600a      	str	r2, [r1, #0]
 8006a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0a3      	b.n	8006bac <_printf_i+0x1f4>
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	6808      	ldr	r0, [r1, #0]
 8006a68:	062e      	lsls	r6, r5, #24
 8006a6a:	f100 0304 	add.w	r3, r0, #4
 8006a6e:	d50a      	bpl.n	8006a86 <_printf_i+0xce>
 8006a70:	6805      	ldr	r5, [r0, #0]
 8006a72:	600b      	str	r3, [r1, #0]
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	da03      	bge.n	8006a80 <_printf_i+0xc8>
 8006a78:	232d      	movs	r3, #45	; 0x2d
 8006a7a:	426d      	negs	r5, r5
 8006a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a80:	485e      	ldr	r0, [pc, #376]	; (8006bfc <_printf_i+0x244>)
 8006a82:	230a      	movs	r3, #10
 8006a84:	e019      	b.n	8006aba <_printf_i+0x102>
 8006a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a8a:	6805      	ldr	r5, [r0, #0]
 8006a8c:	600b      	str	r3, [r1, #0]
 8006a8e:	bf18      	it	ne
 8006a90:	b22d      	sxthne	r5, r5
 8006a92:	e7ef      	b.n	8006a74 <_printf_i+0xbc>
 8006a94:	680b      	ldr	r3, [r1, #0]
 8006a96:	6825      	ldr	r5, [r4, #0]
 8006a98:	1d18      	adds	r0, r3, #4
 8006a9a:	6008      	str	r0, [r1, #0]
 8006a9c:	0628      	lsls	r0, r5, #24
 8006a9e:	d501      	bpl.n	8006aa4 <_printf_i+0xec>
 8006aa0:	681d      	ldr	r5, [r3, #0]
 8006aa2:	e002      	b.n	8006aaa <_printf_i+0xf2>
 8006aa4:	0669      	lsls	r1, r5, #25
 8006aa6:	d5fb      	bpl.n	8006aa0 <_printf_i+0xe8>
 8006aa8:	881d      	ldrh	r5, [r3, #0]
 8006aaa:	4854      	ldr	r0, [pc, #336]	; (8006bfc <_printf_i+0x244>)
 8006aac:	2f6f      	cmp	r7, #111	; 0x6f
 8006aae:	bf0c      	ite	eq
 8006ab0:	2308      	moveq	r3, #8
 8006ab2:	230a      	movne	r3, #10
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aba:	6866      	ldr	r6, [r4, #4]
 8006abc:	60a6      	str	r6, [r4, #8]
 8006abe:	2e00      	cmp	r6, #0
 8006ac0:	bfa2      	ittt	ge
 8006ac2:	6821      	ldrge	r1, [r4, #0]
 8006ac4:	f021 0104 	bicge.w	r1, r1, #4
 8006ac8:	6021      	strge	r1, [r4, #0]
 8006aca:	b90d      	cbnz	r5, 8006ad0 <_printf_i+0x118>
 8006acc:	2e00      	cmp	r6, #0
 8006ace:	d04d      	beq.n	8006b6c <_printf_i+0x1b4>
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8006ada:	5dc7      	ldrb	r7, [r0, r7]
 8006adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ae0:	462f      	mov	r7, r5
 8006ae2:	42bb      	cmp	r3, r7
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	d9f4      	bls.n	8006ad2 <_printf_i+0x11a>
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d10b      	bne.n	8006b04 <_printf_i+0x14c>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	07df      	lsls	r7, r3, #31
 8006af0:	d508      	bpl.n	8006b04 <_printf_i+0x14c>
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	6861      	ldr	r1, [r4, #4]
 8006af6:	4299      	cmp	r1, r3
 8006af8:	bfde      	ittt	le
 8006afa:	2330      	movle	r3, #48	; 0x30
 8006afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b04:	1b92      	subs	r2, r2, r6
 8006b06:	6122      	str	r2, [r4, #16]
 8006b08:	f8cd a000 	str.w	sl, [sp]
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	aa03      	add	r2, sp, #12
 8006b10:	4621      	mov	r1, r4
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7ff fee2 	bl	80068dc <_printf_common>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d14c      	bne.n	8006bb6 <_printf_i+0x1fe>
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	b004      	add	sp, #16
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	4835      	ldr	r0, [pc, #212]	; (8006bfc <_printf_i+0x244>)
 8006b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	680e      	ldr	r6, [r1, #0]
 8006b30:	061f      	lsls	r7, r3, #24
 8006b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b36:	600e      	str	r6, [r1, #0]
 8006b38:	d514      	bpl.n	8006b64 <_printf_i+0x1ac>
 8006b3a:	07d9      	lsls	r1, r3, #31
 8006b3c:	bf44      	itt	mi
 8006b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b42:	6023      	strmi	r3, [r4, #0]
 8006b44:	b91d      	cbnz	r5, 8006b4e <_printf_i+0x196>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	f023 0320 	bic.w	r3, r3, #32
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	2310      	movs	r3, #16
 8006b50:	e7b0      	b.n	8006ab4 <_printf_i+0xfc>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	f043 0320 	orr.w	r3, r3, #32
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	2378      	movs	r3, #120	; 0x78
 8006b5c:	4828      	ldr	r0, [pc, #160]	; (8006c00 <_printf_i+0x248>)
 8006b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b62:	e7e3      	b.n	8006b2c <_printf_i+0x174>
 8006b64:	065e      	lsls	r6, r3, #25
 8006b66:	bf48      	it	mi
 8006b68:	b2ad      	uxthmi	r5, r5
 8006b6a:	e7e6      	b.n	8006b3a <_printf_i+0x182>
 8006b6c:	4616      	mov	r6, r2
 8006b6e:	e7bb      	b.n	8006ae8 <_printf_i+0x130>
 8006b70:	680b      	ldr	r3, [r1, #0]
 8006b72:	6826      	ldr	r6, [r4, #0]
 8006b74:	6960      	ldr	r0, [r4, #20]
 8006b76:	1d1d      	adds	r5, r3, #4
 8006b78:	600d      	str	r5, [r1, #0]
 8006b7a:	0635      	lsls	r5, r6, #24
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	d501      	bpl.n	8006b84 <_printf_i+0x1cc>
 8006b80:	6018      	str	r0, [r3, #0]
 8006b82:	e002      	b.n	8006b8a <_printf_i+0x1d2>
 8006b84:	0671      	lsls	r1, r6, #25
 8006b86:	d5fb      	bpl.n	8006b80 <_printf_i+0x1c8>
 8006b88:	8018      	strh	r0, [r3, #0]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	4616      	mov	r6, r2
 8006b90:	e7ba      	b.n	8006b08 <_printf_i+0x150>
 8006b92:	680b      	ldr	r3, [r1, #0]
 8006b94:	1d1a      	adds	r2, r3, #4
 8006b96:	600a      	str	r2, [r1, #0]
 8006b98:	681e      	ldr	r6, [r3, #0]
 8006b9a:	6862      	ldr	r2, [r4, #4]
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7f9 fba6 	bl	80002f0 <memchr>
 8006ba4:	b108      	cbz	r0, 8006baa <_printf_i+0x1f2>
 8006ba6:	1b80      	subs	r0, r0, r6
 8006ba8:	6060      	str	r0, [r4, #4]
 8006baa:	6863      	ldr	r3, [r4, #4]
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bb4:	e7a8      	b.n	8006b08 <_printf_i+0x150>
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	4632      	mov	r2, r6
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	47d0      	blx	sl
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d0ab      	beq.n	8006b1c <_printf_i+0x164>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	079b      	lsls	r3, r3, #30
 8006bc8:	d413      	bmi.n	8006bf2 <_printf_i+0x23a>
 8006bca:	68e0      	ldr	r0, [r4, #12]
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	4298      	cmp	r0, r3
 8006bd0:	bfb8      	it	lt
 8006bd2:	4618      	movlt	r0, r3
 8006bd4:	e7a4      	b.n	8006b20 <_printf_i+0x168>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4632      	mov	r2, r6
 8006bda:	4649      	mov	r1, r9
 8006bdc:	4640      	mov	r0, r8
 8006bde:	47d0      	blx	sl
 8006be0:	3001      	adds	r0, #1
 8006be2:	d09b      	beq.n	8006b1c <_printf_i+0x164>
 8006be4:	3501      	adds	r5, #1
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	9903      	ldr	r1, [sp, #12]
 8006bea:	1a5b      	subs	r3, r3, r1
 8006bec:	42ab      	cmp	r3, r5
 8006bee:	dcf2      	bgt.n	8006bd6 <_printf_i+0x21e>
 8006bf0:	e7eb      	b.n	8006bca <_printf_i+0x212>
 8006bf2:	2500      	movs	r5, #0
 8006bf4:	f104 0619 	add.w	r6, r4, #25
 8006bf8:	e7f5      	b.n	8006be6 <_printf_i+0x22e>
 8006bfa:	bf00      	nop
 8006bfc:	0800aa8e 	.word	0x0800aa8e
 8006c00:	0800aa9f 	.word	0x0800aa9f

08006c04 <_scanf_float>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	4617      	mov	r7, r2
 8006c0c:	9303      	str	r3, [sp, #12]
 8006c0e:	688b      	ldr	r3, [r1, #8]
 8006c10:	1e5a      	subs	r2, r3, #1
 8006c12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c16:	bf83      	ittte	hi
 8006c18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c1c:	195b      	addhi	r3, r3, r5
 8006c1e:	9302      	strhi	r3, [sp, #8]
 8006c20:	2300      	movls	r3, #0
 8006c22:	bf86      	itte	hi
 8006c24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c28:	608b      	strhi	r3, [r1, #8]
 8006c2a:	9302      	strls	r3, [sp, #8]
 8006c2c:	680b      	ldr	r3, [r1, #0]
 8006c2e:	468b      	mov	fp, r1
 8006c30:	2500      	movs	r5, #0
 8006c32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c36:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c3e:	4680      	mov	r8, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	465e      	mov	r6, fp
 8006c44:	46aa      	mov	sl, r5
 8006c46:	46a9      	mov	r9, r5
 8006c48:	9501      	str	r5, [sp, #4]
 8006c4a:	68a2      	ldr	r2, [r4, #8]
 8006c4c:	b152      	cbz	r2, 8006c64 <_scanf_float+0x60>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b4e      	cmp	r3, #78	; 0x4e
 8006c54:	d864      	bhi.n	8006d20 <_scanf_float+0x11c>
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d83c      	bhi.n	8006cd4 <_scanf_float+0xd0>
 8006c5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c5e:	b2c8      	uxtb	r0, r1
 8006c60:	280e      	cmp	r0, #14
 8006c62:	d93a      	bls.n	8006cda <_scanf_float+0xd6>
 8006c64:	f1b9 0f00 	cmp.w	r9, #0
 8006c68:	d003      	beq.n	8006c72 <_scanf_float+0x6e>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c76:	f1ba 0f01 	cmp.w	sl, #1
 8006c7a:	f200 8113 	bhi.w	8006ea4 <_scanf_float+0x2a0>
 8006c7e:	455e      	cmp	r6, fp
 8006c80:	f200 8105 	bhi.w	8006e8e <_scanf_float+0x28a>
 8006c84:	2501      	movs	r5, #1
 8006c86:	4628      	mov	r0, r5
 8006c88:	b007      	add	sp, #28
 8006c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006c92:	2a0d      	cmp	r2, #13
 8006c94:	d8e6      	bhi.n	8006c64 <_scanf_float+0x60>
 8006c96:	a101      	add	r1, pc, #4	; (adr r1, 8006c9c <_scanf_float+0x98>)
 8006c98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c9c:	08006ddb 	.word	0x08006ddb
 8006ca0:	08006c65 	.word	0x08006c65
 8006ca4:	08006c65 	.word	0x08006c65
 8006ca8:	08006c65 	.word	0x08006c65
 8006cac:	08006e3b 	.word	0x08006e3b
 8006cb0:	08006e13 	.word	0x08006e13
 8006cb4:	08006c65 	.word	0x08006c65
 8006cb8:	08006c65 	.word	0x08006c65
 8006cbc:	08006de9 	.word	0x08006de9
 8006cc0:	08006c65 	.word	0x08006c65
 8006cc4:	08006c65 	.word	0x08006c65
 8006cc8:	08006c65 	.word	0x08006c65
 8006ccc:	08006c65 	.word	0x08006c65
 8006cd0:	08006da1 	.word	0x08006da1
 8006cd4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006cd8:	e7db      	b.n	8006c92 <_scanf_float+0x8e>
 8006cda:	290e      	cmp	r1, #14
 8006cdc:	d8c2      	bhi.n	8006c64 <_scanf_float+0x60>
 8006cde:	a001      	add	r0, pc, #4	; (adr r0, 8006ce4 <_scanf_float+0xe0>)
 8006ce0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ce4:	08006d93 	.word	0x08006d93
 8006ce8:	08006c65 	.word	0x08006c65
 8006cec:	08006d93 	.word	0x08006d93
 8006cf0:	08006e27 	.word	0x08006e27
 8006cf4:	08006c65 	.word	0x08006c65
 8006cf8:	08006d41 	.word	0x08006d41
 8006cfc:	08006d7d 	.word	0x08006d7d
 8006d00:	08006d7d 	.word	0x08006d7d
 8006d04:	08006d7d 	.word	0x08006d7d
 8006d08:	08006d7d 	.word	0x08006d7d
 8006d0c:	08006d7d 	.word	0x08006d7d
 8006d10:	08006d7d 	.word	0x08006d7d
 8006d14:	08006d7d 	.word	0x08006d7d
 8006d18:	08006d7d 	.word	0x08006d7d
 8006d1c:	08006d7d 	.word	0x08006d7d
 8006d20:	2b6e      	cmp	r3, #110	; 0x6e
 8006d22:	d809      	bhi.n	8006d38 <_scanf_float+0x134>
 8006d24:	2b60      	cmp	r3, #96	; 0x60
 8006d26:	d8b2      	bhi.n	8006c8e <_scanf_float+0x8a>
 8006d28:	2b54      	cmp	r3, #84	; 0x54
 8006d2a:	d077      	beq.n	8006e1c <_scanf_float+0x218>
 8006d2c:	2b59      	cmp	r3, #89	; 0x59
 8006d2e:	d199      	bne.n	8006c64 <_scanf_float+0x60>
 8006d30:	2d07      	cmp	r5, #7
 8006d32:	d197      	bne.n	8006c64 <_scanf_float+0x60>
 8006d34:	2508      	movs	r5, #8
 8006d36:	e029      	b.n	8006d8c <_scanf_float+0x188>
 8006d38:	2b74      	cmp	r3, #116	; 0x74
 8006d3a:	d06f      	beq.n	8006e1c <_scanf_float+0x218>
 8006d3c:	2b79      	cmp	r3, #121	; 0x79
 8006d3e:	e7f6      	b.n	8006d2e <_scanf_float+0x12a>
 8006d40:	6821      	ldr	r1, [r4, #0]
 8006d42:	05c8      	lsls	r0, r1, #23
 8006d44:	d51a      	bpl.n	8006d7c <_scanf_float+0x178>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d4c:	6021      	str	r1, [r4, #0]
 8006d4e:	f109 0901 	add.w	r9, r9, #1
 8006d52:	b11b      	cbz	r3, 8006d5c <_scanf_float+0x158>
 8006d54:	3b01      	subs	r3, #1
 8006d56:	3201      	adds	r2, #1
 8006d58:	9302      	str	r3, [sp, #8]
 8006d5a:	60a2      	str	r2, [r4, #8]
 8006d5c:	68a3      	ldr	r3, [r4, #8]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	60a3      	str	r3, [r4, #8]
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	3301      	adds	r3, #1
 8006d66:	6123      	str	r3, [r4, #16]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	f340 8084 	ble.w	8006e7c <_scanf_float+0x278>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	e766      	b.n	8006c4a <_scanf_float+0x46>
 8006d7c:	eb1a 0f05 	cmn.w	sl, r5
 8006d80:	f47f af70 	bne.w	8006c64 <_scanf_float+0x60>
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	f806 3b01 	strb.w	r3, [r6], #1
 8006d90:	e7e4      	b.n	8006d5c <_scanf_float+0x158>
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	0610      	lsls	r0, r2, #24
 8006d96:	f57f af65 	bpl.w	8006c64 <_scanf_float+0x60>
 8006d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d9e:	e7f4      	b.n	8006d8a <_scanf_float+0x186>
 8006da0:	f1ba 0f00 	cmp.w	sl, #0
 8006da4:	d10e      	bne.n	8006dc4 <_scanf_float+0x1c0>
 8006da6:	f1b9 0f00 	cmp.w	r9, #0
 8006daa:	d10e      	bne.n	8006dca <_scanf_float+0x1c6>
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006db2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006db6:	d108      	bne.n	8006dca <_scanf_float+0x1c6>
 8006db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dbc:	6022      	str	r2, [r4, #0]
 8006dbe:	f04f 0a01 	mov.w	sl, #1
 8006dc2:	e7e3      	b.n	8006d8c <_scanf_float+0x188>
 8006dc4:	f1ba 0f02 	cmp.w	sl, #2
 8006dc8:	d055      	beq.n	8006e76 <_scanf_float+0x272>
 8006dca:	2d01      	cmp	r5, #1
 8006dcc:	d002      	beq.n	8006dd4 <_scanf_float+0x1d0>
 8006dce:	2d04      	cmp	r5, #4
 8006dd0:	f47f af48 	bne.w	8006c64 <_scanf_float+0x60>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	b2ed      	uxtb	r5, r5
 8006dd8:	e7d8      	b.n	8006d8c <_scanf_float+0x188>
 8006dda:	f1ba 0f01 	cmp.w	sl, #1
 8006dde:	f47f af41 	bne.w	8006c64 <_scanf_float+0x60>
 8006de2:	f04f 0a02 	mov.w	sl, #2
 8006de6:	e7d1      	b.n	8006d8c <_scanf_float+0x188>
 8006de8:	b97d      	cbnz	r5, 8006e0a <_scanf_float+0x206>
 8006dea:	f1b9 0f00 	cmp.w	r9, #0
 8006dee:	f47f af3c 	bne.w	8006c6a <_scanf_float+0x66>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006df8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006dfc:	f47f af39 	bne.w	8006c72 <_scanf_float+0x6e>
 8006e00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e04:	6022      	str	r2, [r4, #0]
 8006e06:	2501      	movs	r5, #1
 8006e08:	e7c0      	b.n	8006d8c <_scanf_float+0x188>
 8006e0a:	2d03      	cmp	r5, #3
 8006e0c:	d0e2      	beq.n	8006dd4 <_scanf_float+0x1d0>
 8006e0e:	2d05      	cmp	r5, #5
 8006e10:	e7de      	b.n	8006dd0 <_scanf_float+0x1cc>
 8006e12:	2d02      	cmp	r5, #2
 8006e14:	f47f af26 	bne.w	8006c64 <_scanf_float+0x60>
 8006e18:	2503      	movs	r5, #3
 8006e1a:	e7b7      	b.n	8006d8c <_scanf_float+0x188>
 8006e1c:	2d06      	cmp	r5, #6
 8006e1e:	f47f af21 	bne.w	8006c64 <_scanf_float+0x60>
 8006e22:	2507      	movs	r5, #7
 8006e24:	e7b2      	b.n	8006d8c <_scanf_float+0x188>
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	0591      	lsls	r1, r2, #22
 8006e2a:	f57f af1b 	bpl.w	8006c64 <_scanf_float+0x60>
 8006e2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e32:	6022      	str	r2, [r4, #0]
 8006e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e38:	e7a8      	b.n	8006d8c <_scanf_float+0x188>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e44:	d006      	beq.n	8006e54 <_scanf_float+0x250>
 8006e46:	0550      	lsls	r0, r2, #21
 8006e48:	f57f af0c 	bpl.w	8006c64 <_scanf_float+0x60>
 8006e4c:	f1b9 0f00 	cmp.w	r9, #0
 8006e50:	f43f af0f 	beq.w	8006c72 <_scanf_float+0x6e>
 8006e54:	0591      	lsls	r1, r2, #22
 8006e56:	bf58      	it	pl
 8006e58:	9901      	ldrpl	r1, [sp, #4]
 8006e5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e5e:	bf58      	it	pl
 8006e60:	eba9 0101 	subpl.w	r1, r9, r1
 8006e64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e68:	bf58      	it	pl
 8006e6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e6e:	6022      	str	r2, [r4, #0]
 8006e70:	f04f 0900 	mov.w	r9, #0
 8006e74:	e78a      	b.n	8006d8c <_scanf_float+0x188>
 8006e76:	f04f 0a03 	mov.w	sl, #3
 8006e7a:	e787      	b.n	8006d8c <_scanf_float+0x188>
 8006e7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e80:	4639      	mov	r1, r7
 8006e82:	4640      	mov	r0, r8
 8006e84:	4798      	blx	r3
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f43f aedf 	beq.w	8006c4a <_scanf_float+0x46>
 8006e8c:	e6ea      	b.n	8006c64 <_scanf_float+0x60>
 8006e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e96:	463a      	mov	r2, r7
 8006e98:	4640      	mov	r0, r8
 8006e9a:	4798      	blx	r3
 8006e9c:	6923      	ldr	r3, [r4, #16]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	6123      	str	r3, [r4, #16]
 8006ea2:	e6ec      	b.n	8006c7e <_scanf_float+0x7a>
 8006ea4:	1e6b      	subs	r3, r5, #1
 8006ea6:	2b06      	cmp	r3, #6
 8006ea8:	d825      	bhi.n	8006ef6 <_scanf_float+0x2f2>
 8006eaa:	2d02      	cmp	r5, #2
 8006eac:	d836      	bhi.n	8006f1c <_scanf_float+0x318>
 8006eae:	455e      	cmp	r6, fp
 8006eb0:	f67f aee8 	bls.w	8006c84 <_scanf_float+0x80>
 8006eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ebc:	463a      	mov	r2, r7
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4798      	blx	r3
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	6123      	str	r3, [r4, #16]
 8006ec8:	e7f1      	b.n	8006eae <_scanf_float+0x2aa>
 8006eca:	9802      	ldr	r0, [sp, #8]
 8006ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ed0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ed4:	9002      	str	r0, [sp, #8]
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	4640      	mov	r0, r8
 8006eda:	4798      	blx	r3
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ee6:	fa5f fa8a 	uxtb.w	sl, sl
 8006eea:	f1ba 0f02 	cmp.w	sl, #2
 8006eee:	d1ec      	bne.n	8006eca <_scanf_float+0x2c6>
 8006ef0:	3d03      	subs	r5, #3
 8006ef2:	b2ed      	uxtb	r5, r5
 8006ef4:	1b76      	subs	r6, r6, r5
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	05da      	lsls	r2, r3, #23
 8006efa:	d52f      	bpl.n	8006f5c <_scanf_float+0x358>
 8006efc:	055b      	lsls	r3, r3, #21
 8006efe:	d510      	bpl.n	8006f22 <_scanf_float+0x31e>
 8006f00:	455e      	cmp	r6, fp
 8006f02:	f67f aebf 	bls.w	8006c84 <_scanf_float+0x80>
 8006f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f0e:	463a      	mov	r2, r7
 8006f10:	4640      	mov	r0, r8
 8006f12:	4798      	blx	r3
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	6123      	str	r3, [r4, #16]
 8006f1a:	e7f1      	b.n	8006f00 <_scanf_float+0x2fc>
 8006f1c:	46aa      	mov	sl, r5
 8006f1e:	9602      	str	r6, [sp, #8]
 8006f20:	e7df      	b.n	8006ee2 <_scanf_float+0x2de>
 8006f22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	2965      	cmp	r1, #101	; 0x65
 8006f2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	d00c      	beq.n	8006f50 <_scanf_float+0x34c>
 8006f36:	2945      	cmp	r1, #69	; 0x45
 8006f38:	d00a      	beq.n	8006f50 <_scanf_float+0x34c>
 8006f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f3e:	463a      	mov	r2, r7
 8006f40:	4640      	mov	r0, r8
 8006f42:	4798      	blx	r3
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	1eb5      	subs	r5, r6, #2
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f54:	463a      	mov	r2, r7
 8006f56:	4640      	mov	r0, r8
 8006f58:	4798      	blx	r3
 8006f5a:	462e      	mov	r6, r5
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	f015 0510 	ands.w	r5, r5, #16
 8006f62:	d14d      	bne.n	8007000 <_scanf_float+0x3fc>
 8006f64:	7035      	strb	r5, [r6, #0]
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f70:	d11a      	bne.n	8006fa8 <_scanf_float+0x3a4>
 8006f72:	9b01      	ldr	r3, [sp, #4]
 8006f74:	454b      	cmp	r3, r9
 8006f76:	eba3 0209 	sub.w	r2, r3, r9
 8006f7a:	d122      	bne.n	8006fc2 <_scanf_float+0x3be>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4659      	mov	r1, fp
 8006f80:	4640      	mov	r0, r8
 8006f82:	f000 fe5b 	bl	8007c3c <_strtod_r>
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	6821      	ldr	r1, [r4, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f011 0f02 	tst.w	r1, #2
 8006f90:	f103 0204 	add.w	r2, r3, #4
 8006f94:	d020      	beq.n	8006fd8 <_scanf_float+0x3d4>
 8006f96:	9903      	ldr	r1, [sp, #12]
 8006f98:	600a      	str	r2, [r1, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	ed83 0b00 	vstr	d0, [r3]
 8006fa0:	68e3      	ldr	r3, [r4, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60e3      	str	r3, [r4, #12]
 8006fa6:	e66e      	b.n	8006c86 <_scanf_float+0x82>
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0e6      	beq.n	8006f7c <_scanf_float+0x378>
 8006fae:	9905      	ldr	r1, [sp, #20]
 8006fb0:	230a      	movs	r3, #10
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	3101      	adds	r1, #1
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f000 feca 	bl	8007d50 <_strtol_r>
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	9e05      	ldr	r6, [sp, #20]
 8006fc0:	1ac2      	subs	r2, r0, r3
 8006fc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	bf28      	it	cs
 8006fca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006fce:	490d      	ldr	r1, [pc, #52]	; (8007004 <_scanf_float+0x400>)
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f000 f821 	bl	8007018 <siprintf>
 8006fd6:	e7d1      	b.n	8006f7c <_scanf_float+0x378>
 8006fd8:	f011 0f04 	tst.w	r1, #4
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	600a      	str	r2, [r1, #0]
 8006fe0:	d1db      	bne.n	8006f9a <_scanf_float+0x396>
 8006fe2:	eeb4 0b40 	vcmp.f64	d0, d0
 8006fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fea:	681e      	ldr	r6, [r3, #0]
 8006fec:	d705      	bvc.n	8006ffa <_scanf_float+0x3f6>
 8006fee:	4806      	ldr	r0, [pc, #24]	; (8007008 <_scanf_float+0x404>)
 8006ff0:	f000 f80c 	bl	800700c <nanf>
 8006ff4:	ed86 0a00 	vstr	s0, [r6]
 8006ff8:	e7d2      	b.n	8006fa0 <_scanf_float+0x39c>
 8006ffa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006ffe:	e7f9      	b.n	8006ff4 <_scanf_float+0x3f0>
 8007000:	2500      	movs	r5, #0
 8007002:	e640      	b.n	8006c86 <_scanf_float+0x82>
 8007004:	0800aab0 	.word	0x0800aab0
 8007008:	0800aec8 	.word	0x0800aec8

0800700c <nanf>:
 800700c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007014 <nanf+0x8>
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	7fc00000 	.word	0x7fc00000

08007018 <siprintf>:
 8007018:	b40e      	push	{r1, r2, r3}
 800701a:	b500      	push	{lr}
 800701c:	b09c      	sub	sp, #112	; 0x70
 800701e:	ab1d      	add	r3, sp, #116	; 0x74
 8007020:	9002      	str	r0, [sp, #8]
 8007022:	9006      	str	r0, [sp, #24]
 8007024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007028:	4809      	ldr	r0, [pc, #36]	; (8007050 <siprintf+0x38>)
 800702a:	9107      	str	r1, [sp, #28]
 800702c:	9104      	str	r1, [sp, #16]
 800702e:	4909      	ldr	r1, [pc, #36]	; (8007054 <siprintf+0x3c>)
 8007030:	f853 2b04 	ldr.w	r2, [r3], #4
 8007034:	9105      	str	r1, [sp, #20]
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	a902      	add	r1, sp, #8
 800703c:	f002 fe08 	bl	8009c50 <_svfiprintf_r>
 8007040:	9b02      	ldr	r3, [sp, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	b01c      	add	sp, #112	; 0x70
 8007048:	f85d eb04 	ldr.w	lr, [sp], #4
 800704c:	b003      	add	sp, #12
 800704e:	4770      	bx	lr
 8007050:	20000024 	.word	0x20000024
 8007054:	ffff0208 	.word	0xffff0208

08007058 <sulp>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	460d      	mov	r5, r1
 800705e:	4616      	mov	r6, r2
 8007060:	ec45 4b10 	vmov	d0, r4, r5
 8007064:	f002 fb8e 	bl	8009784 <__ulp>
 8007068:	b17e      	cbz	r6, 800708a <sulp+0x32>
 800706a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800706e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007072:	2b00      	cmp	r3, #0
 8007074:	dd09      	ble.n	800708a <sulp+0x32>
 8007076:	051b      	lsls	r3, r3, #20
 8007078:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800707c:	2000      	movs	r0, #0
 800707e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007082:	ec41 0b17 	vmov	d7, r0, r1
 8007086:	ee20 0b07 	vmul.f64	d0, d0, d7
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	0000      	movs	r0, r0
	...

08007090 <_strtod_l>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	ed2d 8b0c 	vpush	{d8-d13}
 8007098:	b09d      	sub	sp, #116	; 0x74
 800709a:	461f      	mov	r7, r3
 800709c:	2300      	movs	r3, #0
 800709e:	9318      	str	r3, [sp, #96]	; 0x60
 80070a0:	4ba6      	ldr	r3, [pc, #664]	; (800733c <_strtod_l+0x2ac>)
 80070a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	9308      	str	r3, [sp, #32]
 80070a8:	4604      	mov	r4, r0
 80070aa:	4618      	mov	r0, r3
 80070ac:	468a      	mov	sl, r1
 80070ae:	f7f9 f917 	bl	80002e0 <strlen>
 80070b2:	f04f 0800 	mov.w	r8, #0
 80070b6:	4605      	mov	r5, r0
 80070b8:	f04f 0900 	mov.w	r9, #0
 80070bc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80070c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	2a2b      	cmp	r2, #43	; 0x2b
 80070c6:	d04d      	beq.n	8007164 <_strtod_l+0xd4>
 80070c8:	d83a      	bhi.n	8007140 <_strtod_l+0xb0>
 80070ca:	2a0d      	cmp	r2, #13
 80070cc:	d833      	bhi.n	8007136 <_strtod_l+0xa6>
 80070ce:	2a08      	cmp	r2, #8
 80070d0:	d833      	bhi.n	800713a <_strtod_l+0xaa>
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d03d      	beq.n	8007152 <_strtod_l+0xc2>
 80070d6:	2300      	movs	r3, #0
 80070d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80070da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80070dc:	7833      	ldrb	r3, [r6, #0]
 80070de:	2b30      	cmp	r3, #48	; 0x30
 80070e0:	f040 80b6 	bne.w	8007250 <_strtod_l+0x1c0>
 80070e4:	7873      	ldrb	r3, [r6, #1]
 80070e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80070ea:	2b58      	cmp	r3, #88	; 0x58
 80070ec:	d16d      	bne.n	80071ca <_strtod_l+0x13a>
 80070ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	ab18      	add	r3, sp, #96	; 0x60
 80070f4:	9702      	str	r7, [sp, #8]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	4a91      	ldr	r2, [pc, #580]	; (8007340 <_strtod_l+0x2b0>)
 80070fa:	ab19      	add	r3, sp, #100	; 0x64
 80070fc:	a917      	add	r1, sp, #92	; 0x5c
 80070fe:	4620      	mov	r0, r4
 8007100:	f001 fca0 	bl	8008a44 <__gethex>
 8007104:	f010 0507 	ands.w	r5, r0, #7
 8007108:	4607      	mov	r7, r0
 800710a:	d005      	beq.n	8007118 <_strtod_l+0x88>
 800710c:	2d06      	cmp	r5, #6
 800710e:	d12b      	bne.n	8007168 <_strtod_l+0xd8>
 8007110:	3601      	adds	r6, #1
 8007112:	2300      	movs	r3, #0
 8007114:	9617      	str	r6, [sp, #92]	; 0x5c
 8007116:	930b      	str	r3, [sp, #44]	; 0x2c
 8007118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 856e 	bne.w	8007bfc <_strtod_l+0xb6c>
 8007120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007122:	b1e3      	cbz	r3, 800715e <_strtod_l+0xce>
 8007124:	ec49 8b17 	vmov	d7, r8, r9
 8007128:	eeb1 0b47 	vneg.f64	d0, d7
 800712c:	b01d      	add	sp, #116	; 0x74
 800712e:	ecbd 8b0c 	vpop	{d8-d13}
 8007132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007136:	2a20      	cmp	r2, #32
 8007138:	d1cd      	bne.n	80070d6 <_strtod_l+0x46>
 800713a:	3301      	adds	r3, #1
 800713c:	9317      	str	r3, [sp, #92]	; 0x5c
 800713e:	e7bf      	b.n	80070c0 <_strtod_l+0x30>
 8007140:	2a2d      	cmp	r2, #45	; 0x2d
 8007142:	d1c8      	bne.n	80070d6 <_strtod_l+0x46>
 8007144:	2201      	movs	r2, #1
 8007146:	920b      	str	r2, [sp, #44]	; 0x2c
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	9217      	str	r2, [sp, #92]	; 0x5c
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1c3      	bne.n	80070da <_strtod_l+0x4a>
 8007152:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007154:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 854d 	bne.w	8007bf8 <_strtod_l+0xb68>
 800715e:	ec49 8b10 	vmov	d0, r8, r9
 8007162:	e7e3      	b.n	800712c <_strtod_l+0x9c>
 8007164:	2200      	movs	r2, #0
 8007166:	e7ee      	b.n	8007146 <_strtod_l+0xb6>
 8007168:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800716a:	b13a      	cbz	r2, 800717c <_strtod_l+0xec>
 800716c:	2135      	movs	r1, #53	; 0x35
 800716e:	a81a      	add	r0, sp, #104	; 0x68
 8007170:	f002 fc14 	bl	800999c <__copybits>
 8007174:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007176:	4620      	mov	r0, r4
 8007178:	f001 ffd8 	bl	800912c <_Bfree>
 800717c:	3d01      	subs	r5, #1
 800717e:	2d05      	cmp	r5, #5
 8007180:	d807      	bhi.n	8007192 <_strtod_l+0x102>
 8007182:	e8df f005 	tbb	[pc, r5]
 8007186:	0b0e      	.short	0x0b0e
 8007188:	030e1d18 	.word	0x030e1d18
 800718c:	f04f 0900 	mov.w	r9, #0
 8007190:	46c8      	mov	r8, r9
 8007192:	073b      	lsls	r3, r7, #28
 8007194:	d5c0      	bpl.n	8007118 <_strtod_l+0x88>
 8007196:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800719a:	e7bd      	b.n	8007118 <_strtod_l+0x88>
 800719c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80071a0:	e7f7      	b.n	8007192 <_strtod_l+0x102>
 80071a2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80071a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80071b4:	e7ed      	b.n	8007192 <_strtod_l+0x102>
 80071b6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8007344 <_strtod_l+0x2b4>
 80071ba:	f04f 0800 	mov.w	r8, #0
 80071be:	e7e8      	b.n	8007192 <_strtod_l+0x102>
 80071c0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80071c4:	f04f 38ff 	mov.w	r8, #4294967295
 80071c8:	e7e3      	b.n	8007192 <_strtod_l+0x102>
 80071ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b30      	cmp	r3, #48	; 0x30
 80071d4:	d0f9      	beq.n	80071ca <_strtod_l+0x13a>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d09e      	beq.n	8007118 <_strtod_l+0x88>
 80071da:	2301      	movs	r3, #1
 80071dc:	9306      	str	r3, [sp, #24]
 80071de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071e0:	930c      	str	r3, [sp, #48]	; 0x30
 80071e2:	2300      	movs	r3, #0
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	930a      	str	r3, [sp, #40]	; 0x28
 80071e8:	461e      	mov	r6, r3
 80071ea:	220a      	movs	r2, #10
 80071ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80071ee:	f890 b000 	ldrb.w	fp, [r0]
 80071f2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80071f6:	b2d9      	uxtb	r1, r3
 80071f8:	2909      	cmp	r1, #9
 80071fa:	d92b      	bls.n	8007254 <_strtod_l+0x1c4>
 80071fc:	9908      	ldr	r1, [sp, #32]
 80071fe:	462a      	mov	r2, r5
 8007200:	f002 fe3e 	bl	8009e80 <strncmp>
 8007204:	2800      	cmp	r0, #0
 8007206:	d035      	beq.n	8007274 <_strtod_l+0x1e4>
 8007208:	2000      	movs	r0, #0
 800720a:	465a      	mov	r2, fp
 800720c:	4633      	mov	r3, r6
 800720e:	4683      	mov	fp, r0
 8007210:	4601      	mov	r1, r0
 8007212:	2a65      	cmp	r2, #101	; 0x65
 8007214:	d001      	beq.n	800721a <_strtod_l+0x18a>
 8007216:	2a45      	cmp	r2, #69	; 0x45
 8007218:	d118      	bne.n	800724c <_strtod_l+0x1bc>
 800721a:	b91b      	cbnz	r3, 8007224 <_strtod_l+0x194>
 800721c:	9b06      	ldr	r3, [sp, #24]
 800721e:	4303      	orrs	r3, r0
 8007220:	d097      	beq.n	8007152 <_strtod_l+0xc2>
 8007222:	2300      	movs	r3, #0
 8007224:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8007228:	f10a 0201 	add.w	r2, sl, #1
 800722c:	9217      	str	r2, [sp, #92]	; 0x5c
 800722e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8007232:	2a2b      	cmp	r2, #43	; 0x2b
 8007234:	d077      	beq.n	8007326 <_strtod_l+0x296>
 8007236:	2a2d      	cmp	r2, #45	; 0x2d
 8007238:	d07d      	beq.n	8007336 <_strtod_l+0x2a6>
 800723a:	f04f 0e00 	mov.w	lr, #0
 800723e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007242:	2d09      	cmp	r5, #9
 8007244:	f240 8084 	bls.w	8007350 <_strtod_l+0x2c0>
 8007248:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800724c:	2500      	movs	r5, #0
 800724e:	e09f      	b.n	8007390 <_strtod_l+0x300>
 8007250:	2300      	movs	r3, #0
 8007252:	e7c3      	b.n	80071dc <_strtod_l+0x14c>
 8007254:	2e08      	cmp	r6, #8
 8007256:	bfd5      	itete	le
 8007258:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800725a:	9904      	ldrgt	r1, [sp, #16]
 800725c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007260:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007264:	f100 0001 	add.w	r0, r0, #1
 8007268:	bfd4      	ite	le
 800726a:	930a      	strle	r3, [sp, #40]	; 0x28
 800726c:	9304      	strgt	r3, [sp, #16]
 800726e:	3601      	adds	r6, #1
 8007270:	9017      	str	r0, [sp, #92]	; 0x5c
 8007272:	e7bb      	b.n	80071ec <_strtod_l+0x15c>
 8007274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007276:	195a      	adds	r2, r3, r5
 8007278:	9217      	str	r2, [sp, #92]	; 0x5c
 800727a:	5d5a      	ldrb	r2, [r3, r5]
 800727c:	b3ae      	cbz	r6, 80072ea <_strtod_l+0x25a>
 800727e:	4683      	mov	fp, r0
 8007280:	4633      	mov	r3, r6
 8007282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007286:	2909      	cmp	r1, #9
 8007288:	d912      	bls.n	80072b0 <_strtod_l+0x220>
 800728a:	2101      	movs	r1, #1
 800728c:	e7c1      	b.n	8007212 <_strtod_l+0x182>
 800728e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	9217      	str	r2, [sp, #92]	; 0x5c
 8007294:	785a      	ldrb	r2, [r3, #1]
 8007296:	3001      	adds	r0, #1
 8007298:	2a30      	cmp	r2, #48	; 0x30
 800729a:	d0f8      	beq.n	800728e <_strtod_l+0x1fe>
 800729c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	f200 84b0 	bhi.w	8007c06 <_strtod_l+0xb76>
 80072a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072a8:	930c      	str	r3, [sp, #48]	; 0x30
 80072aa:	4683      	mov	fp, r0
 80072ac:	2000      	movs	r0, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	3a30      	subs	r2, #48	; 0x30
 80072b2:	f100 0101 	add.w	r1, r0, #1
 80072b6:	d012      	beq.n	80072de <_strtod_l+0x24e>
 80072b8:	448b      	add	fp, r1
 80072ba:	eb00 0c03 	add.w	ip, r0, r3
 80072be:	4619      	mov	r1, r3
 80072c0:	250a      	movs	r5, #10
 80072c2:	4561      	cmp	r1, ip
 80072c4:	d113      	bne.n	80072ee <_strtod_l+0x25e>
 80072c6:	1819      	adds	r1, r3, r0
 80072c8:	2908      	cmp	r1, #8
 80072ca:	f103 0301 	add.w	r3, r3, #1
 80072ce:	4403      	add	r3, r0
 80072d0:	dc1d      	bgt.n	800730e <_strtod_l+0x27e>
 80072d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072d4:	210a      	movs	r1, #10
 80072d6:	fb01 2200 	mla	r2, r1, r0, r2
 80072da:	920a      	str	r2, [sp, #40]	; 0x28
 80072dc:	2100      	movs	r1, #0
 80072de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072e0:	1c50      	adds	r0, r2, #1
 80072e2:	9017      	str	r0, [sp, #92]	; 0x5c
 80072e4:	7852      	ldrb	r2, [r2, #1]
 80072e6:	4608      	mov	r0, r1
 80072e8:	e7cb      	b.n	8007282 <_strtod_l+0x1f2>
 80072ea:	4630      	mov	r0, r6
 80072ec:	e7d4      	b.n	8007298 <_strtod_l+0x208>
 80072ee:	2908      	cmp	r1, #8
 80072f0:	dc04      	bgt.n	80072fc <_strtod_l+0x26c>
 80072f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80072f4:	436f      	muls	r7, r5
 80072f6:	970a      	str	r7, [sp, #40]	; 0x28
 80072f8:	3101      	adds	r1, #1
 80072fa:	e7e2      	b.n	80072c2 <_strtod_l+0x232>
 80072fc:	f101 0e01 	add.w	lr, r1, #1
 8007300:	f1be 0f10 	cmp.w	lr, #16
 8007304:	bfde      	ittt	le
 8007306:	9f04      	ldrle	r7, [sp, #16]
 8007308:	436f      	mulle	r7, r5
 800730a:	9704      	strle	r7, [sp, #16]
 800730c:	e7f4      	b.n	80072f8 <_strtod_l+0x268>
 800730e:	2b10      	cmp	r3, #16
 8007310:	bfdf      	itttt	le
 8007312:	9804      	ldrle	r0, [sp, #16]
 8007314:	210a      	movle	r1, #10
 8007316:	fb01 2200 	mlale	r2, r1, r0, r2
 800731a:	9204      	strle	r2, [sp, #16]
 800731c:	e7de      	b.n	80072dc <_strtod_l+0x24c>
 800731e:	f04f 0b00 	mov.w	fp, #0
 8007322:	2101      	movs	r1, #1
 8007324:	e77a      	b.n	800721c <_strtod_l+0x18c>
 8007326:	f04f 0e00 	mov.w	lr, #0
 800732a:	f10a 0202 	add.w	r2, sl, #2
 800732e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007330:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8007334:	e783      	b.n	800723e <_strtod_l+0x1ae>
 8007336:	f04f 0e01 	mov.w	lr, #1
 800733a:	e7f6      	b.n	800732a <_strtod_l+0x29a>
 800733c:	0800ad08 	.word	0x0800ad08
 8007340:	0800aab8 	.word	0x0800aab8
 8007344:	7ff00000 	.word	0x7ff00000
 8007348:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800734a:	1c55      	adds	r5, r2, #1
 800734c:	9517      	str	r5, [sp, #92]	; 0x5c
 800734e:	7852      	ldrb	r2, [r2, #1]
 8007350:	2a30      	cmp	r2, #48	; 0x30
 8007352:	d0f9      	beq.n	8007348 <_strtod_l+0x2b8>
 8007354:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007358:	2d08      	cmp	r5, #8
 800735a:	f63f af77 	bhi.w	800724c <_strtod_l+0x1bc>
 800735e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007364:	9208      	str	r2, [sp, #32]
 8007366:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007368:	1c55      	adds	r5, r2, #1
 800736a:	9517      	str	r5, [sp, #92]	; 0x5c
 800736c:	7852      	ldrb	r2, [r2, #1]
 800736e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007372:	2f09      	cmp	r7, #9
 8007374:	d937      	bls.n	80073e6 <_strtod_l+0x356>
 8007376:	9f08      	ldr	r7, [sp, #32]
 8007378:	1bed      	subs	r5, r5, r7
 800737a:	2d08      	cmp	r5, #8
 800737c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007380:	dc02      	bgt.n	8007388 <_strtod_l+0x2f8>
 8007382:	4565      	cmp	r5, ip
 8007384:	bfa8      	it	ge
 8007386:	4665      	movge	r5, ip
 8007388:	f1be 0f00 	cmp.w	lr, #0
 800738c:	d000      	beq.n	8007390 <_strtod_l+0x300>
 800738e:	426d      	negs	r5, r5
 8007390:	2b00      	cmp	r3, #0
 8007392:	d14f      	bne.n	8007434 <_strtod_l+0x3a4>
 8007394:	9b06      	ldr	r3, [sp, #24]
 8007396:	4303      	orrs	r3, r0
 8007398:	f47f aebe 	bne.w	8007118 <_strtod_l+0x88>
 800739c:	2900      	cmp	r1, #0
 800739e:	f47f aed8 	bne.w	8007152 <_strtod_l+0xc2>
 80073a2:	2a69      	cmp	r2, #105	; 0x69
 80073a4:	d027      	beq.n	80073f6 <_strtod_l+0x366>
 80073a6:	dc24      	bgt.n	80073f2 <_strtod_l+0x362>
 80073a8:	2a49      	cmp	r2, #73	; 0x49
 80073aa:	d024      	beq.n	80073f6 <_strtod_l+0x366>
 80073ac:	2a4e      	cmp	r2, #78	; 0x4e
 80073ae:	f47f aed0 	bne.w	8007152 <_strtod_l+0xc2>
 80073b2:	499b      	ldr	r1, [pc, #620]	; (8007620 <_strtod_l+0x590>)
 80073b4:	a817      	add	r0, sp, #92	; 0x5c
 80073b6:	f001 fd9d 	bl	8008ef4 <__match>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f43f aec9 	beq.w	8007152 <_strtod_l+0xc2>
 80073c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b28      	cmp	r3, #40	; 0x28
 80073c6:	d12d      	bne.n	8007424 <_strtod_l+0x394>
 80073c8:	4996      	ldr	r1, [pc, #600]	; (8007624 <_strtod_l+0x594>)
 80073ca:	aa1a      	add	r2, sp, #104	; 0x68
 80073cc:	a817      	add	r0, sp, #92	; 0x5c
 80073ce:	f001 fda5 	bl	8008f1c <__hexnan>
 80073d2:	2805      	cmp	r0, #5
 80073d4:	d126      	bne.n	8007424 <_strtod_l+0x394>
 80073d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80073dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80073e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80073e4:	e698      	b.n	8007118 <_strtod_l+0x88>
 80073e6:	250a      	movs	r5, #10
 80073e8:	fb05 250c 	mla	r5, r5, ip, r2
 80073ec:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80073f0:	e7b9      	b.n	8007366 <_strtod_l+0x2d6>
 80073f2:	2a6e      	cmp	r2, #110	; 0x6e
 80073f4:	e7db      	b.n	80073ae <_strtod_l+0x31e>
 80073f6:	498c      	ldr	r1, [pc, #560]	; (8007628 <_strtod_l+0x598>)
 80073f8:	a817      	add	r0, sp, #92	; 0x5c
 80073fa:	f001 fd7b 	bl	8008ef4 <__match>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f aea7 	beq.w	8007152 <_strtod_l+0xc2>
 8007404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007406:	4989      	ldr	r1, [pc, #548]	; (800762c <_strtod_l+0x59c>)
 8007408:	3b01      	subs	r3, #1
 800740a:	a817      	add	r0, sp, #92	; 0x5c
 800740c:	9317      	str	r3, [sp, #92]	; 0x5c
 800740e:	f001 fd71 	bl	8008ef4 <__match>
 8007412:	b910      	cbnz	r0, 800741a <_strtod_l+0x38a>
 8007414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007416:	3301      	adds	r3, #1
 8007418:	9317      	str	r3, [sp, #92]	; 0x5c
 800741a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007640 <_strtod_l+0x5b0>
 800741e:	f04f 0800 	mov.w	r8, #0
 8007422:	e679      	b.n	8007118 <_strtod_l+0x88>
 8007424:	4882      	ldr	r0, [pc, #520]	; (8007630 <_strtod_l+0x5a0>)
 8007426:	f002 fd13 	bl	8009e50 <nan>
 800742a:	ed8d 0b04 	vstr	d0, [sp, #16]
 800742e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007432:	e671      	b.n	8007118 <_strtod_l+0x88>
 8007434:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007438:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800743c:	eba5 020b 	sub.w	r2, r5, fp
 8007440:	2e00      	cmp	r6, #0
 8007442:	bf08      	it	eq
 8007444:	461e      	moveq	r6, r3
 8007446:	2b10      	cmp	r3, #16
 8007448:	ed8d 7b08 	vstr	d7, [sp, #32]
 800744c:	9206      	str	r2, [sp, #24]
 800744e:	461a      	mov	r2, r3
 8007450:	bfa8      	it	ge
 8007452:	2210      	movge	r2, #16
 8007454:	2b09      	cmp	r3, #9
 8007456:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800745a:	dd0e      	ble.n	800747a <_strtod_l+0x3ea>
 800745c:	4975      	ldr	r1, [pc, #468]	; (8007634 <_strtod_l+0x5a4>)
 800745e:	eddd 7a04 	vldr	s15, [sp, #16]
 8007462:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007466:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800746a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800746e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007472:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007476:	ec59 8b17 	vmov	r8, r9, d7
 800747a:	2b0f      	cmp	r3, #15
 800747c:	dc37      	bgt.n	80074ee <_strtod_l+0x45e>
 800747e:	9906      	ldr	r1, [sp, #24]
 8007480:	2900      	cmp	r1, #0
 8007482:	f43f ae49 	beq.w	8007118 <_strtod_l+0x88>
 8007486:	dd23      	ble.n	80074d0 <_strtod_l+0x440>
 8007488:	2916      	cmp	r1, #22
 800748a:	dc0b      	bgt.n	80074a4 <_strtod_l+0x414>
 800748c:	4b69      	ldr	r3, [pc, #420]	; (8007634 <_strtod_l+0x5a4>)
 800748e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007492:	ed93 7b00 	vldr	d7, [r3]
 8007496:	ec49 8b16 	vmov	d6, r8, r9
 800749a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800749e:	ec59 8b17 	vmov	r8, r9, d7
 80074a2:	e639      	b.n	8007118 <_strtod_l+0x88>
 80074a4:	9806      	ldr	r0, [sp, #24]
 80074a6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80074aa:	4281      	cmp	r1, r0
 80074ac:	db1f      	blt.n	80074ee <_strtod_l+0x45e>
 80074ae:	4a61      	ldr	r2, [pc, #388]	; (8007634 <_strtod_l+0x5a4>)
 80074b0:	f1c3 030f 	rsb	r3, r3, #15
 80074b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80074b8:	ed91 7b00 	vldr	d7, [r1]
 80074bc:	ec49 8b16 	vmov	d6, r8, r9
 80074c0:	1ac3      	subs	r3, r0, r3
 80074c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80074c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074ca:	ed92 6b00 	vldr	d6, [r2]
 80074ce:	e7e4      	b.n	800749a <_strtod_l+0x40a>
 80074d0:	9906      	ldr	r1, [sp, #24]
 80074d2:	3116      	adds	r1, #22
 80074d4:	db0b      	blt.n	80074ee <_strtod_l+0x45e>
 80074d6:	4b57      	ldr	r3, [pc, #348]	; (8007634 <_strtod_l+0x5a4>)
 80074d8:	ebab 0505 	sub.w	r5, fp, r5
 80074dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80074e0:	ed95 7b00 	vldr	d7, [r5]
 80074e4:	ec49 8b16 	vmov	d6, r8, r9
 80074e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80074ec:	e7d7      	b.n	800749e <_strtod_l+0x40e>
 80074ee:	9906      	ldr	r1, [sp, #24]
 80074f0:	1a9a      	subs	r2, r3, r2
 80074f2:	440a      	add	r2, r1
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	dd74      	ble.n	80075e2 <_strtod_l+0x552>
 80074f8:	f012 000f 	ands.w	r0, r2, #15
 80074fc:	d00a      	beq.n	8007514 <_strtod_l+0x484>
 80074fe:	494d      	ldr	r1, [pc, #308]	; (8007634 <_strtod_l+0x5a4>)
 8007500:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007504:	ed91 7b00 	vldr	d7, [r1]
 8007508:	ec49 8b16 	vmov	d6, r8, r9
 800750c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007510:	ec59 8b17 	vmov	r8, r9, d7
 8007514:	f032 020f 	bics.w	r2, r2, #15
 8007518:	d04f      	beq.n	80075ba <_strtod_l+0x52a>
 800751a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800751e:	dd22      	ble.n	8007566 <_strtod_l+0x4d6>
 8007520:	2500      	movs	r5, #0
 8007522:	462e      	mov	r6, r5
 8007524:	950a      	str	r5, [sp, #40]	; 0x28
 8007526:	462f      	mov	r7, r5
 8007528:	2322      	movs	r3, #34	; 0x22
 800752a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007640 <_strtod_l+0x5b0>
 800752e:	6023      	str	r3, [r4, #0]
 8007530:	f04f 0800 	mov.w	r8, #0
 8007534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	f43f adee 	beq.w	8007118 <_strtod_l+0x88>
 800753c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800753e:	4620      	mov	r0, r4
 8007540:	f001 fdf4 	bl	800912c <_Bfree>
 8007544:	4639      	mov	r1, r7
 8007546:	4620      	mov	r0, r4
 8007548:	f001 fdf0 	bl	800912c <_Bfree>
 800754c:	4631      	mov	r1, r6
 800754e:	4620      	mov	r0, r4
 8007550:	f001 fdec 	bl	800912c <_Bfree>
 8007554:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007556:	4620      	mov	r0, r4
 8007558:	f001 fde8 	bl	800912c <_Bfree>
 800755c:	4629      	mov	r1, r5
 800755e:	4620      	mov	r0, r4
 8007560:	f001 fde4 	bl	800912c <_Bfree>
 8007564:	e5d8      	b.n	8007118 <_strtod_l+0x88>
 8007566:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800756a:	2000      	movs	r0, #0
 800756c:	4f32      	ldr	r7, [pc, #200]	; (8007638 <_strtod_l+0x5a8>)
 800756e:	1112      	asrs	r2, r2, #4
 8007570:	4601      	mov	r1, r0
 8007572:	2a01      	cmp	r2, #1
 8007574:	dc24      	bgt.n	80075c0 <_strtod_l+0x530>
 8007576:	b108      	cbz	r0, 800757c <_strtod_l+0x4ec>
 8007578:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800757c:	4a2e      	ldr	r2, [pc, #184]	; (8007638 <_strtod_l+0x5a8>)
 800757e:	482f      	ldr	r0, [pc, #188]	; (800763c <_strtod_l+0x5ac>)
 8007580:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007584:	ed91 7b00 	vldr	d7, [r1]
 8007588:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800758c:	ec49 8b16 	vmov	d6, r8, r9
 8007590:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007594:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007598:	9905      	ldr	r1, [sp, #20]
 800759a:	4a29      	ldr	r2, [pc, #164]	; (8007640 <_strtod_l+0x5b0>)
 800759c:	400a      	ands	r2, r1
 800759e:	4282      	cmp	r2, r0
 80075a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80075a4:	d8bc      	bhi.n	8007520 <_strtod_l+0x490>
 80075a6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80075aa:	4282      	cmp	r2, r0
 80075ac:	bf86      	itte	hi
 80075ae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007644 <_strtod_l+0x5b4>
 80075b2:	f04f 38ff 	movhi.w	r8, #4294967295
 80075b6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80075ba:	2200      	movs	r2, #0
 80075bc:	9204      	str	r2, [sp, #16]
 80075be:	e07f      	b.n	80076c0 <_strtod_l+0x630>
 80075c0:	f012 0f01 	tst.w	r2, #1
 80075c4:	d00a      	beq.n	80075dc <_strtod_l+0x54c>
 80075c6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80075ca:	ed90 7b00 	vldr	d7, [r0]
 80075ce:	ed9d 6b04 	vldr	d6, [sp, #16]
 80075d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80075d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075da:	2001      	movs	r0, #1
 80075dc:	3101      	adds	r1, #1
 80075de:	1052      	asrs	r2, r2, #1
 80075e0:	e7c7      	b.n	8007572 <_strtod_l+0x4e2>
 80075e2:	d0ea      	beq.n	80075ba <_strtod_l+0x52a>
 80075e4:	4252      	negs	r2, r2
 80075e6:	f012 000f 	ands.w	r0, r2, #15
 80075ea:	d00a      	beq.n	8007602 <_strtod_l+0x572>
 80075ec:	4911      	ldr	r1, [pc, #68]	; (8007634 <_strtod_l+0x5a4>)
 80075ee:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80075f2:	ed91 7b00 	vldr	d7, [r1]
 80075f6:	ec49 8b16 	vmov	d6, r8, r9
 80075fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80075fe:	ec59 8b17 	vmov	r8, r9, d7
 8007602:	1112      	asrs	r2, r2, #4
 8007604:	d0d9      	beq.n	80075ba <_strtod_l+0x52a>
 8007606:	2a1f      	cmp	r2, #31
 8007608:	dd1e      	ble.n	8007648 <_strtod_l+0x5b8>
 800760a:	2500      	movs	r5, #0
 800760c:	462e      	mov	r6, r5
 800760e:	950a      	str	r5, [sp, #40]	; 0x28
 8007610:	462f      	mov	r7, r5
 8007612:	2322      	movs	r3, #34	; 0x22
 8007614:	f04f 0800 	mov.w	r8, #0
 8007618:	f04f 0900 	mov.w	r9, #0
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	e789      	b.n	8007534 <_strtod_l+0x4a4>
 8007620:	0800aa89 	.word	0x0800aa89
 8007624:	0800aacc 	.word	0x0800aacc
 8007628:	0800aa81 	.word	0x0800aa81
 800762c:	0800ac0c 	.word	0x0800ac0c
 8007630:	0800aec8 	.word	0x0800aec8
 8007634:	0800ada8 	.word	0x0800ada8
 8007638:	0800ad80 	.word	0x0800ad80
 800763c:	7ca00000 	.word	0x7ca00000
 8007640:	7ff00000 	.word	0x7ff00000
 8007644:	7fefffff 	.word	0x7fefffff
 8007648:	f012 0110 	ands.w	r1, r2, #16
 800764c:	bf18      	it	ne
 800764e:	216a      	movne	r1, #106	; 0x6a
 8007650:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007654:	9104      	str	r1, [sp, #16]
 8007656:	49c0      	ldr	r1, [pc, #768]	; (8007958 <_strtod_l+0x8c8>)
 8007658:	2000      	movs	r0, #0
 800765a:	07d7      	lsls	r7, r2, #31
 800765c:	d508      	bpl.n	8007670 <_strtod_l+0x5e0>
 800765e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8007662:	ed91 7b00 	vldr	d7, [r1]
 8007666:	ee26 7b07 	vmul.f64	d7, d6, d7
 800766a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800766e:	2001      	movs	r0, #1
 8007670:	1052      	asrs	r2, r2, #1
 8007672:	f101 0108 	add.w	r1, r1, #8
 8007676:	d1f0      	bne.n	800765a <_strtod_l+0x5ca>
 8007678:	b108      	cbz	r0, 800767e <_strtod_l+0x5ee>
 800767a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800767e:	9a04      	ldr	r2, [sp, #16]
 8007680:	b1ba      	cbz	r2, 80076b2 <_strtod_l+0x622>
 8007682:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007686:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800768a:	2a00      	cmp	r2, #0
 800768c:	4649      	mov	r1, r9
 800768e:	dd10      	ble.n	80076b2 <_strtod_l+0x622>
 8007690:	2a1f      	cmp	r2, #31
 8007692:	f340 8132 	ble.w	80078fa <_strtod_l+0x86a>
 8007696:	2a34      	cmp	r2, #52	; 0x34
 8007698:	bfde      	ittt	le
 800769a:	3a20      	suble	r2, #32
 800769c:	f04f 30ff 	movle.w	r0, #4294967295
 80076a0:	fa00 f202 	lslle.w	r2, r0, r2
 80076a4:	f04f 0800 	mov.w	r8, #0
 80076a8:	bfcc      	ite	gt
 80076aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80076ae:	ea02 0901 	andle.w	r9, r2, r1
 80076b2:	ec49 8b17 	vmov	d7, r8, r9
 80076b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076be:	d0a4      	beq.n	800760a <_strtod_l+0x57a>
 80076c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c2:	9200      	str	r2, [sp, #0]
 80076c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076c6:	4632      	mov	r2, r6
 80076c8:	4620      	mov	r0, r4
 80076ca:	f001 fd9b 	bl	8009204 <__s2b>
 80076ce:	900a      	str	r0, [sp, #40]	; 0x28
 80076d0:	2800      	cmp	r0, #0
 80076d2:	f43f af25 	beq.w	8007520 <_strtod_l+0x490>
 80076d6:	9b06      	ldr	r3, [sp, #24]
 80076d8:	ebab 0505 	sub.w	r5, fp, r5
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bfb4      	ite	lt
 80076e0:	462b      	movlt	r3, r5
 80076e2:	2300      	movge	r3, #0
 80076e4:	930c      	str	r3, [sp, #48]	; 0x30
 80076e6:	9b06      	ldr	r3, [sp, #24]
 80076e8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007940 <_strtod_l+0x8b0>
 80076ec:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007948 <_strtod_l+0x8b8>
 80076f0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007950 <_strtod_l+0x8c0>
 80076f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80076f8:	2500      	movs	r5, #0
 80076fa:	9312      	str	r3, [sp, #72]	; 0x48
 80076fc:	462e      	mov	r6, r5
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	4620      	mov	r0, r4
 8007702:	6859      	ldr	r1, [r3, #4]
 8007704:	f001 fcd2 	bl	80090ac <_Balloc>
 8007708:	4607      	mov	r7, r0
 800770a:	2800      	cmp	r0, #0
 800770c:	f43f af0c 	beq.w	8007528 <_strtod_l+0x498>
 8007710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	3202      	adds	r2, #2
 8007716:	f103 010c 	add.w	r1, r3, #12
 800771a:	0092      	lsls	r2, r2, #2
 800771c:	300c      	adds	r0, #12
 800771e:	f001 fcb7 	bl	8009090 <memcpy>
 8007722:	ec49 8b10 	vmov	d0, r8, r9
 8007726:	aa1a      	add	r2, sp, #104	; 0x68
 8007728:	a919      	add	r1, sp, #100	; 0x64
 800772a:	4620      	mov	r0, r4
 800772c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007730:	f002 f8a4 	bl	800987c <__d2b>
 8007734:	9018      	str	r0, [sp, #96]	; 0x60
 8007736:	2800      	cmp	r0, #0
 8007738:	f43f aef6 	beq.w	8007528 <_strtod_l+0x498>
 800773c:	2101      	movs	r1, #1
 800773e:	4620      	mov	r0, r4
 8007740:	f001 fdfa 	bl	8009338 <__i2b>
 8007744:	4606      	mov	r6, r0
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f aeee 	beq.w	8007528 <_strtod_l+0x498>
 800774c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800774e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007750:	2b00      	cmp	r3, #0
 8007752:	bfab      	itete	ge
 8007754:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007756:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007758:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800775c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007760:	bfac      	ite	ge
 8007762:	eb03 0b02 	addge.w	fp, r3, r2
 8007766:	eba2 0a03 	sublt.w	sl, r2, r3
 800776a:	9a04      	ldr	r2, [sp, #16]
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	440b      	add	r3, r1
 8007770:	4a7a      	ldr	r2, [pc, #488]	; (800795c <_strtod_l+0x8cc>)
 8007772:	3b01      	subs	r3, #1
 8007774:	4293      	cmp	r3, r2
 8007776:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800777a:	f280 80d1 	bge.w	8007920 <_strtod_l+0x890>
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	2a1f      	cmp	r2, #31
 8007782:	eba1 0102 	sub.w	r1, r1, r2
 8007786:	f04f 0001 	mov.w	r0, #1
 800778a:	f300 80bd 	bgt.w	8007908 <_strtod_l+0x878>
 800778e:	fa00 f302 	lsl.w	r3, r0, r2
 8007792:	930e      	str	r3, [sp, #56]	; 0x38
 8007794:	2300      	movs	r3, #0
 8007796:	930d      	str	r3, [sp, #52]	; 0x34
 8007798:	eb0b 0301 	add.w	r3, fp, r1
 800779c:	9a04      	ldr	r2, [sp, #16]
 800779e:	459b      	cmp	fp, r3
 80077a0:	448a      	add	sl, r1
 80077a2:	4492      	add	sl, r2
 80077a4:	465a      	mov	r2, fp
 80077a6:	bfa8      	it	ge
 80077a8:	461a      	movge	r2, r3
 80077aa:	4552      	cmp	r2, sl
 80077ac:	bfa8      	it	ge
 80077ae:	4652      	movge	r2, sl
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	bfc2      	ittt	gt
 80077b4:	1a9b      	subgt	r3, r3, r2
 80077b6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80077ba:	ebab 0b02 	subgt.w	fp, fp, r2
 80077be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	dd18      	ble.n	80077f6 <_strtod_l+0x766>
 80077c4:	4631      	mov	r1, r6
 80077c6:	4620      	mov	r0, r4
 80077c8:	9315      	str	r3, [sp, #84]	; 0x54
 80077ca:	f001 fe71 	bl	80094b0 <__pow5mult>
 80077ce:	4606      	mov	r6, r0
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f43f aea9 	beq.w	8007528 <_strtod_l+0x498>
 80077d6:	4601      	mov	r1, r0
 80077d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077da:	4620      	mov	r0, r4
 80077dc:	f001 fdc2 	bl	8009364 <__multiply>
 80077e0:	9014      	str	r0, [sp, #80]	; 0x50
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f43f aea0 	beq.w	8007528 <_strtod_l+0x498>
 80077e8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077ea:	4620      	mov	r0, r4
 80077ec:	f001 fc9e 	bl	800912c <_Bfree>
 80077f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077f4:	9218      	str	r2, [sp, #96]	; 0x60
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f300 8097 	bgt.w	800792a <_strtod_l+0x89a>
 80077fc:	9b06      	ldr	r3, [sp, #24]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	dd08      	ble.n	8007814 <_strtod_l+0x784>
 8007802:	4639      	mov	r1, r7
 8007804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007806:	4620      	mov	r0, r4
 8007808:	f001 fe52 	bl	80094b0 <__pow5mult>
 800780c:	4607      	mov	r7, r0
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f ae8a 	beq.w	8007528 <_strtod_l+0x498>
 8007814:	f1ba 0f00 	cmp.w	sl, #0
 8007818:	dd08      	ble.n	800782c <_strtod_l+0x79c>
 800781a:	4639      	mov	r1, r7
 800781c:	4652      	mov	r2, sl
 800781e:	4620      	mov	r0, r4
 8007820:	f001 fea0 	bl	8009564 <__lshift>
 8007824:	4607      	mov	r7, r0
 8007826:	2800      	cmp	r0, #0
 8007828:	f43f ae7e 	beq.w	8007528 <_strtod_l+0x498>
 800782c:	f1bb 0f00 	cmp.w	fp, #0
 8007830:	dd08      	ble.n	8007844 <_strtod_l+0x7b4>
 8007832:	4631      	mov	r1, r6
 8007834:	465a      	mov	r2, fp
 8007836:	4620      	mov	r0, r4
 8007838:	f001 fe94 	bl	8009564 <__lshift>
 800783c:	4606      	mov	r6, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f ae72 	beq.w	8007528 <_strtod_l+0x498>
 8007844:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007846:	463a      	mov	r2, r7
 8007848:	4620      	mov	r0, r4
 800784a:	f001 ff13 	bl	8009674 <__mdiff>
 800784e:	4605      	mov	r5, r0
 8007850:	2800      	cmp	r0, #0
 8007852:	f43f ae69 	beq.w	8007528 <_strtod_l+0x498>
 8007856:	2300      	movs	r3, #0
 8007858:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800785c:	60c3      	str	r3, [r0, #12]
 800785e:	4631      	mov	r1, r6
 8007860:	f001 feec 	bl	800963c <__mcmp>
 8007864:	2800      	cmp	r0, #0
 8007866:	da7f      	bge.n	8007968 <_strtod_l+0x8d8>
 8007868:	ea5a 0308 	orrs.w	r3, sl, r8
 800786c:	f040 80a5 	bne.w	80079ba <_strtod_l+0x92a>
 8007870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007874:	2b00      	cmp	r3, #0
 8007876:	f040 80a0 	bne.w	80079ba <_strtod_l+0x92a>
 800787a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800787e:	0d1b      	lsrs	r3, r3, #20
 8007880:	051b      	lsls	r3, r3, #20
 8007882:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007886:	f240 8098 	bls.w	80079ba <_strtod_l+0x92a>
 800788a:	696b      	ldr	r3, [r5, #20]
 800788c:	b91b      	cbnz	r3, 8007896 <_strtod_l+0x806>
 800788e:	692b      	ldr	r3, [r5, #16]
 8007890:	2b01      	cmp	r3, #1
 8007892:	f340 8092 	ble.w	80079ba <_strtod_l+0x92a>
 8007896:	4629      	mov	r1, r5
 8007898:	2201      	movs	r2, #1
 800789a:	4620      	mov	r0, r4
 800789c:	f001 fe62 	bl	8009564 <__lshift>
 80078a0:	4631      	mov	r1, r6
 80078a2:	4605      	mov	r5, r0
 80078a4:	f001 feca 	bl	800963c <__mcmp>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f340 8086 	ble.w	80079ba <_strtod_l+0x92a>
 80078ae:	9904      	ldr	r1, [sp, #16]
 80078b0:	4a2b      	ldr	r2, [pc, #172]	; (8007960 <_strtod_l+0x8d0>)
 80078b2:	464b      	mov	r3, r9
 80078b4:	2900      	cmp	r1, #0
 80078b6:	f000 80a1 	beq.w	80079fc <_strtod_l+0x96c>
 80078ba:	ea02 0109 	and.w	r1, r2, r9
 80078be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80078c2:	f300 809b 	bgt.w	80079fc <_strtod_l+0x96c>
 80078c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078ca:	f77f aea2 	ble.w	8007612 <_strtod_l+0x582>
 80078ce:	4a25      	ldr	r2, [pc, #148]	; (8007964 <_strtod_l+0x8d4>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80078d6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80078da:	ec49 8b17 	vmov	d7, r8, r9
 80078de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80078e6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	bf08      	it	eq
 80078ee:	2322      	moveq	r3, #34	; 0x22
 80078f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078f4:	bf08      	it	eq
 80078f6:	6023      	streq	r3, [r4, #0]
 80078f8:	e620      	b.n	800753c <_strtod_l+0x4ac>
 80078fa:	f04f 31ff 	mov.w	r1, #4294967295
 80078fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007902:	ea02 0808 	and.w	r8, r2, r8
 8007906:	e6d4      	b.n	80076b2 <_strtod_l+0x622>
 8007908:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800790c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007910:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007914:	33e2      	adds	r3, #226	; 0xe2
 8007916:	fa00 f303 	lsl.w	r3, r0, r3
 800791a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800791e:	e73b      	b.n	8007798 <_strtod_l+0x708>
 8007920:	2000      	movs	r0, #0
 8007922:	2301      	movs	r3, #1
 8007924:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8007928:	e736      	b.n	8007798 <_strtod_l+0x708>
 800792a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800792c:	461a      	mov	r2, r3
 800792e:	4620      	mov	r0, r4
 8007930:	f001 fe18 	bl	8009564 <__lshift>
 8007934:	9018      	str	r0, [sp, #96]	; 0x60
 8007936:	2800      	cmp	r0, #0
 8007938:	f47f af60 	bne.w	80077fc <_strtod_l+0x76c>
 800793c:	e5f4      	b.n	8007528 <_strtod_l+0x498>
 800793e:	bf00      	nop
 8007940:	94a03595 	.word	0x94a03595
 8007944:	3fcfffff 	.word	0x3fcfffff
 8007948:	94a03595 	.word	0x94a03595
 800794c:	3fdfffff 	.word	0x3fdfffff
 8007950:	35afe535 	.word	0x35afe535
 8007954:	3fe00000 	.word	0x3fe00000
 8007958:	0800aae0 	.word	0x0800aae0
 800795c:	fffffc02 	.word	0xfffffc02
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	39500000 	.word	0x39500000
 8007968:	46cb      	mov	fp, r9
 800796a:	d165      	bne.n	8007a38 <_strtod_l+0x9a8>
 800796c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007970:	f1ba 0f00 	cmp.w	sl, #0
 8007974:	d02a      	beq.n	80079cc <_strtod_l+0x93c>
 8007976:	4aaa      	ldr	r2, [pc, #680]	; (8007c20 <_strtod_l+0xb90>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d12b      	bne.n	80079d4 <_strtod_l+0x944>
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	4641      	mov	r1, r8
 8007980:	b1fb      	cbz	r3, 80079c2 <_strtod_l+0x932>
 8007982:	4aa8      	ldr	r2, [pc, #672]	; (8007c24 <_strtod_l+0xb94>)
 8007984:	ea09 0202 	and.w	r2, r9, r2
 8007988:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	d81a      	bhi.n	80079c8 <_strtod_l+0x938>
 8007992:	0d12      	lsrs	r2, r2, #20
 8007994:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007998:	fa00 f303 	lsl.w	r3, r0, r3
 800799c:	4299      	cmp	r1, r3
 800799e:	d119      	bne.n	80079d4 <_strtod_l+0x944>
 80079a0:	4ba1      	ldr	r3, [pc, #644]	; (8007c28 <_strtod_l+0xb98>)
 80079a2:	459b      	cmp	fp, r3
 80079a4:	d102      	bne.n	80079ac <_strtod_l+0x91c>
 80079a6:	3101      	adds	r1, #1
 80079a8:	f43f adbe 	beq.w	8007528 <_strtod_l+0x498>
 80079ac:	4b9d      	ldr	r3, [pc, #628]	; (8007c24 <_strtod_l+0xb94>)
 80079ae:	ea0b 0303 	and.w	r3, fp, r3
 80079b2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80079b6:	f04f 0800 	mov.w	r8, #0
 80079ba:	9b04      	ldr	r3, [sp, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d186      	bne.n	80078ce <_strtod_l+0x83e>
 80079c0:	e5bc      	b.n	800753c <_strtod_l+0x4ac>
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	e7e9      	b.n	800799c <_strtod_l+0x90c>
 80079c8:	4603      	mov	r3, r0
 80079ca:	e7e7      	b.n	800799c <_strtod_l+0x90c>
 80079cc:	ea53 0308 	orrs.w	r3, r3, r8
 80079d0:	f43f af6d 	beq.w	80078ae <_strtod_l+0x81e>
 80079d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d6:	b1db      	cbz	r3, 8007a10 <_strtod_l+0x980>
 80079d8:	ea13 0f0b 	tst.w	r3, fp
 80079dc:	d0ed      	beq.n	80079ba <_strtod_l+0x92a>
 80079de:	9a04      	ldr	r2, [sp, #16]
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f1ba 0f00 	cmp.w	sl, #0
 80079e8:	d016      	beq.n	8007a18 <_strtod_l+0x988>
 80079ea:	f7ff fb35 	bl	8007058 <sulp>
 80079ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80079f2:	ee37 7b00 	vadd.f64	d7, d7, d0
 80079f6:	ec59 8b17 	vmov	r8, r9, d7
 80079fa:	e7de      	b.n	80079ba <_strtod_l+0x92a>
 80079fc:	4013      	ands	r3, r2
 80079fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a02:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a0a:	f04f 38ff 	mov.w	r8, #4294967295
 8007a0e:	e7d4      	b.n	80079ba <_strtod_l+0x92a>
 8007a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a12:	ea13 0f08 	tst.w	r3, r8
 8007a16:	e7e1      	b.n	80079dc <_strtod_l+0x94c>
 8007a18:	f7ff fb1e 	bl	8007058 <sulp>
 8007a1c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007a20:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007a24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a30:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007a34:	d1c1      	bne.n	80079ba <_strtod_l+0x92a>
 8007a36:	e5ec      	b.n	8007612 <_strtod_l+0x582>
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f001 ff7a 	bl	8009934 <__ratio>
 8007a40:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007a44:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	d867      	bhi.n	8007b1e <_strtod_l+0xa8e>
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	d044      	beq.n	8007ade <_strtod_l+0xa4e>
 8007a54:	4b75      	ldr	r3, [pc, #468]	; (8007c2c <_strtod_l+0xb9c>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007a5c:	4971      	ldr	r1, [pc, #452]	; (8007c24 <_strtod_l+0xb94>)
 8007a5e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007c38 <_strtod_l+0xba8>
 8007a62:	ea0b 0001 	and.w	r0, fp, r1
 8007a66:	4560      	cmp	r0, ip
 8007a68:	900d      	str	r0, [sp, #52]	; 0x34
 8007a6a:	f040 808b 	bne.w	8007b84 <_strtod_l+0xaf4>
 8007a6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a72:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007a76:	ec49 8b10 	vmov	d0, r8, r9
 8007a7a:	ec43 2b1c 	vmov	d12, r2, r3
 8007a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a82:	f001 fe7f 	bl	8009784 <__ulp>
 8007a86:	ec49 8b1d 	vmov	d13, r8, r9
 8007a8a:	eeac db00 	vfma.f64	d13, d12, d0
 8007a8e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a94:	4963      	ldr	r1, [pc, #396]	; (8007c24 <_strtod_l+0xb94>)
 8007a96:	4a66      	ldr	r2, [pc, #408]	; (8007c30 <_strtod_l+0xba0>)
 8007a98:	4019      	ands	r1, r3
 8007a9a:	4291      	cmp	r1, r2
 8007a9c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007aa0:	d947      	bls.n	8007b32 <_strtod_l+0xaa2>
 8007aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d103      	bne.n	8007ab4 <_strtod_l+0xa24>
 8007aac:	9b08      	ldr	r3, [sp, #32]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	f43f ad3a 	beq.w	8007528 <_strtod_l+0x498>
 8007ab4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007c28 <_strtod_l+0xb98>
 8007ab8:	f04f 38ff 	mov.w	r8, #4294967295
 8007abc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f001 fb34 	bl	800912c <_Bfree>
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f001 fb30 	bl	800912c <_Bfree>
 8007acc:	4631      	mov	r1, r6
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f001 fb2c 	bl	800912c <_Bfree>
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f001 fb28 	bl	800912c <_Bfree>
 8007adc:	e60f      	b.n	80076fe <_strtod_l+0x66e>
 8007ade:	f1b8 0f00 	cmp.w	r8, #0
 8007ae2:	d112      	bne.n	8007b0a <_strtod_l+0xa7a>
 8007ae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ae8:	b9b3      	cbnz	r3, 8007b18 <_strtod_l+0xa88>
 8007aea:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007aee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007afa:	d401      	bmi.n	8007b00 <_strtod_l+0xa70>
 8007afc:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007b00:	eeb1 7b48 	vneg.f64	d7, d8
 8007b04:	ec53 2b17 	vmov	r2, r3, d7
 8007b08:	e7a8      	b.n	8007a5c <_strtod_l+0x9cc>
 8007b0a:	f1b8 0f01 	cmp.w	r8, #1
 8007b0e:	d103      	bne.n	8007b18 <_strtod_l+0xa88>
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	f43f ad7d 	beq.w	8007612 <_strtod_l+0x582>
 8007b18:	4b46      	ldr	r3, [pc, #280]	; (8007c34 <_strtod_l+0xba4>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	e79c      	b.n	8007a58 <_strtod_l+0x9c8>
 8007b1e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007b22:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007b26:	f1ba 0f00 	cmp.w	sl, #0
 8007b2a:	d0e9      	beq.n	8007b00 <_strtod_l+0xa70>
 8007b2c:	ec53 2b18 	vmov	r2, r3, d8
 8007b30:	e794      	b.n	8007a5c <_strtod_l+0x9cc>
 8007b32:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1bf      	bne.n	8007abc <_strtod_l+0xa2c>
 8007b3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b42:	0d1b      	lsrs	r3, r3, #20
 8007b44:	051b      	lsls	r3, r3, #20
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d1b8      	bne.n	8007abc <_strtod_l+0xa2c>
 8007b4a:	ec51 0b18 	vmov	r0, r1, d8
 8007b4e:	f7f8 fdf3 	bl	8000738 <__aeabi_d2lz>
 8007b52:	f7f8 fdab 	bl	80006ac <__aeabi_l2d>
 8007b56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b5a:	ec41 0b17 	vmov	d7, r0, r1
 8007b5e:	ea43 0308 	orr.w	r3, r3, r8
 8007b62:	ea53 030a 	orrs.w	r3, r3, sl
 8007b66:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007b6a:	d03e      	beq.n	8007bea <_strtod_l+0xb5a>
 8007b6c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b74:	f53f ace2 	bmi.w	800753c <_strtod_l+0x4ac>
 8007b78:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	dd9c      	ble.n	8007abc <_strtod_l+0xa2c>
 8007b82:	e4db      	b.n	800753c <_strtod_l+0x4ac>
 8007b84:	9904      	ldr	r1, [sp, #16]
 8007b86:	b301      	cbz	r1, 8007bca <_strtod_l+0xb3a>
 8007b88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b8a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007b8e:	d81c      	bhi.n	8007bca <_strtod_l+0xb3a>
 8007b90:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007c18 <_strtod_l+0xb88>
 8007b94:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9c:	d811      	bhi.n	8007bc2 <_strtod_l+0xb32>
 8007b9e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007ba2:	ee18 3a10 	vmov	r3, s16
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	bf38      	it	cc
 8007baa:	2301      	movcc	r3, #1
 8007bac:	ee08 3a10 	vmov	s16, r3
 8007bb0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007bb4:	f1ba 0f00 	cmp.w	sl, #0
 8007bb8:	d114      	bne.n	8007be4 <_strtod_l+0xb54>
 8007bba:	eeb1 7b48 	vneg.f64	d7, d8
 8007bbe:	ec53 2b17 	vmov	r2, r3, d7
 8007bc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007bc4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007bc8:	1a0b      	subs	r3, r1, r0
 8007bca:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007bce:	ec43 2b1c 	vmov	d12, r2, r3
 8007bd2:	f001 fdd7 	bl	8009784 <__ulp>
 8007bd6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007bda:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007bde:	ec59 8b17 	vmov	r8, r9, d7
 8007be2:	e7a8      	b.n	8007b36 <_strtod_l+0xaa6>
 8007be4:	ec53 2b18 	vmov	r2, r3, d8
 8007be8:	e7eb      	b.n	8007bc2 <_strtod_l+0xb32>
 8007bea:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf2:	f57f af63 	bpl.w	8007abc <_strtod_l+0xa2c>
 8007bf6:	e4a1      	b.n	800753c <_strtod_l+0x4ac>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	f7ff ba8d 	b.w	8007120 <_strtod_l+0x90>
 8007c06:	2a65      	cmp	r2, #101	; 0x65
 8007c08:	f43f ab89 	beq.w	800731e <_strtod_l+0x28e>
 8007c0c:	2a45      	cmp	r2, #69	; 0x45
 8007c0e:	f43f ab86 	beq.w	800731e <_strtod_l+0x28e>
 8007c12:	2101      	movs	r1, #1
 8007c14:	f7ff bbbe 	b.w	8007394 <_strtod_l+0x304>
 8007c18:	ffc00000 	.word	0xffc00000
 8007c1c:	41dfffff 	.word	0x41dfffff
 8007c20:	000fffff 	.word	0x000fffff
 8007c24:	7ff00000 	.word	0x7ff00000
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	3ff00000 	.word	0x3ff00000
 8007c30:	7c9fffff 	.word	0x7c9fffff
 8007c34:	bff00000 	.word	0xbff00000
 8007c38:	7fe00000 	.word	0x7fe00000

08007c3c <_strtod_r>:
 8007c3c:	4b01      	ldr	r3, [pc, #4]	; (8007c44 <_strtod_r+0x8>)
 8007c3e:	f7ff ba27 	b.w	8007090 <_strtod_l>
 8007c42:	bf00      	nop
 8007c44:	2000008c 	.word	0x2000008c

08007c48 <_strtol_l.isra.0>:
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4e:	d001      	beq.n	8007c54 <_strtol_l.isra.0+0xc>
 8007c50:	2b24      	cmp	r3, #36	; 0x24
 8007c52:	d906      	bls.n	8007c62 <_strtol_l.isra.0+0x1a>
 8007c54:	f7fe fb62 	bl	800631c <__errno>
 8007c58:	2316      	movs	r3, #22
 8007c5a:	6003      	str	r3, [r0, #0]
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c62:	4f3a      	ldr	r7, [pc, #232]	; (8007d4c <_strtol_l.isra.0+0x104>)
 8007c64:	468e      	mov	lr, r1
 8007c66:	4676      	mov	r6, lr
 8007c68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c6c:	5de5      	ldrb	r5, [r4, r7]
 8007c6e:	f015 0508 	ands.w	r5, r5, #8
 8007c72:	d1f8      	bne.n	8007c66 <_strtol_l.isra.0+0x1e>
 8007c74:	2c2d      	cmp	r4, #45	; 0x2d
 8007c76:	d134      	bne.n	8007ce2 <_strtol_l.isra.0+0x9a>
 8007c78:	f89e 4000 	ldrb.w	r4, [lr]
 8007c7c:	f04f 0801 	mov.w	r8, #1
 8007c80:	f106 0e02 	add.w	lr, r6, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d05c      	beq.n	8007d42 <_strtol_l.isra.0+0xfa>
 8007c88:	2b10      	cmp	r3, #16
 8007c8a:	d10c      	bne.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007c8c:	2c30      	cmp	r4, #48	; 0x30
 8007c8e:	d10a      	bne.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007c90:	f89e 4000 	ldrb.w	r4, [lr]
 8007c94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c98:	2c58      	cmp	r4, #88	; 0x58
 8007c9a:	d14d      	bne.n	8007d38 <_strtol_l.isra.0+0xf0>
 8007c9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f10e 0e02 	add.w	lr, lr, #2
 8007ca6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007caa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cae:	2600      	movs	r6, #0
 8007cb0:	fbbc f9f3 	udiv	r9, ip, r3
 8007cb4:	4635      	mov	r5, r6
 8007cb6:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007cbe:	2f09      	cmp	r7, #9
 8007cc0:	d818      	bhi.n	8007cf4 <_strtol_l.isra.0+0xac>
 8007cc2:	463c      	mov	r4, r7
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	dd24      	ble.n	8007d12 <_strtol_l.isra.0+0xca>
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	db1f      	blt.n	8007d0c <_strtol_l.isra.0+0xc4>
 8007ccc:	45a9      	cmp	r9, r5
 8007cce:	d31d      	bcc.n	8007d0c <_strtol_l.isra.0+0xc4>
 8007cd0:	d101      	bne.n	8007cd6 <_strtol_l.isra.0+0x8e>
 8007cd2:	45a2      	cmp	sl, r4
 8007cd4:	db1a      	blt.n	8007d0c <_strtol_l.isra.0+0xc4>
 8007cd6:	fb05 4503 	mla	r5, r5, r3, r4
 8007cda:	2601      	movs	r6, #1
 8007cdc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ce0:	e7eb      	b.n	8007cba <_strtol_l.isra.0+0x72>
 8007ce2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ce4:	bf08      	it	eq
 8007ce6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007cea:	46a8      	mov	r8, r5
 8007cec:	bf08      	it	eq
 8007cee:	f106 0e02 	addeq.w	lr, r6, #2
 8007cf2:	e7c7      	b.n	8007c84 <_strtol_l.isra.0+0x3c>
 8007cf4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007cf8:	2f19      	cmp	r7, #25
 8007cfa:	d801      	bhi.n	8007d00 <_strtol_l.isra.0+0xb8>
 8007cfc:	3c37      	subs	r4, #55	; 0x37
 8007cfe:	e7e1      	b.n	8007cc4 <_strtol_l.isra.0+0x7c>
 8007d00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d04:	2f19      	cmp	r7, #25
 8007d06:	d804      	bhi.n	8007d12 <_strtol_l.isra.0+0xca>
 8007d08:	3c57      	subs	r4, #87	; 0x57
 8007d0a:	e7db      	b.n	8007cc4 <_strtol_l.isra.0+0x7c>
 8007d0c:	f04f 36ff 	mov.w	r6, #4294967295
 8007d10:	e7e4      	b.n	8007cdc <_strtol_l.isra.0+0x94>
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	da05      	bge.n	8007d22 <_strtol_l.isra.0+0xda>
 8007d16:	2322      	movs	r3, #34	; 0x22
 8007d18:	6003      	str	r3, [r0, #0]
 8007d1a:	4665      	mov	r5, ip
 8007d1c:	b942      	cbnz	r2, 8007d30 <_strtol_l.isra.0+0xe8>
 8007d1e:	4628      	mov	r0, r5
 8007d20:	e79d      	b.n	8007c5e <_strtol_l.isra.0+0x16>
 8007d22:	f1b8 0f00 	cmp.w	r8, #0
 8007d26:	d000      	beq.n	8007d2a <_strtol_l.isra.0+0xe2>
 8007d28:	426d      	negs	r5, r5
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	d0f7      	beq.n	8007d1e <_strtol_l.isra.0+0xd6>
 8007d2e:	b10e      	cbz	r6, 8007d34 <_strtol_l.isra.0+0xec>
 8007d30:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007d34:	6011      	str	r1, [r2, #0]
 8007d36:	e7f2      	b.n	8007d1e <_strtol_l.isra.0+0xd6>
 8007d38:	2430      	movs	r4, #48	; 0x30
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1b3      	bne.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007d3e:	2308      	movs	r3, #8
 8007d40:	e7b1      	b.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007d42:	2c30      	cmp	r4, #48	; 0x30
 8007d44:	d0a4      	beq.n	8007c90 <_strtol_l.isra.0+0x48>
 8007d46:	230a      	movs	r3, #10
 8007d48:	e7ad      	b.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007d4a:	bf00      	nop
 8007d4c:	0800ab09 	.word	0x0800ab09

08007d50 <_strtol_r>:
 8007d50:	f7ff bf7a 	b.w	8007c48 <_strtol_l.isra.0>

08007d54 <quorem>:
 8007d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	6903      	ldr	r3, [r0, #16]
 8007d5a:	690c      	ldr	r4, [r1, #16]
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	4607      	mov	r7, r0
 8007d60:	f2c0 8081 	blt.w	8007e66 <quorem+0x112>
 8007d64:	3c01      	subs	r4, #1
 8007d66:	f101 0814 	add.w	r8, r1, #20
 8007d6a:	f100 0514 	add.w	r5, r0, #20
 8007d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d88:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d8c:	d331      	bcc.n	8007df2 <quorem+0x9e>
 8007d8e:	f04f 0e00 	mov.w	lr, #0
 8007d92:	4640      	mov	r0, r8
 8007d94:	46ac      	mov	ip, r5
 8007d96:	46f2      	mov	sl, lr
 8007d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d9c:	b293      	uxth	r3, r2
 8007d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8007da2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ebaa 0303 	sub.w	r3, sl, r3
 8007dac:	0c12      	lsrs	r2, r2, #16
 8007dae:	f8dc a000 	ldr.w	sl, [ip]
 8007db2:	fb06 e202 	mla	r2, r6, r2, lr
 8007db6:	fa13 f38a 	uxtah	r3, r3, sl
 8007dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dbe:	fa1f fa82 	uxth.w	sl, r2
 8007dc2:	f8dc 2000 	ldr.w	r2, [ip]
 8007dc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dd4:	4581      	cmp	r9, r0
 8007dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8007dda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dde:	d2db      	bcs.n	8007d98 <quorem+0x44>
 8007de0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007de4:	b92b      	cbnz	r3, 8007df2 <quorem+0x9e>
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	3b04      	subs	r3, #4
 8007dea:	429d      	cmp	r5, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	d32e      	bcc.n	8007e4e <quorem+0xfa>
 8007df0:	613c      	str	r4, [r7, #16]
 8007df2:	4638      	mov	r0, r7
 8007df4:	f001 fc22 	bl	800963c <__mcmp>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	db24      	blt.n	8007e46 <quorem+0xf2>
 8007dfc:	3601      	adds	r6, #1
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f04f 0c00 	mov.w	ip, #0
 8007e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e08:	f8d0 e000 	ldr.w	lr, [r0]
 8007e0c:	b293      	uxth	r3, r2
 8007e0e:	ebac 0303 	sub.w	r3, ip, r3
 8007e12:	0c12      	lsrs	r2, r2, #16
 8007e14:	fa13 f38e 	uxtah	r3, r3, lr
 8007e18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e26:	45c1      	cmp	r9, r8
 8007e28:	f840 3b04 	str.w	r3, [r0], #4
 8007e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e30:	d2e8      	bcs.n	8007e04 <quorem+0xb0>
 8007e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e3a:	b922      	cbnz	r2, 8007e46 <quorem+0xf2>
 8007e3c:	3b04      	subs	r3, #4
 8007e3e:	429d      	cmp	r5, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	d30a      	bcc.n	8007e5a <quorem+0x106>
 8007e44:	613c      	str	r4, [r7, #16]
 8007e46:	4630      	mov	r0, r6
 8007e48:	b003      	add	sp, #12
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	3b04      	subs	r3, #4
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	d1cc      	bne.n	8007df0 <quorem+0x9c>
 8007e56:	3c01      	subs	r4, #1
 8007e58:	e7c7      	b.n	8007dea <quorem+0x96>
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	d1f0      	bne.n	8007e44 <quorem+0xf0>
 8007e62:	3c01      	subs	r4, #1
 8007e64:	e7eb      	b.n	8007e3e <quorem+0xea>
 8007e66:	2000      	movs	r0, #0
 8007e68:	e7ee      	b.n	8007e48 <quorem+0xf4>
 8007e6a:	0000      	movs	r0, r0
 8007e6c:	0000      	movs	r0, r0
	...

08007e70 <_dtoa_r>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	ec59 8b10 	vmov	r8, r9, d0
 8007e78:	b095      	sub	sp, #84	; 0x54
 8007e7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e7c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007e7e:	9107      	str	r1, [sp, #28]
 8007e80:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007e84:	4606      	mov	r6, r0
 8007e86:	9209      	str	r2, [sp, #36]	; 0x24
 8007e88:	9310      	str	r3, [sp, #64]	; 0x40
 8007e8a:	b975      	cbnz	r5, 8007eaa <_dtoa_r+0x3a>
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	f001 f8e5 	bl	800905c <malloc>
 8007e92:	4602      	mov	r2, r0
 8007e94:	6270      	str	r0, [r6, #36]	; 0x24
 8007e96:	b920      	cbnz	r0, 8007ea2 <_dtoa_r+0x32>
 8007e98:	4bab      	ldr	r3, [pc, #684]	; (8008148 <_dtoa_r+0x2d8>)
 8007e9a:	21ea      	movs	r1, #234	; 0xea
 8007e9c:	48ab      	ldr	r0, [pc, #684]	; (800814c <_dtoa_r+0x2dc>)
 8007e9e:	f002 f80f 	bl	8009ec0 <__assert_func>
 8007ea2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ea6:	6005      	str	r5, [r0, #0]
 8007ea8:	60c5      	str	r5, [r0, #12]
 8007eaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007eac:	6819      	ldr	r1, [r3, #0]
 8007eae:	b151      	cbz	r1, 8007ec6 <_dtoa_r+0x56>
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	604a      	str	r2, [r1, #4]
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4093      	lsls	r3, r2
 8007eb8:	608b      	str	r3, [r1, #8]
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f001 f936 	bl	800912c <_Bfree>
 8007ec0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	f1b9 0300 	subs.w	r3, r9, #0
 8007eca:	bfbb      	ittet	lt
 8007ecc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ed0:	9303      	strlt	r3, [sp, #12]
 8007ed2:	2300      	movge	r3, #0
 8007ed4:	2201      	movlt	r2, #1
 8007ed6:	bfac      	ite	ge
 8007ed8:	6023      	strge	r3, [r4, #0]
 8007eda:	6022      	strlt	r2, [r4, #0]
 8007edc:	4b9c      	ldr	r3, [pc, #624]	; (8008150 <_dtoa_r+0x2e0>)
 8007ede:	9c03      	ldr	r4, [sp, #12]
 8007ee0:	43a3      	bics	r3, r4
 8007ee2:	d11a      	bne.n	8007f1a <_dtoa_r+0xaa>
 8007ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ee6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ef0:	ea53 0308 	orrs.w	r3, r3, r8
 8007ef4:	f000 8512 	beq.w	800891c <_dtoa_r+0xaac>
 8007ef8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007efa:	b953      	cbnz	r3, 8007f12 <_dtoa_r+0xa2>
 8007efc:	4b95      	ldr	r3, [pc, #596]	; (8008154 <_dtoa_r+0x2e4>)
 8007efe:	e01f      	b.n	8007f40 <_dtoa_r+0xd0>
 8007f00:	4b95      	ldr	r3, [pc, #596]	; (8008158 <_dtoa_r+0x2e8>)
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	9800      	ldr	r0, [sp, #0]
 8007f0c:	b015      	add	sp, #84	; 0x54
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	4b90      	ldr	r3, [pc, #576]	; (8008154 <_dtoa_r+0x2e4>)
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	3303      	adds	r3, #3
 8007f18:	e7f5      	b.n	8007f06 <_dtoa_r+0x96>
 8007f1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f26:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f2a:	d10b      	bne.n	8007f44 <_dtoa_r+0xd4>
 8007f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f2e:	2301      	movs	r3, #1
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 84ee 	beq.w	8008916 <_dtoa_r+0xaa6>
 8007f3a:	4888      	ldr	r0, [pc, #544]	; (800815c <_dtoa_r+0x2ec>)
 8007f3c:	6018      	str	r0, [r3, #0]
 8007f3e:	1e43      	subs	r3, r0, #1
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	e7e2      	b.n	8007f0a <_dtoa_r+0x9a>
 8007f44:	a913      	add	r1, sp, #76	; 0x4c
 8007f46:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f4a:	aa12      	add	r2, sp, #72	; 0x48
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f001 fc95 	bl	800987c <__d2b>
 8007f52:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007f56:	4605      	mov	r5, r0
 8007f58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f5a:	2900      	cmp	r1, #0
 8007f5c:	d047      	beq.n	8007fee <_dtoa_r+0x17e>
 8007f5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007f60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007f64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f68:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007f6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f70:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007f74:	2400      	movs	r4, #0
 8007f76:	ec43 2b16 	vmov	d6, r2, r3
 8007f7a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007f7e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008130 <_dtoa_r+0x2c0>
 8007f82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007f86:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008138 <_dtoa_r+0x2c8>
 8007f8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007f8e:	eeb0 7b46 	vmov.f64	d7, d6
 8007f92:	ee06 1a90 	vmov	s13, r1
 8007f96:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007f9a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008140 <_dtoa_r+0x2d0>
 8007f9e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007fa2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007fa6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fae:	ee16 ba90 	vmov	fp, s13
 8007fb2:	9411      	str	r4, [sp, #68]	; 0x44
 8007fb4:	d508      	bpl.n	8007fc8 <_dtoa_r+0x158>
 8007fb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007fba:	eeb4 6b47 	vcmp.f64	d6, d7
 8007fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc2:	bf18      	it	ne
 8007fc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007fc8:	f1bb 0f16 	cmp.w	fp, #22
 8007fcc:	d832      	bhi.n	8008034 <_dtoa_r+0x1c4>
 8007fce:	4b64      	ldr	r3, [pc, #400]	; (8008160 <_dtoa_r+0x2f0>)
 8007fd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fd4:	ed93 7b00 	vldr	d7, [r3]
 8007fd8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007fdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe4:	d501      	bpl.n	8007fea <_dtoa_r+0x17a>
 8007fe6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fea:	2300      	movs	r3, #0
 8007fec:	e023      	b.n	8008036 <_dtoa_r+0x1c6>
 8007fee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ff0:	4401      	add	r1, r0
 8007ff2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	bfc3      	ittte	gt
 8007ffa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ffe:	fa04 f303 	lslgt.w	r3, r4, r3
 8008002:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008006:	f1c3 0320 	rsble	r3, r3, #32
 800800a:	bfc6      	itte	gt
 800800c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008010:	ea43 0308 	orrgt.w	r3, r3, r8
 8008014:	fa08 f303 	lslle.w	r3, r8, r3
 8008018:	ee07 3a90 	vmov	s15, r3
 800801c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008020:	3901      	subs	r1, #1
 8008022:	ed8d 7b00 	vstr	d7, [sp]
 8008026:	9c01      	ldr	r4, [sp, #4]
 8008028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800802c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008030:	2401      	movs	r4, #1
 8008032:	e7a0      	b.n	8007f76 <_dtoa_r+0x106>
 8008034:	2301      	movs	r3, #1
 8008036:	930f      	str	r3, [sp, #60]	; 0x3c
 8008038:	1a43      	subs	r3, r0, r1
 800803a:	1e5a      	subs	r2, r3, #1
 800803c:	bf45      	ittet	mi
 800803e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008042:	9305      	strmi	r3, [sp, #20]
 8008044:	2300      	movpl	r3, #0
 8008046:	2300      	movmi	r3, #0
 8008048:	9206      	str	r2, [sp, #24]
 800804a:	bf54      	ite	pl
 800804c:	9305      	strpl	r3, [sp, #20]
 800804e:	9306      	strmi	r3, [sp, #24]
 8008050:	f1bb 0f00 	cmp.w	fp, #0
 8008054:	db18      	blt.n	8008088 <_dtoa_r+0x218>
 8008056:	9b06      	ldr	r3, [sp, #24]
 8008058:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800805c:	445b      	add	r3, fp
 800805e:	9306      	str	r3, [sp, #24]
 8008060:	2300      	movs	r3, #0
 8008062:	9a07      	ldr	r2, [sp, #28]
 8008064:	2a09      	cmp	r2, #9
 8008066:	d849      	bhi.n	80080fc <_dtoa_r+0x28c>
 8008068:	2a05      	cmp	r2, #5
 800806a:	bfc4      	itt	gt
 800806c:	3a04      	subgt	r2, #4
 800806e:	9207      	strgt	r2, [sp, #28]
 8008070:	9a07      	ldr	r2, [sp, #28]
 8008072:	f1a2 0202 	sub.w	r2, r2, #2
 8008076:	bfcc      	ite	gt
 8008078:	2400      	movgt	r4, #0
 800807a:	2401      	movle	r4, #1
 800807c:	2a03      	cmp	r2, #3
 800807e:	d848      	bhi.n	8008112 <_dtoa_r+0x2a2>
 8008080:	e8df f002 	tbb	[pc, r2]
 8008084:	3a2c2e0b 	.word	0x3a2c2e0b
 8008088:	9b05      	ldr	r3, [sp, #20]
 800808a:	2200      	movs	r2, #0
 800808c:	eba3 030b 	sub.w	r3, r3, fp
 8008090:	9305      	str	r3, [sp, #20]
 8008092:	920e      	str	r2, [sp, #56]	; 0x38
 8008094:	f1cb 0300 	rsb	r3, fp, #0
 8008098:	e7e3      	b.n	8008062 <_dtoa_r+0x1f2>
 800809a:	2200      	movs	r2, #0
 800809c:	9208      	str	r2, [sp, #32]
 800809e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a0:	2a00      	cmp	r2, #0
 80080a2:	dc39      	bgt.n	8008118 <_dtoa_r+0x2a8>
 80080a4:	f04f 0a01 	mov.w	sl, #1
 80080a8:	46d1      	mov	r9, sl
 80080aa:	4652      	mov	r2, sl
 80080ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80080b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80080b2:	2100      	movs	r1, #0
 80080b4:	6079      	str	r1, [r7, #4]
 80080b6:	2004      	movs	r0, #4
 80080b8:	f100 0c14 	add.w	ip, r0, #20
 80080bc:	4594      	cmp	ip, r2
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	d92f      	bls.n	8008122 <_dtoa_r+0x2b2>
 80080c2:	4630      	mov	r0, r6
 80080c4:	930c      	str	r3, [sp, #48]	; 0x30
 80080c6:	f000 fff1 	bl	80090ac <_Balloc>
 80080ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080cc:	9000      	str	r0, [sp, #0]
 80080ce:	4602      	mov	r2, r0
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d149      	bne.n	8008168 <_dtoa_r+0x2f8>
 80080d4:	4b23      	ldr	r3, [pc, #140]	; (8008164 <_dtoa_r+0x2f4>)
 80080d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080da:	e6df      	b.n	8007e9c <_dtoa_r+0x2c>
 80080dc:	2201      	movs	r2, #1
 80080de:	e7dd      	b.n	800809c <_dtoa_r+0x22c>
 80080e0:	2200      	movs	r2, #0
 80080e2:	9208      	str	r2, [sp, #32]
 80080e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e6:	eb0b 0a02 	add.w	sl, fp, r2
 80080ea:	f10a 0901 	add.w	r9, sl, #1
 80080ee:	464a      	mov	r2, r9
 80080f0:	2a01      	cmp	r2, #1
 80080f2:	bfb8      	it	lt
 80080f4:	2201      	movlt	r2, #1
 80080f6:	e7db      	b.n	80080b0 <_dtoa_r+0x240>
 80080f8:	2201      	movs	r2, #1
 80080fa:	e7f2      	b.n	80080e2 <_dtoa_r+0x272>
 80080fc:	2401      	movs	r4, #1
 80080fe:	2200      	movs	r2, #0
 8008100:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008104:	f04f 3aff 	mov.w	sl, #4294967295
 8008108:	2100      	movs	r1, #0
 800810a:	46d1      	mov	r9, sl
 800810c:	2212      	movs	r2, #18
 800810e:	9109      	str	r1, [sp, #36]	; 0x24
 8008110:	e7ce      	b.n	80080b0 <_dtoa_r+0x240>
 8008112:	2201      	movs	r2, #1
 8008114:	9208      	str	r2, [sp, #32]
 8008116:	e7f5      	b.n	8008104 <_dtoa_r+0x294>
 8008118:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800811c:	46d1      	mov	r9, sl
 800811e:	4652      	mov	r2, sl
 8008120:	e7c6      	b.n	80080b0 <_dtoa_r+0x240>
 8008122:	3101      	adds	r1, #1
 8008124:	6079      	str	r1, [r7, #4]
 8008126:	0040      	lsls	r0, r0, #1
 8008128:	e7c6      	b.n	80080b8 <_dtoa_r+0x248>
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w
 8008130:	636f4361 	.word	0x636f4361
 8008134:	3fd287a7 	.word	0x3fd287a7
 8008138:	8b60c8b3 	.word	0x8b60c8b3
 800813c:	3fc68a28 	.word	0x3fc68a28
 8008140:	509f79fb 	.word	0x509f79fb
 8008144:	3fd34413 	.word	0x3fd34413
 8008148:	0800ac16 	.word	0x0800ac16
 800814c:	0800ac2d 	.word	0x0800ac2d
 8008150:	7ff00000 	.word	0x7ff00000
 8008154:	0800ac12 	.word	0x0800ac12
 8008158:	0800ac09 	.word	0x0800ac09
 800815c:	0800aa8d 	.word	0x0800aa8d
 8008160:	0800ada8 	.word	0x0800ada8
 8008164:	0800ac8c 	.word	0x0800ac8c
 8008168:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800816a:	9900      	ldr	r1, [sp, #0]
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	f1b9 0f0e 	cmp.w	r9, #14
 8008172:	d872      	bhi.n	800825a <_dtoa_r+0x3ea>
 8008174:	2c00      	cmp	r4, #0
 8008176:	d070      	beq.n	800825a <_dtoa_r+0x3ea>
 8008178:	f1bb 0f00 	cmp.w	fp, #0
 800817c:	f340 80a6 	ble.w	80082cc <_dtoa_r+0x45c>
 8008180:	49ca      	ldr	r1, [pc, #808]	; (80084ac <_dtoa_r+0x63c>)
 8008182:	f00b 020f 	and.w	r2, fp, #15
 8008186:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800818a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800818e:	ed92 7b00 	vldr	d7, [r2]
 8008192:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008196:	f000 808d 	beq.w	80082b4 <_dtoa_r+0x444>
 800819a:	4ac5      	ldr	r2, [pc, #788]	; (80084b0 <_dtoa_r+0x640>)
 800819c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80081a0:	ed92 6b08 	vldr	d6, [r2, #32]
 80081a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80081a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80081ac:	f001 010f 	and.w	r1, r1, #15
 80081b0:	2203      	movs	r2, #3
 80081b2:	48bf      	ldr	r0, [pc, #764]	; (80084b0 <_dtoa_r+0x640>)
 80081b4:	2900      	cmp	r1, #0
 80081b6:	d17f      	bne.n	80082b8 <_dtoa_r+0x448>
 80081b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80081bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80081c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081c6:	2900      	cmp	r1, #0
 80081c8:	f000 80b2 	beq.w	8008330 <_dtoa_r+0x4c0>
 80081cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80081d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081dc:	f140 80a8 	bpl.w	8008330 <_dtoa_r+0x4c0>
 80081e0:	f1b9 0f00 	cmp.w	r9, #0
 80081e4:	f000 80a4 	beq.w	8008330 <_dtoa_r+0x4c0>
 80081e8:	f1ba 0f00 	cmp.w	sl, #0
 80081ec:	dd31      	ble.n	8008252 <_dtoa_r+0x3e2>
 80081ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80081f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80081fe:	3201      	adds	r2, #1
 8008200:	4650      	mov	r0, sl
 8008202:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008206:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800820a:	ee07 2a90 	vmov	s15, r2
 800820e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008212:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008216:	ed8d 5b02 	vstr	d5, [sp, #8]
 800821a:	9c03      	ldr	r4, [sp, #12]
 800821c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008220:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008224:	2800      	cmp	r0, #0
 8008226:	f040 8086 	bne.w	8008336 <_dtoa_r+0x4c6>
 800822a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800822e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008232:	ec42 1b17 	vmov	d7, r1, r2
 8008236:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800823a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823e:	f300 8272 	bgt.w	8008726 <_dtoa_r+0x8b6>
 8008242:	eeb1 7b47 	vneg.f64	d7, d7
 8008246:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800824a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824e:	f100 8267 	bmi.w	8008720 <_dtoa_r+0x8b0>
 8008252:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008256:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800825a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800825c:	2a00      	cmp	r2, #0
 800825e:	f2c0 8129 	blt.w	80084b4 <_dtoa_r+0x644>
 8008262:	f1bb 0f0e 	cmp.w	fp, #14
 8008266:	f300 8125 	bgt.w	80084b4 <_dtoa_r+0x644>
 800826a:	4b90      	ldr	r3, [pc, #576]	; (80084ac <_dtoa_r+0x63c>)
 800826c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008270:	ed93 6b00 	vldr	d6, [r3]
 8008274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	f280 80c3 	bge.w	8008402 <_dtoa_r+0x592>
 800827c:	f1b9 0f00 	cmp.w	r9, #0
 8008280:	f300 80bf 	bgt.w	8008402 <_dtoa_r+0x592>
 8008284:	f040 824c 	bne.w	8008720 <_dtoa_r+0x8b0>
 8008288:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800828c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008294:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829c:	464c      	mov	r4, r9
 800829e:	464f      	mov	r7, r9
 80082a0:	f280 8222 	bge.w	80086e8 <_dtoa_r+0x878>
 80082a4:	f8dd 8000 	ldr.w	r8, [sp]
 80082a8:	2331      	movs	r3, #49	; 0x31
 80082aa:	f808 3b01 	strb.w	r3, [r8], #1
 80082ae:	f10b 0b01 	add.w	fp, fp, #1
 80082b2:	e21e      	b.n	80086f2 <_dtoa_r+0x882>
 80082b4:	2202      	movs	r2, #2
 80082b6:	e77c      	b.n	80081b2 <_dtoa_r+0x342>
 80082b8:	07cc      	lsls	r4, r1, #31
 80082ba:	d504      	bpl.n	80082c6 <_dtoa_r+0x456>
 80082bc:	ed90 6b00 	vldr	d6, [r0]
 80082c0:	3201      	adds	r2, #1
 80082c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082c6:	1049      	asrs	r1, r1, #1
 80082c8:	3008      	adds	r0, #8
 80082ca:	e773      	b.n	80081b4 <_dtoa_r+0x344>
 80082cc:	d02e      	beq.n	800832c <_dtoa_r+0x4bc>
 80082ce:	f1cb 0100 	rsb	r1, fp, #0
 80082d2:	4a76      	ldr	r2, [pc, #472]	; (80084ac <_dtoa_r+0x63c>)
 80082d4:	f001 000f 	and.w	r0, r1, #15
 80082d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80082dc:	ed92 7b00 	vldr	d7, [r2]
 80082e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80082e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80082ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80082f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80082f4:	486e      	ldr	r0, [pc, #440]	; (80084b0 <_dtoa_r+0x640>)
 80082f6:	1109      	asrs	r1, r1, #4
 80082f8:	2400      	movs	r4, #0
 80082fa:	2202      	movs	r2, #2
 80082fc:	b939      	cbnz	r1, 800830e <_dtoa_r+0x49e>
 80082fe:	2c00      	cmp	r4, #0
 8008300:	f43f af60 	beq.w	80081c4 <_dtoa_r+0x354>
 8008304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800830c:	e75a      	b.n	80081c4 <_dtoa_r+0x354>
 800830e:	07cf      	lsls	r7, r1, #31
 8008310:	d509      	bpl.n	8008326 <_dtoa_r+0x4b6>
 8008312:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008316:	ed90 7b00 	vldr	d7, [r0]
 800831a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800831e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008322:	3201      	adds	r2, #1
 8008324:	2401      	movs	r4, #1
 8008326:	1049      	asrs	r1, r1, #1
 8008328:	3008      	adds	r0, #8
 800832a:	e7e7      	b.n	80082fc <_dtoa_r+0x48c>
 800832c:	2202      	movs	r2, #2
 800832e:	e749      	b.n	80081c4 <_dtoa_r+0x354>
 8008330:	465f      	mov	r7, fp
 8008332:	4648      	mov	r0, r9
 8008334:	e765      	b.n	8008202 <_dtoa_r+0x392>
 8008336:	ec42 1b17 	vmov	d7, r1, r2
 800833a:	4a5c      	ldr	r2, [pc, #368]	; (80084ac <_dtoa_r+0x63c>)
 800833c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008340:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008344:	9a00      	ldr	r2, [sp, #0]
 8008346:	1814      	adds	r4, r2, r0
 8008348:	9a08      	ldr	r2, [sp, #32]
 800834a:	b352      	cbz	r2, 80083a2 <_dtoa_r+0x532>
 800834c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008350:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008354:	f8dd 8000 	ldr.w	r8, [sp]
 8008358:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800835c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008360:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008364:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008368:	ee14 2a90 	vmov	r2, s9
 800836c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008370:	3230      	adds	r2, #48	; 0x30
 8008372:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008376:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	f808 2b01 	strb.w	r2, [r8], #1
 8008382:	d439      	bmi.n	80083f8 <_dtoa_r+0x588>
 8008384:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008388:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800838c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008390:	d472      	bmi.n	8008478 <_dtoa_r+0x608>
 8008392:	45a0      	cmp	r8, r4
 8008394:	f43f af5d 	beq.w	8008252 <_dtoa_r+0x3e2>
 8008398:	ee27 7b03 	vmul.f64	d7, d7, d3
 800839c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80083a0:	e7e0      	b.n	8008364 <_dtoa_r+0x4f4>
 80083a2:	f8dd 8000 	ldr.w	r8, [sp]
 80083a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80083aa:	4621      	mov	r1, r4
 80083ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80083b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80083b4:	ee14 2a90 	vmov	r2, s9
 80083b8:	3230      	adds	r2, #48	; 0x30
 80083ba:	f808 2b01 	strb.w	r2, [r8], #1
 80083be:	45a0      	cmp	r8, r4
 80083c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80083c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80083c8:	d118      	bne.n	80083fc <_dtoa_r+0x58c>
 80083ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80083ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80083d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80083d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083da:	dc4d      	bgt.n	8008478 <_dtoa_r+0x608>
 80083dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80083e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e8:	f57f af33 	bpl.w	8008252 <_dtoa_r+0x3e2>
 80083ec:	4688      	mov	r8, r1
 80083ee:	3901      	subs	r1, #1
 80083f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80083f4:	2b30      	cmp	r3, #48	; 0x30
 80083f6:	d0f9      	beq.n	80083ec <_dtoa_r+0x57c>
 80083f8:	46bb      	mov	fp, r7
 80083fa:	e02a      	b.n	8008452 <_dtoa_r+0x5e2>
 80083fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008400:	e7d6      	b.n	80083b0 <_dtoa_r+0x540>
 8008402:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008406:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800840a:	f8dd 8000 	ldr.w	r8, [sp]
 800840e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008412:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008416:	ee15 3a10 	vmov	r3, s10
 800841a:	3330      	adds	r3, #48	; 0x30
 800841c:	f808 3b01 	strb.w	r3, [r8], #1
 8008420:	9b00      	ldr	r3, [sp, #0]
 8008422:	eba8 0303 	sub.w	r3, r8, r3
 8008426:	4599      	cmp	r9, r3
 8008428:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800842c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008430:	d133      	bne.n	800849a <_dtoa_r+0x62a>
 8008432:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008436:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800843a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843e:	dc1a      	bgt.n	8008476 <_dtoa_r+0x606>
 8008440:	eeb4 7b46 	vcmp.f64	d7, d6
 8008444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008448:	d103      	bne.n	8008452 <_dtoa_r+0x5e2>
 800844a:	ee15 3a10 	vmov	r3, s10
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d411      	bmi.n	8008476 <_dtoa_r+0x606>
 8008452:	4629      	mov	r1, r5
 8008454:	4630      	mov	r0, r6
 8008456:	f000 fe69 	bl	800912c <_Bfree>
 800845a:	2300      	movs	r3, #0
 800845c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800845e:	f888 3000 	strb.w	r3, [r8]
 8008462:	f10b 0301 	add.w	r3, fp, #1
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800846a:	2b00      	cmp	r3, #0
 800846c:	f43f ad4d 	beq.w	8007f0a <_dtoa_r+0x9a>
 8008470:	f8c3 8000 	str.w	r8, [r3]
 8008474:	e549      	b.n	8007f0a <_dtoa_r+0x9a>
 8008476:	465f      	mov	r7, fp
 8008478:	4643      	mov	r3, r8
 800847a:	4698      	mov	r8, r3
 800847c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008480:	2a39      	cmp	r2, #57	; 0x39
 8008482:	d106      	bne.n	8008492 <_dtoa_r+0x622>
 8008484:	9a00      	ldr	r2, [sp, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d1f7      	bne.n	800847a <_dtoa_r+0x60a>
 800848a:	9900      	ldr	r1, [sp, #0]
 800848c:	2230      	movs	r2, #48	; 0x30
 800848e:	3701      	adds	r7, #1
 8008490:	700a      	strb	r2, [r1, #0]
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	3201      	adds	r2, #1
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e7ae      	b.n	80083f8 <_dtoa_r+0x588>
 800849a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800849e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a6:	d1b2      	bne.n	800840e <_dtoa_r+0x59e>
 80084a8:	e7d3      	b.n	8008452 <_dtoa_r+0x5e2>
 80084aa:	bf00      	nop
 80084ac:	0800ada8 	.word	0x0800ada8
 80084b0:	0800ad80 	.word	0x0800ad80
 80084b4:	9908      	ldr	r1, [sp, #32]
 80084b6:	2900      	cmp	r1, #0
 80084b8:	f000 80d1 	beq.w	800865e <_dtoa_r+0x7ee>
 80084bc:	9907      	ldr	r1, [sp, #28]
 80084be:	2901      	cmp	r1, #1
 80084c0:	f300 80b4 	bgt.w	800862c <_dtoa_r+0x7bc>
 80084c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084c6:	2900      	cmp	r1, #0
 80084c8:	f000 80ac 	beq.w	8008624 <_dtoa_r+0x7b4>
 80084cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80084d4:	461c      	mov	r4, r3
 80084d6:	930a      	str	r3, [sp, #40]	; 0x28
 80084d8:	9b05      	ldr	r3, [sp, #20]
 80084da:	4413      	add	r3, r2
 80084dc:	9305      	str	r3, [sp, #20]
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	2101      	movs	r1, #1
 80084e2:	4413      	add	r3, r2
 80084e4:	4630      	mov	r0, r6
 80084e6:	9306      	str	r3, [sp, #24]
 80084e8:	f000 ff26 	bl	8009338 <__i2b>
 80084ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ee:	4607      	mov	r7, r0
 80084f0:	f1b8 0f00 	cmp.w	r8, #0
 80084f4:	dd0d      	ble.n	8008512 <_dtoa_r+0x6a2>
 80084f6:	9a06      	ldr	r2, [sp, #24]
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	dd0a      	ble.n	8008512 <_dtoa_r+0x6a2>
 80084fc:	4542      	cmp	r2, r8
 80084fe:	9905      	ldr	r1, [sp, #20]
 8008500:	bfa8      	it	ge
 8008502:	4642      	movge	r2, r8
 8008504:	1a89      	subs	r1, r1, r2
 8008506:	9105      	str	r1, [sp, #20]
 8008508:	9906      	ldr	r1, [sp, #24]
 800850a:	eba8 0802 	sub.w	r8, r8, r2
 800850e:	1a8a      	subs	r2, r1, r2
 8008510:	9206      	str	r2, [sp, #24]
 8008512:	b303      	cbz	r3, 8008556 <_dtoa_r+0x6e6>
 8008514:	9a08      	ldr	r2, [sp, #32]
 8008516:	2a00      	cmp	r2, #0
 8008518:	f000 80a6 	beq.w	8008668 <_dtoa_r+0x7f8>
 800851c:	2c00      	cmp	r4, #0
 800851e:	dd13      	ble.n	8008548 <_dtoa_r+0x6d8>
 8008520:	4639      	mov	r1, r7
 8008522:	4622      	mov	r2, r4
 8008524:	4630      	mov	r0, r6
 8008526:	930c      	str	r3, [sp, #48]	; 0x30
 8008528:	f000 ffc2 	bl	80094b0 <__pow5mult>
 800852c:	462a      	mov	r2, r5
 800852e:	4601      	mov	r1, r0
 8008530:	4607      	mov	r7, r0
 8008532:	4630      	mov	r0, r6
 8008534:	f000 ff16 	bl	8009364 <__multiply>
 8008538:	4629      	mov	r1, r5
 800853a:	900a      	str	r0, [sp, #40]	; 0x28
 800853c:	4630      	mov	r0, r6
 800853e:	f000 fdf5 	bl	800912c <_Bfree>
 8008542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008546:	4615      	mov	r5, r2
 8008548:	1b1a      	subs	r2, r3, r4
 800854a:	d004      	beq.n	8008556 <_dtoa_r+0x6e6>
 800854c:	4629      	mov	r1, r5
 800854e:	4630      	mov	r0, r6
 8008550:	f000 ffae 	bl	80094b0 <__pow5mult>
 8008554:	4605      	mov	r5, r0
 8008556:	2101      	movs	r1, #1
 8008558:	4630      	mov	r0, r6
 800855a:	f000 feed 	bl	8009338 <__i2b>
 800855e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008560:	2b00      	cmp	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	f340 8082 	ble.w	800866c <_dtoa_r+0x7fc>
 8008568:	461a      	mov	r2, r3
 800856a:	4601      	mov	r1, r0
 800856c:	4630      	mov	r0, r6
 800856e:	f000 ff9f 	bl	80094b0 <__pow5mult>
 8008572:	9b07      	ldr	r3, [sp, #28]
 8008574:	2b01      	cmp	r3, #1
 8008576:	4604      	mov	r4, r0
 8008578:	dd7b      	ble.n	8008672 <_dtoa_r+0x802>
 800857a:	2300      	movs	r3, #0
 800857c:	930a      	str	r3, [sp, #40]	; 0x28
 800857e:	6922      	ldr	r2, [r4, #16]
 8008580:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008584:	6910      	ldr	r0, [r2, #16]
 8008586:	f000 fe87 	bl	8009298 <__hi0bits>
 800858a:	f1c0 0020 	rsb	r0, r0, #32
 800858e:	9b06      	ldr	r3, [sp, #24]
 8008590:	4418      	add	r0, r3
 8008592:	f010 001f 	ands.w	r0, r0, #31
 8008596:	f000 808d 	beq.w	80086b4 <_dtoa_r+0x844>
 800859a:	f1c0 0220 	rsb	r2, r0, #32
 800859e:	2a04      	cmp	r2, #4
 80085a0:	f340 8086 	ble.w	80086b0 <_dtoa_r+0x840>
 80085a4:	f1c0 001c 	rsb	r0, r0, #28
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	4403      	add	r3, r0
 80085ac:	9305      	str	r3, [sp, #20]
 80085ae:	9b06      	ldr	r3, [sp, #24]
 80085b0:	4403      	add	r3, r0
 80085b2:	4480      	add	r8, r0
 80085b4:	9306      	str	r3, [sp, #24]
 80085b6:	9b05      	ldr	r3, [sp, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dd05      	ble.n	80085c8 <_dtoa_r+0x758>
 80085bc:	4629      	mov	r1, r5
 80085be:	461a      	mov	r2, r3
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 ffcf 	bl	8009564 <__lshift>
 80085c6:	4605      	mov	r5, r0
 80085c8:	9b06      	ldr	r3, [sp, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	dd05      	ble.n	80085da <_dtoa_r+0x76a>
 80085ce:	4621      	mov	r1, r4
 80085d0:	461a      	mov	r2, r3
 80085d2:	4630      	mov	r0, r6
 80085d4:	f000 ffc6 	bl	8009564 <__lshift>
 80085d8:	4604      	mov	r4, r0
 80085da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d06b      	beq.n	80086b8 <_dtoa_r+0x848>
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f001 f82a 	bl	800963c <__mcmp>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	da65      	bge.n	80086b8 <_dtoa_r+0x848>
 80085ec:	2300      	movs	r3, #0
 80085ee:	4629      	mov	r1, r5
 80085f0:	220a      	movs	r2, #10
 80085f2:	4630      	mov	r0, r6
 80085f4:	f000 fdbc 	bl	8009170 <__multadd>
 80085f8:	9b08      	ldr	r3, [sp, #32]
 80085fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085fe:	4605      	mov	r5, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8192 	beq.w	800892a <_dtoa_r+0xaba>
 8008606:	4639      	mov	r1, r7
 8008608:	2300      	movs	r3, #0
 800860a:	220a      	movs	r2, #10
 800860c:	4630      	mov	r0, r6
 800860e:	f000 fdaf 	bl	8009170 <__multadd>
 8008612:	f1ba 0f00 	cmp.w	sl, #0
 8008616:	4607      	mov	r7, r0
 8008618:	f300 808e 	bgt.w	8008738 <_dtoa_r+0x8c8>
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	2b02      	cmp	r3, #2
 8008620:	dc51      	bgt.n	80086c6 <_dtoa_r+0x856>
 8008622:	e089      	b.n	8008738 <_dtoa_r+0x8c8>
 8008624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008626:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800862a:	e751      	b.n	80084d0 <_dtoa_r+0x660>
 800862c:	f109 34ff 	add.w	r4, r9, #4294967295
 8008630:	42a3      	cmp	r3, r4
 8008632:	bfbf      	itttt	lt
 8008634:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008636:	1ae3      	sublt	r3, r4, r3
 8008638:	18d2      	addlt	r2, r2, r3
 800863a:	4613      	movlt	r3, r2
 800863c:	bfb7      	itett	lt
 800863e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008640:	1b1c      	subge	r4, r3, r4
 8008642:	4623      	movlt	r3, r4
 8008644:	2400      	movlt	r4, #0
 8008646:	f1b9 0f00 	cmp.w	r9, #0
 800864a:	bfb5      	itete	lt
 800864c:	9a05      	ldrlt	r2, [sp, #20]
 800864e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008652:	eba2 0809 	sublt.w	r8, r2, r9
 8008656:	464a      	movge	r2, r9
 8008658:	bfb8      	it	lt
 800865a:	2200      	movlt	r2, #0
 800865c:	e73b      	b.n	80084d6 <_dtoa_r+0x666>
 800865e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008662:	9f08      	ldr	r7, [sp, #32]
 8008664:	461c      	mov	r4, r3
 8008666:	e743      	b.n	80084f0 <_dtoa_r+0x680>
 8008668:	461a      	mov	r2, r3
 800866a:	e76f      	b.n	800854c <_dtoa_r+0x6dc>
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	2b01      	cmp	r3, #1
 8008670:	dc18      	bgt.n	80086a4 <_dtoa_r+0x834>
 8008672:	9b02      	ldr	r3, [sp, #8]
 8008674:	b9b3      	cbnz	r3, 80086a4 <_dtoa_r+0x834>
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800867c:	b9a2      	cbnz	r2, 80086a8 <_dtoa_r+0x838>
 800867e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008682:	0d12      	lsrs	r2, r2, #20
 8008684:	0512      	lsls	r2, r2, #20
 8008686:	b18a      	cbz	r2, 80086ac <_dtoa_r+0x83c>
 8008688:	9b05      	ldr	r3, [sp, #20]
 800868a:	3301      	adds	r3, #1
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	9b06      	ldr	r3, [sp, #24]
 8008690:	3301      	adds	r3, #1
 8008692:	9306      	str	r3, [sp, #24]
 8008694:	2301      	movs	r3, #1
 8008696:	930a      	str	r3, [sp, #40]	; 0x28
 8008698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800869a:	2b00      	cmp	r3, #0
 800869c:	f47f af6f 	bne.w	800857e <_dtoa_r+0x70e>
 80086a0:	2001      	movs	r0, #1
 80086a2:	e774      	b.n	800858e <_dtoa_r+0x71e>
 80086a4:	2300      	movs	r3, #0
 80086a6:	e7f6      	b.n	8008696 <_dtoa_r+0x826>
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	e7f4      	b.n	8008696 <_dtoa_r+0x826>
 80086ac:	920a      	str	r2, [sp, #40]	; 0x28
 80086ae:	e7f3      	b.n	8008698 <_dtoa_r+0x828>
 80086b0:	d081      	beq.n	80085b6 <_dtoa_r+0x746>
 80086b2:	4610      	mov	r0, r2
 80086b4:	301c      	adds	r0, #28
 80086b6:	e777      	b.n	80085a8 <_dtoa_r+0x738>
 80086b8:	f1b9 0f00 	cmp.w	r9, #0
 80086bc:	dc37      	bgt.n	800872e <_dtoa_r+0x8be>
 80086be:	9b07      	ldr	r3, [sp, #28]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	dd34      	ble.n	800872e <_dtoa_r+0x8be>
 80086c4:	46ca      	mov	sl, r9
 80086c6:	f1ba 0f00 	cmp.w	sl, #0
 80086ca:	d10d      	bne.n	80086e8 <_dtoa_r+0x878>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4653      	mov	r3, sl
 80086d0:	2205      	movs	r2, #5
 80086d2:	4630      	mov	r0, r6
 80086d4:	f000 fd4c 	bl	8009170 <__multadd>
 80086d8:	4601      	mov	r1, r0
 80086da:	4604      	mov	r4, r0
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 ffad 	bl	800963c <__mcmp>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	f73f adde 	bgt.w	80082a4 <_dtoa_r+0x434>
 80086e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ea:	f8dd 8000 	ldr.w	r8, [sp]
 80086ee:	ea6f 0b03 	mvn.w	fp, r3
 80086f2:	f04f 0900 	mov.w	r9, #0
 80086f6:	4621      	mov	r1, r4
 80086f8:	4630      	mov	r0, r6
 80086fa:	f000 fd17 	bl	800912c <_Bfree>
 80086fe:	2f00      	cmp	r7, #0
 8008700:	f43f aea7 	beq.w	8008452 <_dtoa_r+0x5e2>
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	d005      	beq.n	8008716 <_dtoa_r+0x8a6>
 800870a:	45b9      	cmp	r9, r7
 800870c:	d003      	beq.n	8008716 <_dtoa_r+0x8a6>
 800870e:	4649      	mov	r1, r9
 8008710:	4630      	mov	r0, r6
 8008712:	f000 fd0b 	bl	800912c <_Bfree>
 8008716:	4639      	mov	r1, r7
 8008718:	4630      	mov	r0, r6
 800871a:	f000 fd07 	bl	800912c <_Bfree>
 800871e:	e698      	b.n	8008452 <_dtoa_r+0x5e2>
 8008720:	2400      	movs	r4, #0
 8008722:	4627      	mov	r7, r4
 8008724:	e7e0      	b.n	80086e8 <_dtoa_r+0x878>
 8008726:	46bb      	mov	fp, r7
 8008728:	4604      	mov	r4, r0
 800872a:	4607      	mov	r7, r0
 800872c:	e5ba      	b.n	80082a4 <_dtoa_r+0x434>
 800872e:	9b08      	ldr	r3, [sp, #32]
 8008730:	46ca      	mov	sl, r9
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 8100 	beq.w	8008938 <_dtoa_r+0xac8>
 8008738:	f1b8 0f00 	cmp.w	r8, #0
 800873c:	dd05      	ble.n	800874a <_dtoa_r+0x8da>
 800873e:	4639      	mov	r1, r7
 8008740:	4642      	mov	r2, r8
 8008742:	4630      	mov	r0, r6
 8008744:	f000 ff0e 	bl	8009564 <__lshift>
 8008748:	4607      	mov	r7, r0
 800874a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800874c:	2b00      	cmp	r3, #0
 800874e:	d05d      	beq.n	800880c <_dtoa_r+0x99c>
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4630      	mov	r0, r6
 8008754:	f000 fcaa 	bl	80090ac <_Balloc>
 8008758:	4680      	mov	r8, r0
 800875a:	b928      	cbnz	r0, 8008768 <_dtoa_r+0x8f8>
 800875c:	4b82      	ldr	r3, [pc, #520]	; (8008968 <_dtoa_r+0xaf8>)
 800875e:	4602      	mov	r2, r0
 8008760:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008764:	f7ff bb9a 	b.w	8007e9c <_dtoa_r+0x2c>
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	3202      	adds	r2, #2
 800876c:	0092      	lsls	r2, r2, #2
 800876e:	f107 010c 	add.w	r1, r7, #12
 8008772:	300c      	adds	r0, #12
 8008774:	f000 fc8c 	bl	8009090 <memcpy>
 8008778:	2201      	movs	r2, #1
 800877a:	4641      	mov	r1, r8
 800877c:	4630      	mov	r0, r6
 800877e:	f000 fef1 	bl	8009564 <__lshift>
 8008782:	9b00      	ldr	r3, [sp, #0]
 8008784:	3301      	adds	r3, #1
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	9b00      	ldr	r3, [sp, #0]
 800878a:	4453      	add	r3, sl
 800878c:	9309      	str	r3, [sp, #36]	; 0x24
 800878e:	9b02      	ldr	r3, [sp, #8]
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	46b9      	mov	r9, r7
 8008796:	9308      	str	r3, [sp, #32]
 8008798:	4607      	mov	r7, r0
 800879a:	9b05      	ldr	r3, [sp, #20]
 800879c:	4621      	mov	r1, r4
 800879e:	3b01      	subs	r3, #1
 80087a0:	4628      	mov	r0, r5
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	f7ff fad6 	bl	8007d54 <quorem>
 80087a8:	4603      	mov	r3, r0
 80087aa:	3330      	adds	r3, #48	; 0x30
 80087ac:	9006      	str	r0, [sp, #24]
 80087ae:	4649      	mov	r1, r9
 80087b0:	4628      	mov	r0, r5
 80087b2:	930a      	str	r3, [sp, #40]	; 0x28
 80087b4:	f000 ff42 	bl	800963c <__mcmp>
 80087b8:	463a      	mov	r2, r7
 80087ba:	4682      	mov	sl, r0
 80087bc:	4621      	mov	r1, r4
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 ff58 	bl	8009674 <__mdiff>
 80087c4:	68c2      	ldr	r2, [r0, #12]
 80087c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c8:	4680      	mov	r8, r0
 80087ca:	bb0a      	cbnz	r2, 8008810 <_dtoa_r+0x9a0>
 80087cc:	4601      	mov	r1, r0
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 ff34 	bl	800963c <__mcmp>
 80087d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d6:	4602      	mov	r2, r0
 80087d8:	4641      	mov	r1, r8
 80087da:	4630      	mov	r0, r6
 80087dc:	920e      	str	r2, [sp, #56]	; 0x38
 80087de:	930a      	str	r3, [sp, #40]	; 0x28
 80087e0:	f000 fca4 	bl	800912c <_Bfree>
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80087ec:	ea43 0102 	orr.w	r1, r3, r2
 80087f0:	9b08      	ldr	r3, [sp, #32]
 80087f2:	430b      	orrs	r3, r1
 80087f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f6:	d10d      	bne.n	8008814 <_dtoa_r+0x9a4>
 80087f8:	2b39      	cmp	r3, #57	; 0x39
 80087fa:	d029      	beq.n	8008850 <_dtoa_r+0x9e0>
 80087fc:	f1ba 0f00 	cmp.w	sl, #0
 8008800:	dd01      	ble.n	8008806 <_dtoa_r+0x996>
 8008802:	9b06      	ldr	r3, [sp, #24]
 8008804:	3331      	adds	r3, #49	; 0x31
 8008806:	9a02      	ldr	r2, [sp, #8]
 8008808:	7013      	strb	r3, [r2, #0]
 800880a:	e774      	b.n	80086f6 <_dtoa_r+0x886>
 800880c:	4638      	mov	r0, r7
 800880e:	e7b8      	b.n	8008782 <_dtoa_r+0x912>
 8008810:	2201      	movs	r2, #1
 8008812:	e7e1      	b.n	80087d8 <_dtoa_r+0x968>
 8008814:	f1ba 0f00 	cmp.w	sl, #0
 8008818:	db06      	blt.n	8008828 <_dtoa_r+0x9b8>
 800881a:	9907      	ldr	r1, [sp, #28]
 800881c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008820:	9908      	ldr	r1, [sp, #32]
 8008822:	ea5a 0101 	orrs.w	r1, sl, r1
 8008826:	d120      	bne.n	800886a <_dtoa_r+0x9fa>
 8008828:	2a00      	cmp	r2, #0
 800882a:	ddec      	ble.n	8008806 <_dtoa_r+0x996>
 800882c:	4629      	mov	r1, r5
 800882e:	2201      	movs	r2, #1
 8008830:	4630      	mov	r0, r6
 8008832:	9305      	str	r3, [sp, #20]
 8008834:	f000 fe96 	bl	8009564 <__lshift>
 8008838:	4621      	mov	r1, r4
 800883a:	4605      	mov	r5, r0
 800883c:	f000 fefe 	bl	800963c <__mcmp>
 8008840:	2800      	cmp	r0, #0
 8008842:	9b05      	ldr	r3, [sp, #20]
 8008844:	dc02      	bgt.n	800884c <_dtoa_r+0x9dc>
 8008846:	d1de      	bne.n	8008806 <_dtoa_r+0x996>
 8008848:	07da      	lsls	r2, r3, #31
 800884a:	d5dc      	bpl.n	8008806 <_dtoa_r+0x996>
 800884c:	2b39      	cmp	r3, #57	; 0x39
 800884e:	d1d8      	bne.n	8008802 <_dtoa_r+0x992>
 8008850:	9a02      	ldr	r2, [sp, #8]
 8008852:	2339      	movs	r3, #57	; 0x39
 8008854:	7013      	strb	r3, [r2, #0]
 8008856:	4643      	mov	r3, r8
 8008858:	4698      	mov	r8, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008860:	2a39      	cmp	r2, #57	; 0x39
 8008862:	d051      	beq.n	8008908 <_dtoa_r+0xa98>
 8008864:	3201      	adds	r2, #1
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e745      	b.n	80086f6 <_dtoa_r+0x886>
 800886a:	2a00      	cmp	r2, #0
 800886c:	dd03      	ble.n	8008876 <_dtoa_r+0xa06>
 800886e:	2b39      	cmp	r3, #57	; 0x39
 8008870:	d0ee      	beq.n	8008850 <_dtoa_r+0x9e0>
 8008872:	3301      	adds	r3, #1
 8008874:	e7c7      	b.n	8008806 <_dtoa_r+0x996>
 8008876:	9a05      	ldr	r2, [sp, #20]
 8008878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800887e:	428a      	cmp	r2, r1
 8008880:	d02b      	beq.n	80088da <_dtoa_r+0xa6a>
 8008882:	4629      	mov	r1, r5
 8008884:	2300      	movs	r3, #0
 8008886:	220a      	movs	r2, #10
 8008888:	4630      	mov	r0, r6
 800888a:	f000 fc71 	bl	8009170 <__multadd>
 800888e:	45b9      	cmp	r9, r7
 8008890:	4605      	mov	r5, r0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	f04f 020a 	mov.w	r2, #10
 800889a:	4649      	mov	r1, r9
 800889c:	4630      	mov	r0, r6
 800889e:	d107      	bne.n	80088b0 <_dtoa_r+0xa40>
 80088a0:	f000 fc66 	bl	8009170 <__multadd>
 80088a4:	4681      	mov	r9, r0
 80088a6:	4607      	mov	r7, r0
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	3301      	adds	r3, #1
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	e774      	b.n	800879a <_dtoa_r+0x92a>
 80088b0:	f000 fc5e 	bl	8009170 <__multadd>
 80088b4:	4639      	mov	r1, r7
 80088b6:	4681      	mov	r9, r0
 80088b8:	2300      	movs	r3, #0
 80088ba:	220a      	movs	r2, #10
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 fc57 	bl	8009170 <__multadd>
 80088c2:	4607      	mov	r7, r0
 80088c4:	e7f0      	b.n	80088a8 <_dtoa_r+0xa38>
 80088c6:	f1ba 0f00 	cmp.w	sl, #0
 80088ca:	9a00      	ldr	r2, [sp, #0]
 80088cc:	bfcc      	ite	gt
 80088ce:	46d0      	movgt	r8, sl
 80088d0:	f04f 0801 	movle.w	r8, #1
 80088d4:	4490      	add	r8, r2
 80088d6:	f04f 0900 	mov.w	r9, #0
 80088da:	4629      	mov	r1, r5
 80088dc:	2201      	movs	r2, #1
 80088de:	4630      	mov	r0, r6
 80088e0:	9302      	str	r3, [sp, #8]
 80088e2:	f000 fe3f 	bl	8009564 <__lshift>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4605      	mov	r5, r0
 80088ea:	f000 fea7 	bl	800963c <__mcmp>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	dcb1      	bgt.n	8008856 <_dtoa_r+0x9e6>
 80088f2:	d102      	bne.n	80088fa <_dtoa_r+0xa8a>
 80088f4:	9b02      	ldr	r3, [sp, #8]
 80088f6:	07db      	lsls	r3, r3, #31
 80088f8:	d4ad      	bmi.n	8008856 <_dtoa_r+0x9e6>
 80088fa:	4643      	mov	r3, r8
 80088fc:	4698      	mov	r8, r3
 80088fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008902:	2a30      	cmp	r2, #48	; 0x30
 8008904:	d0fa      	beq.n	80088fc <_dtoa_r+0xa8c>
 8008906:	e6f6      	b.n	80086f6 <_dtoa_r+0x886>
 8008908:	9a00      	ldr	r2, [sp, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d1a4      	bne.n	8008858 <_dtoa_r+0x9e8>
 800890e:	f10b 0b01 	add.w	fp, fp, #1
 8008912:	2331      	movs	r3, #49	; 0x31
 8008914:	e778      	b.n	8008808 <_dtoa_r+0x998>
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <_dtoa_r+0xafc>)
 8008918:	f7ff bb12 	b.w	8007f40 <_dtoa_r+0xd0>
 800891c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800891e:	2b00      	cmp	r3, #0
 8008920:	f47f aaee 	bne.w	8007f00 <_dtoa_r+0x90>
 8008924:	4b12      	ldr	r3, [pc, #72]	; (8008970 <_dtoa_r+0xb00>)
 8008926:	f7ff bb0b 	b.w	8007f40 <_dtoa_r+0xd0>
 800892a:	f1ba 0f00 	cmp.w	sl, #0
 800892e:	dc03      	bgt.n	8008938 <_dtoa_r+0xac8>
 8008930:	9b07      	ldr	r3, [sp, #28]
 8008932:	2b02      	cmp	r3, #2
 8008934:	f73f aec7 	bgt.w	80086c6 <_dtoa_r+0x856>
 8008938:	f8dd 8000 	ldr.w	r8, [sp]
 800893c:	4621      	mov	r1, r4
 800893e:	4628      	mov	r0, r5
 8008940:	f7ff fa08 	bl	8007d54 <quorem>
 8008944:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008948:	f808 3b01 	strb.w	r3, [r8], #1
 800894c:	9a00      	ldr	r2, [sp, #0]
 800894e:	eba8 0202 	sub.w	r2, r8, r2
 8008952:	4592      	cmp	sl, r2
 8008954:	ddb7      	ble.n	80088c6 <_dtoa_r+0xa56>
 8008956:	4629      	mov	r1, r5
 8008958:	2300      	movs	r3, #0
 800895a:	220a      	movs	r2, #10
 800895c:	4630      	mov	r0, r6
 800895e:	f000 fc07 	bl	8009170 <__multadd>
 8008962:	4605      	mov	r5, r0
 8008964:	e7ea      	b.n	800893c <_dtoa_r+0xacc>
 8008966:	bf00      	nop
 8008968:	0800ac8c 	.word	0x0800ac8c
 800896c:	0800aa8c 	.word	0x0800aa8c
 8008970:	0800ac09 	.word	0x0800ac09

08008974 <rshift>:
 8008974:	6903      	ldr	r3, [r0, #16]
 8008976:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800897a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800897e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008982:	f100 0414 	add.w	r4, r0, #20
 8008986:	dd45      	ble.n	8008a14 <rshift+0xa0>
 8008988:	f011 011f 	ands.w	r1, r1, #31
 800898c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008990:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008994:	d10c      	bne.n	80089b0 <rshift+0x3c>
 8008996:	f100 0710 	add.w	r7, r0, #16
 800899a:	4629      	mov	r1, r5
 800899c:	42b1      	cmp	r1, r6
 800899e:	d334      	bcc.n	8008a0a <rshift+0x96>
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	1eea      	subs	r2, r5, #3
 80089a6:	4296      	cmp	r6, r2
 80089a8:	bf38      	it	cc
 80089aa:	2300      	movcc	r3, #0
 80089ac:	4423      	add	r3, r4
 80089ae:	e015      	b.n	80089dc <rshift+0x68>
 80089b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089b4:	f1c1 0820 	rsb	r8, r1, #32
 80089b8:	40cf      	lsrs	r7, r1
 80089ba:	f105 0e04 	add.w	lr, r5, #4
 80089be:	46a1      	mov	r9, r4
 80089c0:	4576      	cmp	r6, lr
 80089c2:	46f4      	mov	ip, lr
 80089c4:	d815      	bhi.n	80089f2 <rshift+0x7e>
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	009a      	lsls	r2, r3, #2
 80089ca:	3a04      	subs	r2, #4
 80089cc:	3501      	adds	r5, #1
 80089ce:	42ae      	cmp	r6, r5
 80089d0:	bf38      	it	cc
 80089d2:	2200      	movcc	r2, #0
 80089d4:	18a3      	adds	r3, r4, r2
 80089d6:	50a7      	str	r7, [r4, r2]
 80089d8:	b107      	cbz	r7, 80089dc <rshift+0x68>
 80089da:	3304      	adds	r3, #4
 80089dc:	1b1a      	subs	r2, r3, r4
 80089de:	42a3      	cmp	r3, r4
 80089e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089e4:	bf08      	it	eq
 80089e6:	2300      	moveq	r3, #0
 80089e8:	6102      	str	r2, [r0, #16]
 80089ea:	bf08      	it	eq
 80089ec:	6143      	streq	r3, [r0, #20]
 80089ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089f2:	f8dc c000 	ldr.w	ip, [ip]
 80089f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80089fa:	ea4c 0707 	orr.w	r7, ip, r7
 80089fe:	f849 7b04 	str.w	r7, [r9], #4
 8008a02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a06:	40cf      	lsrs	r7, r1
 8008a08:	e7da      	b.n	80089c0 <rshift+0x4c>
 8008a0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a12:	e7c3      	b.n	800899c <rshift+0x28>
 8008a14:	4623      	mov	r3, r4
 8008a16:	e7e1      	b.n	80089dc <rshift+0x68>

08008a18 <__hexdig_fun>:
 8008a18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	d802      	bhi.n	8008a26 <__hexdig_fun+0xe>
 8008a20:	3820      	subs	r0, #32
 8008a22:	b2c0      	uxtb	r0, r0
 8008a24:	4770      	bx	lr
 8008a26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	d801      	bhi.n	8008a32 <__hexdig_fun+0x1a>
 8008a2e:	3847      	subs	r0, #71	; 0x47
 8008a30:	e7f7      	b.n	8008a22 <__hexdig_fun+0xa>
 8008a32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a36:	2b05      	cmp	r3, #5
 8008a38:	d801      	bhi.n	8008a3e <__hexdig_fun+0x26>
 8008a3a:	3827      	subs	r0, #39	; 0x27
 8008a3c:	e7f1      	b.n	8008a22 <__hexdig_fun+0xa>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	4770      	bx	lr
	...

08008a44 <__gethex>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	ed2d 8b02 	vpush	{d8}
 8008a4c:	b089      	sub	sp, #36	; 0x24
 8008a4e:	ee08 0a10 	vmov	s16, r0
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	4bbc      	ldr	r3, [pc, #752]	; (8008d48 <__gethex+0x304>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	468b      	mov	fp, r1
 8008a5e:	4690      	mov	r8, r2
 8008a60:	f7f7 fc3e 	bl	80002e0 <strlen>
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	f8db 2000 	ldr.w	r2, [fp]
 8008a6a:	4403      	add	r3, r0
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	1c93      	adds	r3, r2, #2
 8008a76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a7e:	32fe      	adds	r2, #254	; 0xfe
 8008a80:	18d1      	adds	r1, r2, r3
 8008a82:	461f      	mov	r7, r3
 8008a84:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a88:	9100      	str	r1, [sp, #0]
 8008a8a:	2830      	cmp	r0, #48	; 0x30
 8008a8c:	d0f8      	beq.n	8008a80 <__gethex+0x3c>
 8008a8e:	f7ff ffc3 	bl	8008a18 <__hexdig_fun>
 8008a92:	4604      	mov	r4, r0
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d13a      	bne.n	8008b0e <__gethex+0xca>
 8008a98:	9901      	ldr	r1, [sp, #4]
 8008a9a:	4652      	mov	r2, sl
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f001 f9ef 	bl	8009e80 <strncmp>
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d168      	bne.n	8008b7a <__gethex+0x136>
 8008aa8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008aac:	eb07 060a 	add.w	r6, r7, sl
 8008ab0:	f7ff ffb2 	bl	8008a18 <__hexdig_fun>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d062      	beq.n	8008b7e <__gethex+0x13a>
 8008ab8:	4633      	mov	r3, r6
 8008aba:	7818      	ldrb	r0, [r3, #0]
 8008abc:	2830      	cmp	r0, #48	; 0x30
 8008abe:	461f      	mov	r7, r3
 8008ac0:	f103 0301 	add.w	r3, r3, #1
 8008ac4:	d0f9      	beq.n	8008aba <__gethex+0x76>
 8008ac6:	f7ff ffa7 	bl	8008a18 <__hexdig_fun>
 8008aca:	2301      	movs	r3, #1
 8008acc:	fab0 f480 	clz	r4, r0
 8008ad0:	0964      	lsrs	r4, r4, #5
 8008ad2:	4635      	mov	r5, r6
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	463a      	mov	r2, r7
 8008ad8:	4616      	mov	r6, r2
 8008ada:	3201      	adds	r2, #1
 8008adc:	7830      	ldrb	r0, [r6, #0]
 8008ade:	f7ff ff9b 	bl	8008a18 <__hexdig_fun>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d1f8      	bne.n	8008ad8 <__gethex+0x94>
 8008ae6:	9901      	ldr	r1, [sp, #4]
 8008ae8:	4652      	mov	r2, sl
 8008aea:	4630      	mov	r0, r6
 8008aec:	f001 f9c8 	bl	8009e80 <strncmp>
 8008af0:	b980      	cbnz	r0, 8008b14 <__gethex+0xd0>
 8008af2:	b94d      	cbnz	r5, 8008b08 <__gethex+0xc4>
 8008af4:	eb06 050a 	add.w	r5, r6, sl
 8008af8:	462a      	mov	r2, r5
 8008afa:	4616      	mov	r6, r2
 8008afc:	3201      	adds	r2, #1
 8008afe:	7830      	ldrb	r0, [r6, #0]
 8008b00:	f7ff ff8a 	bl	8008a18 <__hexdig_fun>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1f8      	bne.n	8008afa <__gethex+0xb6>
 8008b08:	1bad      	subs	r5, r5, r6
 8008b0a:	00ad      	lsls	r5, r5, #2
 8008b0c:	e004      	b.n	8008b18 <__gethex+0xd4>
 8008b0e:	2400      	movs	r4, #0
 8008b10:	4625      	mov	r5, r4
 8008b12:	e7e0      	b.n	8008ad6 <__gethex+0x92>
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	d1f7      	bne.n	8008b08 <__gethex+0xc4>
 8008b18:	7833      	ldrb	r3, [r6, #0]
 8008b1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b1e:	2b50      	cmp	r3, #80	; 0x50
 8008b20:	d13b      	bne.n	8008b9a <__gethex+0x156>
 8008b22:	7873      	ldrb	r3, [r6, #1]
 8008b24:	2b2b      	cmp	r3, #43	; 0x2b
 8008b26:	d02c      	beq.n	8008b82 <__gethex+0x13e>
 8008b28:	2b2d      	cmp	r3, #45	; 0x2d
 8008b2a:	d02e      	beq.n	8008b8a <__gethex+0x146>
 8008b2c:	1c71      	adds	r1, r6, #1
 8008b2e:	f04f 0900 	mov.w	r9, #0
 8008b32:	7808      	ldrb	r0, [r1, #0]
 8008b34:	f7ff ff70 	bl	8008a18 <__hexdig_fun>
 8008b38:	1e43      	subs	r3, r0, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b18      	cmp	r3, #24
 8008b3e:	d82c      	bhi.n	8008b9a <__gethex+0x156>
 8008b40:	f1a0 0210 	sub.w	r2, r0, #16
 8008b44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b48:	f7ff ff66 	bl	8008a18 <__hexdig_fun>
 8008b4c:	1e43      	subs	r3, r0, #1
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b18      	cmp	r3, #24
 8008b52:	d91d      	bls.n	8008b90 <__gethex+0x14c>
 8008b54:	f1b9 0f00 	cmp.w	r9, #0
 8008b58:	d000      	beq.n	8008b5c <__gethex+0x118>
 8008b5a:	4252      	negs	r2, r2
 8008b5c:	4415      	add	r5, r2
 8008b5e:	f8cb 1000 	str.w	r1, [fp]
 8008b62:	b1e4      	cbz	r4, 8008b9e <__gethex+0x15a>
 8008b64:	9b00      	ldr	r3, [sp, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bf14      	ite	ne
 8008b6a:	2700      	movne	r7, #0
 8008b6c:	2706      	moveq	r7, #6
 8008b6e:	4638      	mov	r0, r7
 8008b70:	b009      	add	sp, #36	; 0x24
 8008b72:	ecbd 8b02 	vpop	{d8}
 8008b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7a:	463e      	mov	r6, r7
 8008b7c:	4625      	mov	r5, r4
 8008b7e:	2401      	movs	r4, #1
 8008b80:	e7ca      	b.n	8008b18 <__gethex+0xd4>
 8008b82:	f04f 0900 	mov.w	r9, #0
 8008b86:	1cb1      	adds	r1, r6, #2
 8008b88:	e7d3      	b.n	8008b32 <__gethex+0xee>
 8008b8a:	f04f 0901 	mov.w	r9, #1
 8008b8e:	e7fa      	b.n	8008b86 <__gethex+0x142>
 8008b90:	230a      	movs	r3, #10
 8008b92:	fb03 0202 	mla	r2, r3, r2, r0
 8008b96:	3a10      	subs	r2, #16
 8008b98:	e7d4      	b.n	8008b44 <__gethex+0x100>
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	e7df      	b.n	8008b5e <__gethex+0x11a>
 8008b9e:	1bf3      	subs	r3, r6, r7
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	2b07      	cmp	r3, #7
 8008ba6:	dc0b      	bgt.n	8008bc0 <__gethex+0x17c>
 8008ba8:	ee18 0a10 	vmov	r0, s16
 8008bac:	f000 fa7e 	bl	80090ac <_Balloc>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	b940      	cbnz	r0, 8008bc6 <__gethex+0x182>
 8008bb4:	4b65      	ldr	r3, [pc, #404]	; (8008d4c <__gethex+0x308>)
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	21de      	movs	r1, #222	; 0xde
 8008bba:	4865      	ldr	r0, [pc, #404]	; (8008d50 <__gethex+0x30c>)
 8008bbc:	f001 f980 	bl	8009ec0 <__assert_func>
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	105b      	asrs	r3, r3, #1
 8008bc4:	e7ee      	b.n	8008ba4 <__gethex+0x160>
 8008bc6:	f100 0914 	add.w	r9, r0, #20
 8008bca:	f04f 0b00 	mov.w	fp, #0
 8008bce:	f1ca 0301 	rsb	r3, sl, #1
 8008bd2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008bd6:	f8cd b000 	str.w	fp, [sp]
 8008bda:	9306      	str	r3, [sp, #24]
 8008bdc:	42b7      	cmp	r7, r6
 8008bde:	d340      	bcc.n	8008c62 <__gethex+0x21e>
 8008be0:	9802      	ldr	r0, [sp, #8]
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	f840 3b04 	str.w	r3, [r0], #4
 8008be8:	eba0 0009 	sub.w	r0, r0, r9
 8008bec:	1080      	asrs	r0, r0, #2
 8008bee:	0146      	lsls	r6, r0, #5
 8008bf0:	6120      	str	r0, [r4, #16]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fb50 	bl	8009298 <__hi0bits>
 8008bf8:	1a30      	subs	r0, r6, r0
 8008bfa:	f8d8 6000 	ldr.w	r6, [r8]
 8008bfe:	42b0      	cmp	r0, r6
 8008c00:	dd63      	ble.n	8008cca <__gethex+0x286>
 8008c02:	1b87      	subs	r7, r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 feeb 	bl	80099e2 <__any_on>
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	b1a8      	cbz	r0, 8008c3c <__gethex+0x1f8>
 8008c10:	1e7b      	subs	r3, r7, #1
 8008c12:	1159      	asrs	r1, r3, #5
 8008c14:	f003 021f 	and.w	r2, r3, #31
 8008c18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c1c:	f04f 0a01 	mov.w	sl, #1
 8008c20:	fa0a f202 	lsl.w	r2, sl, r2
 8008c24:	420a      	tst	r2, r1
 8008c26:	d009      	beq.n	8008c3c <__gethex+0x1f8>
 8008c28:	4553      	cmp	r3, sl
 8008c2a:	dd05      	ble.n	8008c38 <__gethex+0x1f4>
 8008c2c:	1eb9      	subs	r1, r7, #2
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fed7 	bl	80099e2 <__any_on>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d145      	bne.n	8008cc4 <__gethex+0x280>
 8008c38:	f04f 0a02 	mov.w	sl, #2
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff fe98 	bl	8008974 <rshift>
 8008c44:	443d      	add	r5, r7
 8008c46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c4a:	42ab      	cmp	r3, r5
 8008c4c:	da4c      	bge.n	8008ce8 <__gethex+0x2a4>
 8008c4e:	ee18 0a10 	vmov	r0, s16
 8008c52:	4621      	mov	r1, r4
 8008c54:	f000 fa6a 	bl	800912c <_Bfree>
 8008c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	27a3      	movs	r7, #163	; 0xa3
 8008c60:	e785      	b.n	8008b6e <__gethex+0x12a>
 8008c62:	1e73      	subs	r3, r6, #1
 8008c64:	9a05      	ldr	r2, [sp, #20]
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d019      	beq.n	8008ca4 <__gethex+0x260>
 8008c70:	f1bb 0f20 	cmp.w	fp, #32
 8008c74:	d107      	bne.n	8008c86 <__gethex+0x242>
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	9a00      	ldr	r2, [sp, #0]
 8008c7a:	f843 2b04 	str.w	r2, [r3], #4
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	2300      	movs	r3, #0
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	469b      	mov	fp, r3
 8008c86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c8a:	f7ff fec5 	bl	8008a18 <__hexdig_fun>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	f000 000f 	and.w	r0, r0, #15
 8008c94:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c98:	4303      	orrs	r3, r0
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	f10b 0b04 	add.w	fp, fp, #4
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	e00d      	b.n	8008cc0 <__gethex+0x27c>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	9a06      	ldr	r2, [sp, #24]
 8008ca8:	4413      	add	r3, r2
 8008caa:	42bb      	cmp	r3, r7
 8008cac:	d3e0      	bcc.n	8008c70 <__gethex+0x22c>
 8008cae:	4618      	mov	r0, r3
 8008cb0:	9901      	ldr	r1, [sp, #4]
 8008cb2:	9307      	str	r3, [sp, #28]
 8008cb4:	4652      	mov	r2, sl
 8008cb6:	f001 f8e3 	bl	8009e80 <strncmp>
 8008cba:	9b07      	ldr	r3, [sp, #28]
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d1d7      	bne.n	8008c70 <__gethex+0x22c>
 8008cc0:	461e      	mov	r6, r3
 8008cc2:	e78b      	b.n	8008bdc <__gethex+0x198>
 8008cc4:	f04f 0a03 	mov.w	sl, #3
 8008cc8:	e7b8      	b.n	8008c3c <__gethex+0x1f8>
 8008cca:	da0a      	bge.n	8008ce2 <__gethex+0x29e>
 8008ccc:	1a37      	subs	r7, r6, r0
 8008cce:	4621      	mov	r1, r4
 8008cd0:	ee18 0a10 	vmov	r0, s16
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	f000 fc45 	bl	8009564 <__lshift>
 8008cda:	1bed      	subs	r5, r5, r7
 8008cdc:	4604      	mov	r4, r0
 8008cde:	f100 0914 	add.w	r9, r0, #20
 8008ce2:	f04f 0a00 	mov.w	sl, #0
 8008ce6:	e7ae      	b.n	8008c46 <__gethex+0x202>
 8008ce8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cec:	42a8      	cmp	r0, r5
 8008cee:	dd72      	ble.n	8008dd6 <__gethex+0x392>
 8008cf0:	1b45      	subs	r5, r0, r5
 8008cf2:	42ae      	cmp	r6, r5
 8008cf4:	dc36      	bgt.n	8008d64 <__gethex+0x320>
 8008cf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d02a      	beq.n	8008d54 <__gethex+0x310>
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d02c      	beq.n	8008d5c <__gethex+0x318>
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d115      	bne.n	8008d32 <__gethex+0x2ee>
 8008d06:	42ae      	cmp	r6, r5
 8008d08:	d113      	bne.n	8008d32 <__gethex+0x2ee>
 8008d0a:	2e01      	cmp	r6, #1
 8008d0c:	d10b      	bne.n	8008d26 <__gethex+0x2e2>
 8008d0e:	9a04      	ldr	r2, [sp, #16]
 8008d10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	2301      	movs	r3, #1
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	f8c9 3000 	str.w	r3, [r9]
 8008d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d20:	2762      	movs	r7, #98	; 0x62
 8008d22:	601c      	str	r4, [r3, #0]
 8008d24:	e723      	b.n	8008b6e <__gethex+0x12a>
 8008d26:	1e71      	subs	r1, r6, #1
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fe5a 	bl	80099e2 <__any_on>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d1ed      	bne.n	8008d0e <__gethex+0x2ca>
 8008d32:	ee18 0a10 	vmov	r0, s16
 8008d36:	4621      	mov	r1, r4
 8008d38:	f000 f9f8 	bl	800912c <_Bfree>
 8008d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d3e:	2300      	movs	r3, #0
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	2750      	movs	r7, #80	; 0x50
 8008d44:	e713      	b.n	8008b6e <__gethex+0x12a>
 8008d46:	bf00      	nop
 8008d48:	0800ad08 	.word	0x0800ad08
 8008d4c:	0800ac8c 	.word	0x0800ac8c
 8008d50:	0800ac9d 	.word	0x0800ac9d
 8008d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1eb      	bne.n	8008d32 <__gethex+0x2ee>
 8008d5a:	e7d8      	b.n	8008d0e <__gethex+0x2ca>
 8008d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1d5      	bne.n	8008d0e <__gethex+0x2ca>
 8008d62:	e7e6      	b.n	8008d32 <__gethex+0x2ee>
 8008d64:	1e6f      	subs	r7, r5, #1
 8008d66:	f1ba 0f00 	cmp.w	sl, #0
 8008d6a:	d131      	bne.n	8008dd0 <__gethex+0x38c>
 8008d6c:	b127      	cbz	r7, 8008d78 <__gethex+0x334>
 8008d6e:	4639      	mov	r1, r7
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fe36 	bl	80099e2 <__any_on>
 8008d76:	4682      	mov	sl, r0
 8008d78:	117b      	asrs	r3, r7, #5
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d80:	f007 071f 	and.w	r7, r7, #31
 8008d84:	fa01 f707 	lsl.w	r7, r1, r7
 8008d88:	421f      	tst	r7, r3
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	bf18      	it	ne
 8008d90:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d94:	1b76      	subs	r6, r6, r5
 8008d96:	f7ff fded 	bl	8008974 <rshift>
 8008d9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d9e:	2702      	movs	r7, #2
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	d048      	beq.n	8008e38 <__gethex+0x3f4>
 8008da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d015      	beq.n	8008dda <__gethex+0x396>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d017      	beq.n	8008de2 <__gethex+0x39e>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d109      	bne.n	8008dca <__gethex+0x386>
 8008db6:	f01a 0f02 	tst.w	sl, #2
 8008dba:	d006      	beq.n	8008dca <__gethex+0x386>
 8008dbc:	f8d9 0000 	ldr.w	r0, [r9]
 8008dc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008dc4:	f01a 0f01 	tst.w	sl, #1
 8008dc8:	d10e      	bne.n	8008de8 <__gethex+0x3a4>
 8008dca:	f047 0710 	orr.w	r7, r7, #16
 8008dce:	e033      	b.n	8008e38 <__gethex+0x3f4>
 8008dd0:	f04f 0a01 	mov.w	sl, #1
 8008dd4:	e7d0      	b.n	8008d78 <__gethex+0x334>
 8008dd6:	2701      	movs	r7, #1
 8008dd8:	e7e2      	b.n	8008da0 <__gethex+0x35c>
 8008dda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ddc:	f1c3 0301 	rsb	r3, r3, #1
 8008de0:	9315      	str	r3, [sp, #84]	; 0x54
 8008de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f0      	beq.n	8008dca <__gethex+0x386>
 8008de8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008dec:	f104 0314 	add.w	r3, r4, #20
 8008df0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008df4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008df8:	f04f 0c00 	mov.w	ip, #0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e06:	d01c      	beq.n	8008e42 <__gethex+0x3fe>
 8008e08:	3201      	adds	r2, #1
 8008e0a:	6002      	str	r2, [r0, #0]
 8008e0c:	2f02      	cmp	r7, #2
 8008e0e:	f104 0314 	add.w	r3, r4, #20
 8008e12:	d13f      	bne.n	8008e94 <__gethex+0x450>
 8008e14:	f8d8 2000 	ldr.w	r2, [r8]
 8008e18:	3a01      	subs	r2, #1
 8008e1a:	42b2      	cmp	r2, r6
 8008e1c:	d10a      	bne.n	8008e34 <__gethex+0x3f0>
 8008e1e:	1171      	asrs	r1, r6, #5
 8008e20:	2201      	movs	r2, #1
 8008e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e26:	f006 061f 	and.w	r6, r6, #31
 8008e2a:	fa02 f606 	lsl.w	r6, r2, r6
 8008e2e:	421e      	tst	r6, r3
 8008e30:	bf18      	it	ne
 8008e32:	4617      	movne	r7, r2
 8008e34:	f047 0720 	orr.w	r7, r7, #32
 8008e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e3a:	601c      	str	r4, [r3, #0]
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	601d      	str	r5, [r3, #0]
 8008e40:	e695      	b.n	8008b6e <__gethex+0x12a>
 8008e42:	4299      	cmp	r1, r3
 8008e44:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e48:	d8d8      	bhi.n	8008dfc <__gethex+0x3b8>
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	459b      	cmp	fp, r3
 8008e4e:	db19      	blt.n	8008e84 <__gethex+0x440>
 8008e50:	6861      	ldr	r1, [r4, #4]
 8008e52:	ee18 0a10 	vmov	r0, s16
 8008e56:	3101      	adds	r1, #1
 8008e58:	f000 f928 	bl	80090ac <_Balloc>
 8008e5c:	4681      	mov	r9, r0
 8008e5e:	b918      	cbnz	r0, 8008e68 <__gethex+0x424>
 8008e60:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <__gethex+0x488>)
 8008e62:	4602      	mov	r2, r0
 8008e64:	2184      	movs	r1, #132	; 0x84
 8008e66:	e6a8      	b.n	8008bba <__gethex+0x176>
 8008e68:	6922      	ldr	r2, [r4, #16]
 8008e6a:	3202      	adds	r2, #2
 8008e6c:	f104 010c 	add.w	r1, r4, #12
 8008e70:	0092      	lsls	r2, r2, #2
 8008e72:	300c      	adds	r0, #12
 8008e74:	f000 f90c 	bl	8009090 <memcpy>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	ee18 0a10 	vmov	r0, s16
 8008e7e:	f000 f955 	bl	800912c <_Bfree>
 8008e82:	464c      	mov	r4, r9
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e8c:	6122      	str	r2, [r4, #16]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	615a      	str	r2, [r3, #20]
 8008e92:	e7bb      	b.n	8008e0c <__gethex+0x3c8>
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	455a      	cmp	r2, fp
 8008e98:	dd0b      	ble.n	8008eb2 <__gethex+0x46e>
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f7ff fd69 	bl	8008974 <rshift>
 8008ea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	f6ff aed0 	blt.w	8008c4e <__gethex+0x20a>
 8008eae:	2701      	movs	r7, #1
 8008eb0:	e7c0      	b.n	8008e34 <__gethex+0x3f0>
 8008eb2:	f016 061f 	ands.w	r6, r6, #31
 8008eb6:	d0fa      	beq.n	8008eae <__gethex+0x46a>
 8008eb8:	449a      	add	sl, r3
 8008eba:	f1c6 0620 	rsb	r6, r6, #32
 8008ebe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008ec2:	f000 f9e9 	bl	8009298 <__hi0bits>
 8008ec6:	42b0      	cmp	r0, r6
 8008ec8:	dbe7      	blt.n	8008e9a <__gethex+0x456>
 8008eca:	e7f0      	b.n	8008eae <__gethex+0x46a>
 8008ecc:	0800ac8c 	.word	0x0800ac8c

08008ed0 <L_shift>:
 8008ed0:	f1c2 0208 	rsb	r2, r2, #8
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	b570      	push	{r4, r5, r6, lr}
 8008ed8:	f1c2 0620 	rsb	r6, r2, #32
 8008edc:	6843      	ldr	r3, [r0, #4]
 8008ede:	6804      	ldr	r4, [r0, #0]
 8008ee0:	fa03 f506 	lsl.w	r5, r3, r6
 8008ee4:	432c      	orrs	r4, r5
 8008ee6:	40d3      	lsrs	r3, r2
 8008ee8:	6004      	str	r4, [r0, #0]
 8008eea:	f840 3f04 	str.w	r3, [r0, #4]!
 8008eee:	4288      	cmp	r0, r1
 8008ef0:	d3f4      	bcc.n	8008edc <L_shift+0xc>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}

08008ef4 <__match>:
 8008ef4:	b530      	push	{r4, r5, lr}
 8008ef6:	6803      	ldr	r3, [r0, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008efe:	b914      	cbnz	r4, 8008f06 <__match+0x12>
 8008f00:	6003      	str	r3, [r0, #0]
 8008f02:	2001      	movs	r0, #1
 8008f04:	bd30      	pop	{r4, r5, pc}
 8008f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f0e:	2d19      	cmp	r5, #25
 8008f10:	bf98      	it	ls
 8008f12:	3220      	addls	r2, #32
 8008f14:	42a2      	cmp	r2, r4
 8008f16:	d0f0      	beq.n	8008efa <__match+0x6>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e7f3      	b.n	8008f04 <__match+0x10>

08008f1c <__hexnan>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	680b      	ldr	r3, [r1, #0]
 8008f22:	6801      	ldr	r1, [r0, #0]
 8008f24:	115e      	asrs	r6, r3, #5
 8008f26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f2a:	f013 031f 	ands.w	r3, r3, #31
 8008f2e:	b087      	sub	sp, #28
 8008f30:	bf18      	it	ne
 8008f32:	3604      	addne	r6, #4
 8008f34:	2500      	movs	r5, #0
 8008f36:	1f37      	subs	r7, r6, #4
 8008f38:	4682      	mov	sl, r0
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f42:	46b9      	mov	r9, r7
 8008f44:	463c      	mov	r4, r7
 8008f46:	9502      	str	r5, [sp, #8]
 8008f48:	46ab      	mov	fp, r5
 8008f4a:	784a      	ldrb	r2, [r1, #1]
 8008f4c:	1c4b      	adds	r3, r1, #1
 8008f4e:	9303      	str	r3, [sp, #12]
 8008f50:	b342      	cbz	r2, 8008fa4 <__hexnan+0x88>
 8008f52:	4610      	mov	r0, r2
 8008f54:	9105      	str	r1, [sp, #20]
 8008f56:	9204      	str	r2, [sp, #16]
 8008f58:	f7ff fd5e 	bl	8008a18 <__hexdig_fun>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d14f      	bne.n	8009000 <__hexnan+0xe4>
 8008f60:	9a04      	ldr	r2, [sp, #16]
 8008f62:	9905      	ldr	r1, [sp, #20]
 8008f64:	2a20      	cmp	r2, #32
 8008f66:	d818      	bhi.n	8008f9a <__hexnan+0x7e>
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	459b      	cmp	fp, r3
 8008f6c:	dd13      	ble.n	8008f96 <__hexnan+0x7a>
 8008f6e:	454c      	cmp	r4, r9
 8008f70:	d206      	bcs.n	8008f80 <__hexnan+0x64>
 8008f72:	2d07      	cmp	r5, #7
 8008f74:	dc04      	bgt.n	8008f80 <__hexnan+0x64>
 8008f76:	462a      	mov	r2, r5
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f7ff ffa8 	bl	8008ed0 <L_shift>
 8008f80:	4544      	cmp	r4, r8
 8008f82:	d950      	bls.n	8009026 <__hexnan+0x10a>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f1a4 0904 	sub.w	r9, r4, #4
 8008f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f8e:	f8cd b008 	str.w	fp, [sp, #8]
 8008f92:	464c      	mov	r4, r9
 8008f94:	461d      	mov	r5, r3
 8008f96:	9903      	ldr	r1, [sp, #12]
 8008f98:	e7d7      	b.n	8008f4a <__hexnan+0x2e>
 8008f9a:	2a29      	cmp	r2, #41	; 0x29
 8008f9c:	d156      	bne.n	800904c <__hexnan+0x130>
 8008f9e:	3102      	adds	r1, #2
 8008fa0:	f8ca 1000 	str.w	r1, [sl]
 8008fa4:	f1bb 0f00 	cmp.w	fp, #0
 8008fa8:	d050      	beq.n	800904c <__hexnan+0x130>
 8008faa:	454c      	cmp	r4, r9
 8008fac:	d206      	bcs.n	8008fbc <__hexnan+0xa0>
 8008fae:	2d07      	cmp	r5, #7
 8008fb0:	dc04      	bgt.n	8008fbc <__hexnan+0xa0>
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7ff ff8a 	bl	8008ed0 <L_shift>
 8008fbc:	4544      	cmp	r4, r8
 8008fbe:	d934      	bls.n	800902a <__hexnan+0x10e>
 8008fc0:	f1a8 0204 	sub.w	r2, r8, #4
 8008fc4:	4623      	mov	r3, r4
 8008fc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fca:	f842 1f04 	str.w	r1, [r2, #4]!
 8008fce:	429f      	cmp	r7, r3
 8008fd0:	d2f9      	bcs.n	8008fc6 <__hexnan+0xaa>
 8008fd2:	1b3b      	subs	r3, r7, r4
 8008fd4:	f023 0303 	bic.w	r3, r3, #3
 8008fd8:	3304      	adds	r3, #4
 8008fda:	3401      	adds	r4, #1
 8008fdc:	3e03      	subs	r6, #3
 8008fde:	42b4      	cmp	r4, r6
 8008fe0:	bf88      	it	hi
 8008fe2:	2304      	movhi	r3, #4
 8008fe4:	4443      	add	r3, r8
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f843 2b04 	str.w	r2, [r3], #4
 8008fec:	429f      	cmp	r7, r3
 8008fee:	d2fb      	bcs.n	8008fe8 <__hexnan+0xcc>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	b91b      	cbnz	r3, 8008ffc <__hexnan+0xe0>
 8008ff4:	4547      	cmp	r7, r8
 8008ff6:	d127      	bne.n	8009048 <__hexnan+0x12c>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	2005      	movs	r0, #5
 8008ffe:	e026      	b.n	800904e <__hexnan+0x132>
 8009000:	3501      	adds	r5, #1
 8009002:	2d08      	cmp	r5, #8
 8009004:	f10b 0b01 	add.w	fp, fp, #1
 8009008:	dd06      	ble.n	8009018 <__hexnan+0xfc>
 800900a:	4544      	cmp	r4, r8
 800900c:	d9c3      	bls.n	8008f96 <__hexnan+0x7a>
 800900e:	2300      	movs	r3, #0
 8009010:	f844 3c04 	str.w	r3, [r4, #-4]
 8009014:	2501      	movs	r5, #1
 8009016:	3c04      	subs	r4, #4
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	f000 000f 	and.w	r0, r0, #15
 800901e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009022:	6022      	str	r2, [r4, #0]
 8009024:	e7b7      	b.n	8008f96 <__hexnan+0x7a>
 8009026:	2508      	movs	r5, #8
 8009028:	e7b5      	b.n	8008f96 <__hexnan+0x7a>
 800902a:	9b01      	ldr	r3, [sp, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0df      	beq.n	8008ff0 <__hexnan+0xd4>
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	f1c3 0320 	rsb	r3, r3, #32
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009040:	401a      	ands	r2, r3
 8009042:	f846 2c04 	str.w	r2, [r6, #-4]
 8009046:	e7d3      	b.n	8008ff0 <__hexnan+0xd4>
 8009048:	3f04      	subs	r7, #4
 800904a:	e7d1      	b.n	8008ff0 <__hexnan+0xd4>
 800904c:	2004      	movs	r0, #4
 800904e:	b007      	add	sp, #28
 8009050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009054 <_localeconv_r>:
 8009054:	4800      	ldr	r0, [pc, #0]	; (8009058 <_localeconv_r+0x4>)
 8009056:	4770      	bx	lr
 8009058:	2000017c 	.word	0x2000017c

0800905c <malloc>:
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <malloc+0xc>)
 800905e:	4601      	mov	r1, r0
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f000 bd3f 	b.w	8009ae4 <_malloc_r>
 8009066:	bf00      	nop
 8009068:	20000024 	.word	0x20000024

0800906c <__ascii_mbtowc>:
 800906c:	b082      	sub	sp, #8
 800906e:	b901      	cbnz	r1, 8009072 <__ascii_mbtowc+0x6>
 8009070:	a901      	add	r1, sp, #4
 8009072:	b142      	cbz	r2, 8009086 <__ascii_mbtowc+0x1a>
 8009074:	b14b      	cbz	r3, 800908a <__ascii_mbtowc+0x1e>
 8009076:	7813      	ldrb	r3, [r2, #0]
 8009078:	600b      	str	r3, [r1, #0]
 800907a:	7812      	ldrb	r2, [r2, #0]
 800907c:	1e10      	subs	r0, r2, #0
 800907e:	bf18      	it	ne
 8009080:	2001      	movne	r0, #1
 8009082:	b002      	add	sp, #8
 8009084:	4770      	bx	lr
 8009086:	4610      	mov	r0, r2
 8009088:	e7fb      	b.n	8009082 <__ascii_mbtowc+0x16>
 800908a:	f06f 0001 	mvn.w	r0, #1
 800908e:	e7f8      	b.n	8009082 <__ascii_mbtowc+0x16>

08009090 <memcpy>:
 8009090:	440a      	add	r2, r1
 8009092:	4291      	cmp	r1, r2
 8009094:	f100 33ff 	add.w	r3, r0, #4294967295
 8009098:	d100      	bne.n	800909c <memcpy+0xc>
 800909a:	4770      	bx	lr
 800909c:	b510      	push	{r4, lr}
 800909e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090a6:	4291      	cmp	r1, r2
 80090a8:	d1f9      	bne.n	800909e <memcpy+0xe>
 80090aa:	bd10      	pop	{r4, pc}

080090ac <_Balloc>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090b0:	4604      	mov	r4, r0
 80090b2:	460d      	mov	r5, r1
 80090b4:	b976      	cbnz	r6, 80090d4 <_Balloc+0x28>
 80090b6:	2010      	movs	r0, #16
 80090b8:	f7ff ffd0 	bl	800905c <malloc>
 80090bc:	4602      	mov	r2, r0
 80090be:	6260      	str	r0, [r4, #36]	; 0x24
 80090c0:	b920      	cbnz	r0, 80090cc <_Balloc+0x20>
 80090c2:	4b18      	ldr	r3, [pc, #96]	; (8009124 <_Balloc+0x78>)
 80090c4:	4818      	ldr	r0, [pc, #96]	; (8009128 <_Balloc+0x7c>)
 80090c6:	2166      	movs	r1, #102	; 0x66
 80090c8:	f000 fefa 	bl	8009ec0 <__assert_func>
 80090cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d0:	6006      	str	r6, [r0, #0]
 80090d2:	60c6      	str	r6, [r0, #12]
 80090d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090d6:	68f3      	ldr	r3, [r6, #12]
 80090d8:	b183      	cbz	r3, 80090fc <_Balloc+0x50>
 80090da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090e2:	b9b8      	cbnz	r0, 8009114 <_Balloc+0x68>
 80090e4:	2101      	movs	r1, #1
 80090e6:	fa01 f605 	lsl.w	r6, r1, r5
 80090ea:	1d72      	adds	r2, r6, #5
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fc98 	bl	8009a24 <_calloc_r>
 80090f4:	b160      	cbz	r0, 8009110 <_Balloc+0x64>
 80090f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090fa:	e00e      	b.n	800911a <_Balloc+0x6e>
 80090fc:	2221      	movs	r2, #33	; 0x21
 80090fe:	2104      	movs	r1, #4
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fc8f 	bl	8009a24 <_calloc_r>
 8009106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009108:	60f0      	str	r0, [r6, #12]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e4      	bne.n	80090da <_Balloc+0x2e>
 8009110:	2000      	movs	r0, #0
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	6802      	ldr	r2, [r0, #0]
 8009116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800911a:	2300      	movs	r3, #0
 800911c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009120:	e7f7      	b.n	8009112 <_Balloc+0x66>
 8009122:	bf00      	nop
 8009124:	0800ac16 	.word	0x0800ac16
 8009128:	0800ad1c 	.word	0x0800ad1c

0800912c <_Bfree>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	b976      	cbnz	r6, 8009154 <_Bfree+0x28>
 8009136:	2010      	movs	r0, #16
 8009138:	f7ff ff90 	bl	800905c <malloc>
 800913c:	4602      	mov	r2, r0
 800913e:	6268      	str	r0, [r5, #36]	; 0x24
 8009140:	b920      	cbnz	r0, 800914c <_Bfree+0x20>
 8009142:	4b09      	ldr	r3, [pc, #36]	; (8009168 <_Bfree+0x3c>)
 8009144:	4809      	ldr	r0, [pc, #36]	; (800916c <_Bfree+0x40>)
 8009146:	218a      	movs	r1, #138	; 0x8a
 8009148:	f000 feba 	bl	8009ec0 <__assert_func>
 800914c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009150:	6006      	str	r6, [r0, #0]
 8009152:	60c6      	str	r6, [r0, #12]
 8009154:	b13c      	cbz	r4, 8009166 <_Bfree+0x3a>
 8009156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009160:	6021      	str	r1, [r4, #0]
 8009162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	0800ac16 	.word	0x0800ac16
 800916c:	0800ad1c 	.word	0x0800ad1c

08009170 <__multadd>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	690e      	ldr	r6, [r1, #16]
 8009176:	4607      	mov	r7, r0
 8009178:	4698      	mov	r8, r3
 800917a:	460c      	mov	r4, r1
 800917c:	f101 0014 	add.w	r0, r1, #20
 8009180:	2300      	movs	r3, #0
 8009182:	6805      	ldr	r5, [r0, #0]
 8009184:	b2a9      	uxth	r1, r5
 8009186:	fb02 8101 	mla	r1, r2, r1, r8
 800918a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800918e:	0c2d      	lsrs	r5, r5, #16
 8009190:	fb02 c505 	mla	r5, r2, r5, ip
 8009194:	b289      	uxth	r1, r1
 8009196:	3301      	adds	r3, #1
 8009198:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800919c:	429e      	cmp	r6, r3
 800919e:	f840 1b04 	str.w	r1, [r0], #4
 80091a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80091a6:	dcec      	bgt.n	8009182 <__multadd+0x12>
 80091a8:	f1b8 0f00 	cmp.w	r8, #0
 80091ac:	d022      	beq.n	80091f4 <__multadd+0x84>
 80091ae:	68a3      	ldr	r3, [r4, #8]
 80091b0:	42b3      	cmp	r3, r6
 80091b2:	dc19      	bgt.n	80091e8 <__multadd+0x78>
 80091b4:	6861      	ldr	r1, [r4, #4]
 80091b6:	4638      	mov	r0, r7
 80091b8:	3101      	adds	r1, #1
 80091ba:	f7ff ff77 	bl	80090ac <_Balloc>
 80091be:	4605      	mov	r5, r0
 80091c0:	b928      	cbnz	r0, 80091ce <__multadd+0x5e>
 80091c2:	4602      	mov	r2, r0
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <__multadd+0x8c>)
 80091c6:	480e      	ldr	r0, [pc, #56]	; (8009200 <__multadd+0x90>)
 80091c8:	21b5      	movs	r1, #181	; 0xb5
 80091ca:	f000 fe79 	bl	8009ec0 <__assert_func>
 80091ce:	6922      	ldr	r2, [r4, #16]
 80091d0:	3202      	adds	r2, #2
 80091d2:	f104 010c 	add.w	r1, r4, #12
 80091d6:	0092      	lsls	r2, r2, #2
 80091d8:	300c      	adds	r0, #12
 80091da:	f7ff ff59 	bl	8009090 <memcpy>
 80091de:	4621      	mov	r1, r4
 80091e0:	4638      	mov	r0, r7
 80091e2:	f7ff ffa3 	bl	800912c <_Bfree>
 80091e6:	462c      	mov	r4, r5
 80091e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80091ec:	3601      	adds	r6, #1
 80091ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80091f2:	6126      	str	r6, [r4, #16]
 80091f4:	4620      	mov	r0, r4
 80091f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fa:	bf00      	nop
 80091fc:	0800ac8c 	.word	0x0800ac8c
 8009200:	0800ad1c 	.word	0x0800ad1c

08009204 <__s2b>:
 8009204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009208:	460c      	mov	r4, r1
 800920a:	4615      	mov	r5, r2
 800920c:	461f      	mov	r7, r3
 800920e:	2209      	movs	r2, #9
 8009210:	3308      	adds	r3, #8
 8009212:	4606      	mov	r6, r0
 8009214:	fb93 f3f2 	sdiv	r3, r3, r2
 8009218:	2100      	movs	r1, #0
 800921a:	2201      	movs	r2, #1
 800921c:	429a      	cmp	r2, r3
 800921e:	db09      	blt.n	8009234 <__s2b+0x30>
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff ff43 	bl	80090ac <_Balloc>
 8009226:	b940      	cbnz	r0, 800923a <__s2b+0x36>
 8009228:	4602      	mov	r2, r0
 800922a:	4b19      	ldr	r3, [pc, #100]	; (8009290 <__s2b+0x8c>)
 800922c:	4819      	ldr	r0, [pc, #100]	; (8009294 <__s2b+0x90>)
 800922e:	21ce      	movs	r1, #206	; 0xce
 8009230:	f000 fe46 	bl	8009ec0 <__assert_func>
 8009234:	0052      	lsls	r2, r2, #1
 8009236:	3101      	adds	r1, #1
 8009238:	e7f0      	b.n	800921c <__s2b+0x18>
 800923a:	9b08      	ldr	r3, [sp, #32]
 800923c:	6143      	str	r3, [r0, #20]
 800923e:	2d09      	cmp	r5, #9
 8009240:	f04f 0301 	mov.w	r3, #1
 8009244:	6103      	str	r3, [r0, #16]
 8009246:	dd16      	ble.n	8009276 <__s2b+0x72>
 8009248:	f104 0909 	add.w	r9, r4, #9
 800924c:	46c8      	mov	r8, r9
 800924e:	442c      	add	r4, r5
 8009250:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009254:	4601      	mov	r1, r0
 8009256:	3b30      	subs	r3, #48	; 0x30
 8009258:	220a      	movs	r2, #10
 800925a:	4630      	mov	r0, r6
 800925c:	f7ff ff88 	bl	8009170 <__multadd>
 8009260:	45a0      	cmp	r8, r4
 8009262:	d1f5      	bne.n	8009250 <__s2b+0x4c>
 8009264:	f1a5 0408 	sub.w	r4, r5, #8
 8009268:	444c      	add	r4, r9
 800926a:	1b2d      	subs	r5, r5, r4
 800926c:	1963      	adds	r3, r4, r5
 800926e:	42bb      	cmp	r3, r7
 8009270:	db04      	blt.n	800927c <__s2b+0x78>
 8009272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009276:	340a      	adds	r4, #10
 8009278:	2509      	movs	r5, #9
 800927a:	e7f6      	b.n	800926a <__s2b+0x66>
 800927c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009280:	4601      	mov	r1, r0
 8009282:	3b30      	subs	r3, #48	; 0x30
 8009284:	220a      	movs	r2, #10
 8009286:	4630      	mov	r0, r6
 8009288:	f7ff ff72 	bl	8009170 <__multadd>
 800928c:	e7ee      	b.n	800926c <__s2b+0x68>
 800928e:	bf00      	nop
 8009290:	0800ac8c 	.word	0x0800ac8c
 8009294:	0800ad1c 	.word	0x0800ad1c

08009298 <__hi0bits>:
 8009298:	0c03      	lsrs	r3, r0, #16
 800929a:	041b      	lsls	r3, r3, #16
 800929c:	b9d3      	cbnz	r3, 80092d4 <__hi0bits+0x3c>
 800929e:	0400      	lsls	r0, r0, #16
 80092a0:	2310      	movs	r3, #16
 80092a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092a6:	bf04      	itt	eq
 80092a8:	0200      	lsleq	r0, r0, #8
 80092aa:	3308      	addeq	r3, #8
 80092ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092b0:	bf04      	itt	eq
 80092b2:	0100      	lsleq	r0, r0, #4
 80092b4:	3304      	addeq	r3, #4
 80092b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092ba:	bf04      	itt	eq
 80092bc:	0080      	lsleq	r0, r0, #2
 80092be:	3302      	addeq	r3, #2
 80092c0:	2800      	cmp	r0, #0
 80092c2:	db05      	blt.n	80092d0 <__hi0bits+0x38>
 80092c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092c8:	f103 0301 	add.w	r3, r3, #1
 80092cc:	bf08      	it	eq
 80092ce:	2320      	moveq	r3, #32
 80092d0:	4618      	mov	r0, r3
 80092d2:	4770      	bx	lr
 80092d4:	2300      	movs	r3, #0
 80092d6:	e7e4      	b.n	80092a2 <__hi0bits+0xa>

080092d8 <__lo0bits>:
 80092d8:	6803      	ldr	r3, [r0, #0]
 80092da:	f013 0207 	ands.w	r2, r3, #7
 80092de:	4601      	mov	r1, r0
 80092e0:	d00b      	beq.n	80092fa <__lo0bits+0x22>
 80092e2:	07da      	lsls	r2, r3, #31
 80092e4:	d424      	bmi.n	8009330 <__lo0bits+0x58>
 80092e6:	0798      	lsls	r0, r3, #30
 80092e8:	bf49      	itett	mi
 80092ea:	085b      	lsrmi	r3, r3, #1
 80092ec:	089b      	lsrpl	r3, r3, #2
 80092ee:	2001      	movmi	r0, #1
 80092f0:	600b      	strmi	r3, [r1, #0]
 80092f2:	bf5c      	itt	pl
 80092f4:	600b      	strpl	r3, [r1, #0]
 80092f6:	2002      	movpl	r0, #2
 80092f8:	4770      	bx	lr
 80092fa:	b298      	uxth	r0, r3
 80092fc:	b9b0      	cbnz	r0, 800932c <__lo0bits+0x54>
 80092fe:	0c1b      	lsrs	r3, r3, #16
 8009300:	2010      	movs	r0, #16
 8009302:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009306:	bf04      	itt	eq
 8009308:	0a1b      	lsreq	r3, r3, #8
 800930a:	3008      	addeq	r0, #8
 800930c:	071a      	lsls	r2, r3, #28
 800930e:	bf04      	itt	eq
 8009310:	091b      	lsreq	r3, r3, #4
 8009312:	3004      	addeq	r0, #4
 8009314:	079a      	lsls	r2, r3, #30
 8009316:	bf04      	itt	eq
 8009318:	089b      	lsreq	r3, r3, #2
 800931a:	3002      	addeq	r0, #2
 800931c:	07da      	lsls	r2, r3, #31
 800931e:	d403      	bmi.n	8009328 <__lo0bits+0x50>
 8009320:	085b      	lsrs	r3, r3, #1
 8009322:	f100 0001 	add.w	r0, r0, #1
 8009326:	d005      	beq.n	8009334 <__lo0bits+0x5c>
 8009328:	600b      	str	r3, [r1, #0]
 800932a:	4770      	bx	lr
 800932c:	4610      	mov	r0, r2
 800932e:	e7e8      	b.n	8009302 <__lo0bits+0x2a>
 8009330:	2000      	movs	r0, #0
 8009332:	4770      	bx	lr
 8009334:	2020      	movs	r0, #32
 8009336:	4770      	bx	lr

08009338 <__i2b>:
 8009338:	b510      	push	{r4, lr}
 800933a:	460c      	mov	r4, r1
 800933c:	2101      	movs	r1, #1
 800933e:	f7ff feb5 	bl	80090ac <_Balloc>
 8009342:	4602      	mov	r2, r0
 8009344:	b928      	cbnz	r0, 8009352 <__i2b+0x1a>
 8009346:	4b05      	ldr	r3, [pc, #20]	; (800935c <__i2b+0x24>)
 8009348:	4805      	ldr	r0, [pc, #20]	; (8009360 <__i2b+0x28>)
 800934a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800934e:	f000 fdb7 	bl	8009ec0 <__assert_func>
 8009352:	2301      	movs	r3, #1
 8009354:	6144      	str	r4, [r0, #20]
 8009356:	6103      	str	r3, [r0, #16]
 8009358:	bd10      	pop	{r4, pc}
 800935a:	bf00      	nop
 800935c:	0800ac8c 	.word	0x0800ac8c
 8009360:	0800ad1c 	.word	0x0800ad1c

08009364 <__multiply>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4614      	mov	r4, r2
 800936a:	690a      	ldr	r2, [r1, #16]
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	429a      	cmp	r2, r3
 8009370:	bfb8      	it	lt
 8009372:	460b      	movlt	r3, r1
 8009374:	460d      	mov	r5, r1
 8009376:	bfbc      	itt	lt
 8009378:	4625      	movlt	r5, r4
 800937a:	461c      	movlt	r4, r3
 800937c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009380:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009384:	68ab      	ldr	r3, [r5, #8]
 8009386:	6869      	ldr	r1, [r5, #4]
 8009388:	eb0a 0709 	add.w	r7, sl, r9
 800938c:	42bb      	cmp	r3, r7
 800938e:	b085      	sub	sp, #20
 8009390:	bfb8      	it	lt
 8009392:	3101      	addlt	r1, #1
 8009394:	f7ff fe8a 	bl	80090ac <_Balloc>
 8009398:	b930      	cbnz	r0, 80093a8 <__multiply+0x44>
 800939a:	4602      	mov	r2, r0
 800939c:	4b42      	ldr	r3, [pc, #264]	; (80094a8 <__multiply+0x144>)
 800939e:	4843      	ldr	r0, [pc, #268]	; (80094ac <__multiply+0x148>)
 80093a0:	f240 115d 	movw	r1, #349	; 0x15d
 80093a4:	f000 fd8c 	bl	8009ec0 <__assert_func>
 80093a8:	f100 0614 	add.w	r6, r0, #20
 80093ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80093b0:	4633      	mov	r3, r6
 80093b2:	2200      	movs	r2, #0
 80093b4:	4543      	cmp	r3, r8
 80093b6:	d31e      	bcc.n	80093f6 <__multiply+0x92>
 80093b8:	f105 0c14 	add.w	ip, r5, #20
 80093bc:	f104 0314 	add.w	r3, r4, #20
 80093c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80093c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80093c8:	9202      	str	r2, [sp, #8]
 80093ca:	ebac 0205 	sub.w	r2, ip, r5
 80093ce:	3a15      	subs	r2, #21
 80093d0:	f022 0203 	bic.w	r2, r2, #3
 80093d4:	3204      	adds	r2, #4
 80093d6:	f105 0115 	add.w	r1, r5, #21
 80093da:	458c      	cmp	ip, r1
 80093dc:	bf38      	it	cc
 80093de:	2204      	movcc	r2, #4
 80093e0:	9201      	str	r2, [sp, #4]
 80093e2:	9a02      	ldr	r2, [sp, #8]
 80093e4:	9303      	str	r3, [sp, #12]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d808      	bhi.n	80093fc <__multiply+0x98>
 80093ea:	2f00      	cmp	r7, #0
 80093ec:	dc55      	bgt.n	800949a <__multiply+0x136>
 80093ee:	6107      	str	r7, [r0, #16]
 80093f0:	b005      	add	sp, #20
 80093f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f6:	f843 2b04 	str.w	r2, [r3], #4
 80093fa:	e7db      	b.n	80093b4 <__multiply+0x50>
 80093fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8009400:	f1ba 0f00 	cmp.w	sl, #0
 8009404:	d020      	beq.n	8009448 <__multiply+0xe4>
 8009406:	f105 0e14 	add.w	lr, r5, #20
 800940a:	46b1      	mov	r9, r6
 800940c:	2200      	movs	r2, #0
 800940e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009412:	f8d9 b000 	ldr.w	fp, [r9]
 8009416:	b2a1      	uxth	r1, r4
 8009418:	fa1f fb8b 	uxth.w	fp, fp
 800941c:	fb0a b101 	mla	r1, sl, r1, fp
 8009420:	4411      	add	r1, r2
 8009422:	f8d9 2000 	ldr.w	r2, [r9]
 8009426:	0c24      	lsrs	r4, r4, #16
 8009428:	0c12      	lsrs	r2, r2, #16
 800942a:	fb0a 2404 	mla	r4, sl, r4, r2
 800942e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009432:	b289      	uxth	r1, r1
 8009434:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009438:	45f4      	cmp	ip, lr
 800943a:	f849 1b04 	str.w	r1, [r9], #4
 800943e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009442:	d8e4      	bhi.n	800940e <__multiply+0xaa>
 8009444:	9901      	ldr	r1, [sp, #4]
 8009446:	5072      	str	r2, [r6, r1]
 8009448:	9a03      	ldr	r2, [sp, #12]
 800944a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800944e:	3304      	adds	r3, #4
 8009450:	f1b9 0f00 	cmp.w	r9, #0
 8009454:	d01f      	beq.n	8009496 <__multiply+0x132>
 8009456:	6834      	ldr	r4, [r6, #0]
 8009458:	f105 0114 	add.w	r1, r5, #20
 800945c:	46b6      	mov	lr, r6
 800945e:	f04f 0a00 	mov.w	sl, #0
 8009462:	880a      	ldrh	r2, [r1, #0]
 8009464:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009468:	fb09 b202 	mla	r2, r9, r2, fp
 800946c:	4492      	add	sl, r2
 800946e:	b2a4      	uxth	r4, r4
 8009470:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009474:	f84e 4b04 	str.w	r4, [lr], #4
 8009478:	f851 4b04 	ldr.w	r4, [r1], #4
 800947c:	f8be 2000 	ldrh.w	r2, [lr]
 8009480:	0c24      	lsrs	r4, r4, #16
 8009482:	fb09 2404 	mla	r4, r9, r4, r2
 8009486:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800948a:	458c      	cmp	ip, r1
 800948c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009490:	d8e7      	bhi.n	8009462 <__multiply+0xfe>
 8009492:	9a01      	ldr	r2, [sp, #4]
 8009494:	50b4      	str	r4, [r6, r2]
 8009496:	3604      	adds	r6, #4
 8009498:	e7a3      	b.n	80093e2 <__multiply+0x7e>
 800949a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1a5      	bne.n	80093ee <__multiply+0x8a>
 80094a2:	3f01      	subs	r7, #1
 80094a4:	e7a1      	b.n	80093ea <__multiply+0x86>
 80094a6:	bf00      	nop
 80094a8:	0800ac8c 	.word	0x0800ac8c
 80094ac:	0800ad1c 	.word	0x0800ad1c

080094b0 <__pow5mult>:
 80094b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	4615      	mov	r5, r2
 80094b6:	f012 0203 	ands.w	r2, r2, #3
 80094ba:	4606      	mov	r6, r0
 80094bc:	460f      	mov	r7, r1
 80094be:	d007      	beq.n	80094d0 <__pow5mult+0x20>
 80094c0:	4c25      	ldr	r4, [pc, #148]	; (8009558 <__pow5mult+0xa8>)
 80094c2:	3a01      	subs	r2, #1
 80094c4:	2300      	movs	r3, #0
 80094c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ca:	f7ff fe51 	bl	8009170 <__multadd>
 80094ce:	4607      	mov	r7, r0
 80094d0:	10ad      	asrs	r5, r5, #2
 80094d2:	d03d      	beq.n	8009550 <__pow5mult+0xa0>
 80094d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094d6:	b97c      	cbnz	r4, 80094f8 <__pow5mult+0x48>
 80094d8:	2010      	movs	r0, #16
 80094da:	f7ff fdbf 	bl	800905c <malloc>
 80094de:	4602      	mov	r2, r0
 80094e0:	6270      	str	r0, [r6, #36]	; 0x24
 80094e2:	b928      	cbnz	r0, 80094f0 <__pow5mult+0x40>
 80094e4:	4b1d      	ldr	r3, [pc, #116]	; (800955c <__pow5mult+0xac>)
 80094e6:	481e      	ldr	r0, [pc, #120]	; (8009560 <__pow5mult+0xb0>)
 80094e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094ec:	f000 fce8 	bl	8009ec0 <__assert_func>
 80094f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094f4:	6004      	str	r4, [r0, #0]
 80094f6:	60c4      	str	r4, [r0, #12]
 80094f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009500:	b94c      	cbnz	r4, 8009516 <__pow5mult+0x66>
 8009502:	f240 2171 	movw	r1, #625	; 0x271
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff ff16 	bl	8009338 <__i2b>
 800950c:	2300      	movs	r3, #0
 800950e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009512:	4604      	mov	r4, r0
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	f04f 0900 	mov.w	r9, #0
 800951a:	07eb      	lsls	r3, r5, #31
 800951c:	d50a      	bpl.n	8009534 <__pow5mult+0x84>
 800951e:	4639      	mov	r1, r7
 8009520:	4622      	mov	r2, r4
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ff1e 	bl	8009364 <__multiply>
 8009528:	4639      	mov	r1, r7
 800952a:	4680      	mov	r8, r0
 800952c:	4630      	mov	r0, r6
 800952e:	f7ff fdfd 	bl	800912c <_Bfree>
 8009532:	4647      	mov	r7, r8
 8009534:	106d      	asrs	r5, r5, #1
 8009536:	d00b      	beq.n	8009550 <__pow5mult+0xa0>
 8009538:	6820      	ldr	r0, [r4, #0]
 800953a:	b938      	cbnz	r0, 800954c <__pow5mult+0x9c>
 800953c:	4622      	mov	r2, r4
 800953e:	4621      	mov	r1, r4
 8009540:	4630      	mov	r0, r6
 8009542:	f7ff ff0f 	bl	8009364 <__multiply>
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	f8c0 9000 	str.w	r9, [r0]
 800954c:	4604      	mov	r4, r0
 800954e:	e7e4      	b.n	800951a <__pow5mult+0x6a>
 8009550:	4638      	mov	r0, r7
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	bf00      	nop
 8009558:	0800ae70 	.word	0x0800ae70
 800955c:	0800ac16 	.word	0x0800ac16
 8009560:	0800ad1c 	.word	0x0800ad1c

08009564 <__lshift>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	460c      	mov	r4, r1
 800956a:	6849      	ldr	r1, [r1, #4]
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	4607      	mov	r7, r0
 8009576:	4691      	mov	r9, r2
 8009578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800957c:	f108 0601 	add.w	r6, r8, #1
 8009580:	42b3      	cmp	r3, r6
 8009582:	db0b      	blt.n	800959c <__lshift+0x38>
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff fd91 	bl	80090ac <_Balloc>
 800958a:	4605      	mov	r5, r0
 800958c:	b948      	cbnz	r0, 80095a2 <__lshift+0x3e>
 800958e:	4602      	mov	r2, r0
 8009590:	4b28      	ldr	r3, [pc, #160]	; (8009634 <__lshift+0xd0>)
 8009592:	4829      	ldr	r0, [pc, #164]	; (8009638 <__lshift+0xd4>)
 8009594:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009598:	f000 fc92 	bl	8009ec0 <__assert_func>
 800959c:	3101      	adds	r1, #1
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	e7ee      	b.n	8009580 <__lshift+0x1c>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f100 0114 	add.w	r1, r0, #20
 80095a8:	f100 0210 	add.w	r2, r0, #16
 80095ac:	4618      	mov	r0, r3
 80095ae:	4553      	cmp	r3, sl
 80095b0:	db33      	blt.n	800961a <__lshift+0xb6>
 80095b2:	6920      	ldr	r0, [r4, #16]
 80095b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095b8:	f104 0314 	add.w	r3, r4, #20
 80095bc:	f019 091f 	ands.w	r9, r9, #31
 80095c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095c8:	d02b      	beq.n	8009622 <__lshift+0xbe>
 80095ca:	f1c9 0e20 	rsb	lr, r9, #32
 80095ce:	468a      	mov	sl, r1
 80095d0:	2200      	movs	r2, #0
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	fa00 f009 	lsl.w	r0, r0, r9
 80095d8:	4302      	orrs	r2, r0
 80095da:	f84a 2b04 	str.w	r2, [sl], #4
 80095de:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e2:	459c      	cmp	ip, r3
 80095e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80095e8:	d8f3      	bhi.n	80095d2 <__lshift+0x6e>
 80095ea:	ebac 0304 	sub.w	r3, ip, r4
 80095ee:	3b15      	subs	r3, #21
 80095f0:	f023 0303 	bic.w	r3, r3, #3
 80095f4:	3304      	adds	r3, #4
 80095f6:	f104 0015 	add.w	r0, r4, #21
 80095fa:	4584      	cmp	ip, r0
 80095fc:	bf38      	it	cc
 80095fe:	2304      	movcc	r3, #4
 8009600:	50ca      	str	r2, [r1, r3]
 8009602:	b10a      	cbz	r2, 8009608 <__lshift+0xa4>
 8009604:	f108 0602 	add.w	r6, r8, #2
 8009608:	3e01      	subs	r6, #1
 800960a:	4638      	mov	r0, r7
 800960c:	612e      	str	r6, [r5, #16]
 800960e:	4621      	mov	r1, r4
 8009610:	f7ff fd8c 	bl	800912c <_Bfree>
 8009614:	4628      	mov	r0, r5
 8009616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961a:	f842 0f04 	str.w	r0, [r2, #4]!
 800961e:	3301      	adds	r3, #1
 8009620:	e7c5      	b.n	80095ae <__lshift+0x4a>
 8009622:	3904      	subs	r1, #4
 8009624:	f853 2b04 	ldr.w	r2, [r3], #4
 8009628:	f841 2f04 	str.w	r2, [r1, #4]!
 800962c:	459c      	cmp	ip, r3
 800962e:	d8f9      	bhi.n	8009624 <__lshift+0xc0>
 8009630:	e7ea      	b.n	8009608 <__lshift+0xa4>
 8009632:	bf00      	nop
 8009634:	0800ac8c 	.word	0x0800ac8c
 8009638:	0800ad1c 	.word	0x0800ad1c

0800963c <__mcmp>:
 800963c:	b530      	push	{r4, r5, lr}
 800963e:	6902      	ldr	r2, [r0, #16]
 8009640:	690c      	ldr	r4, [r1, #16]
 8009642:	1b12      	subs	r2, r2, r4
 8009644:	d10e      	bne.n	8009664 <__mcmp+0x28>
 8009646:	f100 0314 	add.w	r3, r0, #20
 800964a:	3114      	adds	r1, #20
 800964c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009654:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009658:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800965c:	42a5      	cmp	r5, r4
 800965e:	d003      	beq.n	8009668 <__mcmp+0x2c>
 8009660:	d305      	bcc.n	800966e <__mcmp+0x32>
 8009662:	2201      	movs	r2, #1
 8009664:	4610      	mov	r0, r2
 8009666:	bd30      	pop	{r4, r5, pc}
 8009668:	4283      	cmp	r3, r0
 800966a:	d3f3      	bcc.n	8009654 <__mcmp+0x18>
 800966c:	e7fa      	b.n	8009664 <__mcmp+0x28>
 800966e:	f04f 32ff 	mov.w	r2, #4294967295
 8009672:	e7f7      	b.n	8009664 <__mcmp+0x28>

08009674 <__mdiff>:
 8009674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	460c      	mov	r4, r1
 800967a:	4606      	mov	r6, r0
 800967c:	4611      	mov	r1, r2
 800967e:	4620      	mov	r0, r4
 8009680:	4617      	mov	r7, r2
 8009682:	f7ff ffdb 	bl	800963c <__mcmp>
 8009686:	1e05      	subs	r5, r0, #0
 8009688:	d110      	bne.n	80096ac <__mdiff+0x38>
 800968a:	4629      	mov	r1, r5
 800968c:	4630      	mov	r0, r6
 800968e:	f7ff fd0d 	bl	80090ac <_Balloc>
 8009692:	b930      	cbnz	r0, 80096a2 <__mdiff+0x2e>
 8009694:	4b39      	ldr	r3, [pc, #228]	; (800977c <__mdiff+0x108>)
 8009696:	4602      	mov	r2, r0
 8009698:	f240 2132 	movw	r1, #562	; 0x232
 800969c:	4838      	ldr	r0, [pc, #224]	; (8009780 <__mdiff+0x10c>)
 800969e:	f000 fc0f 	bl	8009ec0 <__assert_func>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	bfa4      	itt	ge
 80096ae:	463b      	movge	r3, r7
 80096b0:	4627      	movge	r7, r4
 80096b2:	4630      	mov	r0, r6
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	bfa6      	itte	ge
 80096b8:	461c      	movge	r4, r3
 80096ba:	2500      	movge	r5, #0
 80096bc:	2501      	movlt	r5, #1
 80096be:	f7ff fcf5 	bl	80090ac <_Balloc>
 80096c2:	b920      	cbnz	r0, 80096ce <__mdiff+0x5a>
 80096c4:	4b2d      	ldr	r3, [pc, #180]	; (800977c <__mdiff+0x108>)
 80096c6:	4602      	mov	r2, r0
 80096c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096cc:	e7e6      	b.n	800969c <__mdiff+0x28>
 80096ce:	693e      	ldr	r6, [r7, #16]
 80096d0:	60c5      	str	r5, [r0, #12]
 80096d2:	6925      	ldr	r5, [r4, #16]
 80096d4:	f107 0114 	add.w	r1, r7, #20
 80096d8:	f104 0914 	add.w	r9, r4, #20
 80096dc:	f100 0e14 	add.w	lr, r0, #20
 80096e0:	f107 0210 	add.w	r2, r7, #16
 80096e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80096e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80096ec:	46f2      	mov	sl, lr
 80096ee:	2700      	movs	r7, #0
 80096f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80096f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096f8:	fa1f f883 	uxth.w	r8, r3
 80096fc:	fa17 f78b 	uxtah	r7, r7, fp
 8009700:	0c1b      	lsrs	r3, r3, #16
 8009702:	eba7 0808 	sub.w	r8, r7, r8
 8009706:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800970a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800970e:	fa1f f888 	uxth.w	r8, r8
 8009712:	141f      	asrs	r7, r3, #16
 8009714:	454d      	cmp	r5, r9
 8009716:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800971a:	f84a 3b04 	str.w	r3, [sl], #4
 800971e:	d8e7      	bhi.n	80096f0 <__mdiff+0x7c>
 8009720:	1b2b      	subs	r3, r5, r4
 8009722:	3b15      	subs	r3, #21
 8009724:	f023 0303 	bic.w	r3, r3, #3
 8009728:	3304      	adds	r3, #4
 800972a:	3415      	adds	r4, #21
 800972c:	42a5      	cmp	r5, r4
 800972e:	bf38      	it	cc
 8009730:	2304      	movcc	r3, #4
 8009732:	4419      	add	r1, r3
 8009734:	4473      	add	r3, lr
 8009736:	469e      	mov	lr, r3
 8009738:	460d      	mov	r5, r1
 800973a:	4565      	cmp	r5, ip
 800973c:	d30e      	bcc.n	800975c <__mdiff+0xe8>
 800973e:	f10c 0203 	add.w	r2, ip, #3
 8009742:	1a52      	subs	r2, r2, r1
 8009744:	f022 0203 	bic.w	r2, r2, #3
 8009748:	3903      	subs	r1, #3
 800974a:	458c      	cmp	ip, r1
 800974c:	bf38      	it	cc
 800974e:	2200      	movcc	r2, #0
 8009750:	441a      	add	r2, r3
 8009752:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009756:	b17b      	cbz	r3, 8009778 <__mdiff+0x104>
 8009758:	6106      	str	r6, [r0, #16]
 800975a:	e7a5      	b.n	80096a8 <__mdiff+0x34>
 800975c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009760:	fa17 f488 	uxtah	r4, r7, r8
 8009764:	1422      	asrs	r2, r4, #16
 8009766:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800976a:	b2a4      	uxth	r4, r4
 800976c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009770:	f84e 4b04 	str.w	r4, [lr], #4
 8009774:	1417      	asrs	r7, r2, #16
 8009776:	e7e0      	b.n	800973a <__mdiff+0xc6>
 8009778:	3e01      	subs	r6, #1
 800977a:	e7ea      	b.n	8009752 <__mdiff+0xde>
 800977c:	0800ac8c 	.word	0x0800ac8c
 8009780:	0800ad1c 	.word	0x0800ad1c

08009784 <__ulp>:
 8009784:	b082      	sub	sp, #8
 8009786:	ed8d 0b00 	vstr	d0, [sp]
 800978a:	9b01      	ldr	r3, [sp, #4]
 800978c:	4912      	ldr	r1, [pc, #72]	; (80097d8 <__ulp+0x54>)
 800978e:	4019      	ands	r1, r3
 8009790:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009794:	2900      	cmp	r1, #0
 8009796:	dd05      	ble.n	80097a4 <__ulp+0x20>
 8009798:	2200      	movs	r2, #0
 800979a:	460b      	mov	r3, r1
 800979c:	ec43 2b10 	vmov	d0, r2, r3
 80097a0:	b002      	add	sp, #8
 80097a2:	4770      	bx	lr
 80097a4:	4249      	negs	r1, r1
 80097a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80097aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80097ae:	f04f 0200 	mov.w	r2, #0
 80097b2:	f04f 0300 	mov.w	r3, #0
 80097b6:	da04      	bge.n	80097c2 <__ulp+0x3e>
 80097b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80097bc:	fa41 f300 	asr.w	r3, r1, r0
 80097c0:	e7ec      	b.n	800979c <__ulp+0x18>
 80097c2:	f1a0 0114 	sub.w	r1, r0, #20
 80097c6:	291e      	cmp	r1, #30
 80097c8:	bfda      	itte	le
 80097ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80097ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80097d2:	2101      	movgt	r1, #1
 80097d4:	460a      	mov	r2, r1
 80097d6:	e7e1      	b.n	800979c <__ulp+0x18>
 80097d8:	7ff00000 	.word	0x7ff00000

080097dc <__b2d>:
 80097dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097de:	6905      	ldr	r5, [r0, #16]
 80097e0:	f100 0714 	add.w	r7, r0, #20
 80097e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80097e8:	1f2e      	subs	r6, r5, #4
 80097ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80097ee:	4620      	mov	r0, r4
 80097f0:	f7ff fd52 	bl	8009298 <__hi0bits>
 80097f4:	f1c0 0320 	rsb	r3, r0, #32
 80097f8:	280a      	cmp	r0, #10
 80097fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009878 <__b2d+0x9c>
 80097fe:	600b      	str	r3, [r1, #0]
 8009800:	dc14      	bgt.n	800982c <__b2d+0x50>
 8009802:	f1c0 0e0b 	rsb	lr, r0, #11
 8009806:	fa24 f10e 	lsr.w	r1, r4, lr
 800980a:	42b7      	cmp	r7, r6
 800980c:	ea41 030c 	orr.w	r3, r1, ip
 8009810:	bf34      	ite	cc
 8009812:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009816:	2100      	movcs	r1, #0
 8009818:	3015      	adds	r0, #21
 800981a:	fa04 f000 	lsl.w	r0, r4, r0
 800981e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009822:	ea40 0201 	orr.w	r2, r0, r1
 8009826:	ec43 2b10 	vmov	d0, r2, r3
 800982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982c:	42b7      	cmp	r7, r6
 800982e:	bf3a      	itte	cc
 8009830:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009834:	f1a5 0608 	subcc.w	r6, r5, #8
 8009838:	2100      	movcs	r1, #0
 800983a:	380b      	subs	r0, #11
 800983c:	d017      	beq.n	800986e <__b2d+0x92>
 800983e:	f1c0 0c20 	rsb	ip, r0, #32
 8009842:	fa04 f500 	lsl.w	r5, r4, r0
 8009846:	42be      	cmp	r6, r7
 8009848:	fa21 f40c 	lsr.w	r4, r1, ip
 800984c:	ea45 0504 	orr.w	r5, r5, r4
 8009850:	bf8c      	ite	hi
 8009852:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009856:	2400      	movls	r4, #0
 8009858:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800985c:	fa01 f000 	lsl.w	r0, r1, r0
 8009860:	fa24 f40c 	lsr.w	r4, r4, ip
 8009864:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009868:	ea40 0204 	orr.w	r2, r0, r4
 800986c:	e7db      	b.n	8009826 <__b2d+0x4a>
 800986e:	ea44 030c 	orr.w	r3, r4, ip
 8009872:	460a      	mov	r2, r1
 8009874:	e7d7      	b.n	8009826 <__b2d+0x4a>
 8009876:	bf00      	nop
 8009878:	3ff00000 	.word	0x3ff00000

0800987c <__d2b>:
 800987c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009880:	4689      	mov	r9, r1
 8009882:	2101      	movs	r1, #1
 8009884:	ec57 6b10 	vmov	r6, r7, d0
 8009888:	4690      	mov	r8, r2
 800988a:	f7ff fc0f 	bl	80090ac <_Balloc>
 800988e:	4604      	mov	r4, r0
 8009890:	b930      	cbnz	r0, 80098a0 <__d2b+0x24>
 8009892:	4602      	mov	r2, r0
 8009894:	4b25      	ldr	r3, [pc, #148]	; (800992c <__d2b+0xb0>)
 8009896:	4826      	ldr	r0, [pc, #152]	; (8009930 <__d2b+0xb4>)
 8009898:	f240 310a 	movw	r1, #778	; 0x30a
 800989c:	f000 fb10 	bl	8009ec0 <__assert_func>
 80098a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80098a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098a8:	bb35      	cbnz	r5, 80098f8 <__d2b+0x7c>
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	d028      	beq.n	8009902 <__d2b+0x86>
 80098b0:	4668      	mov	r0, sp
 80098b2:	9600      	str	r6, [sp, #0]
 80098b4:	f7ff fd10 	bl	80092d8 <__lo0bits>
 80098b8:	9900      	ldr	r1, [sp, #0]
 80098ba:	b300      	cbz	r0, 80098fe <__d2b+0x82>
 80098bc:	9a01      	ldr	r2, [sp, #4]
 80098be:	f1c0 0320 	rsb	r3, r0, #32
 80098c2:	fa02 f303 	lsl.w	r3, r2, r3
 80098c6:	430b      	orrs	r3, r1
 80098c8:	40c2      	lsrs	r2, r0
 80098ca:	6163      	str	r3, [r4, #20]
 80098cc:	9201      	str	r2, [sp, #4]
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	61a3      	str	r3, [r4, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bf14      	ite	ne
 80098d6:	2202      	movne	r2, #2
 80098d8:	2201      	moveq	r2, #1
 80098da:	6122      	str	r2, [r4, #16]
 80098dc:	b1d5      	cbz	r5, 8009914 <__d2b+0x98>
 80098de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098e2:	4405      	add	r5, r0
 80098e4:	f8c9 5000 	str.w	r5, [r9]
 80098e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098ec:	f8c8 0000 	str.w	r0, [r8]
 80098f0:	4620      	mov	r0, r4
 80098f2:	b003      	add	sp, #12
 80098f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098fc:	e7d5      	b.n	80098aa <__d2b+0x2e>
 80098fe:	6161      	str	r1, [r4, #20]
 8009900:	e7e5      	b.n	80098ce <__d2b+0x52>
 8009902:	a801      	add	r0, sp, #4
 8009904:	f7ff fce8 	bl	80092d8 <__lo0bits>
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	6163      	str	r3, [r4, #20]
 800990c:	2201      	movs	r2, #1
 800990e:	6122      	str	r2, [r4, #16]
 8009910:	3020      	adds	r0, #32
 8009912:	e7e3      	b.n	80098dc <__d2b+0x60>
 8009914:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009918:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800991c:	f8c9 0000 	str.w	r0, [r9]
 8009920:	6918      	ldr	r0, [r3, #16]
 8009922:	f7ff fcb9 	bl	8009298 <__hi0bits>
 8009926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800992a:	e7df      	b.n	80098ec <__d2b+0x70>
 800992c:	0800ac8c 	.word	0x0800ac8c
 8009930:	0800ad1c 	.word	0x0800ad1c

08009934 <__ratio>:
 8009934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	468a      	mov	sl, r1
 800993a:	4669      	mov	r1, sp
 800993c:	4683      	mov	fp, r0
 800993e:	f7ff ff4d 	bl	80097dc <__b2d>
 8009942:	a901      	add	r1, sp, #4
 8009944:	4650      	mov	r0, sl
 8009946:	ec59 8b10 	vmov	r8, r9, d0
 800994a:	ee10 6a10 	vmov	r6, s0
 800994e:	f7ff ff45 	bl	80097dc <__b2d>
 8009952:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009956:	f8da 2010 	ldr.w	r2, [sl, #16]
 800995a:	eba3 0c02 	sub.w	ip, r3, r2
 800995e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009962:	1a9b      	subs	r3, r3, r2
 8009964:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009968:	ec55 4b10 	vmov	r4, r5, d0
 800996c:	2b00      	cmp	r3, #0
 800996e:	ee10 0a10 	vmov	r0, s0
 8009972:	bfce      	itee	gt
 8009974:	464a      	movgt	r2, r9
 8009976:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800997a:	462a      	movle	r2, r5
 800997c:	464f      	mov	r7, r9
 800997e:	4629      	mov	r1, r5
 8009980:	bfcc      	ite	gt
 8009982:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009986:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800998a:	ec47 6b17 	vmov	d7, r6, r7
 800998e:	ec41 0b16 	vmov	d6, r0, r1
 8009992:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009996:	b003      	add	sp, #12
 8009998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800999c <__copybits>:
 800999c:	3901      	subs	r1, #1
 800999e:	b570      	push	{r4, r5, r6, lr}
 80099a0:	1149      	asrs	r1, r1, #5
 80099a2:	6914      	ldr	r4, [r2, #16]
 80099a4:	3101      	adds	r1, #1
 80099a6:	f102 0314 	add.w	r3, r2, #20
 80099aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099b2:	1f05      	subs	r5, r0, #4
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	d30c      	bcc.n	80099d2 <__copybits+0x36>
 80099b8:	1aa3      	subs	r3, r4, r2
 80099ba:	3b11      	subs	r3, #17
 80099bc:	f023 0303 	bic.w	r3, r3, #3
 80099c0:	3211      	adds	r2, #17
 80099c2:	42a2      	cmp	r2, r4
 80099c4:	bf88      	it	hi
 80099c6:	2300      	movhi	r3, #0
 80099c8:	4418      	add	r0, r3
 80099ca:	2300      	movs	r3, #0
 80099cc:	4288      	cmp	r0, r1
 80099ce:	d305      	bcc.n	80099dc <__copybits+0x40>
 80099d0:	bd70      	pop	{r4, r5, r6, pc}
 80099d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80099d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80099da:	e7eb      	b.n	80099b4 <__copybits+0x18>
 80099dc:	f840 3b04 	str.w	r3, [r0], #4
 80099e0:	e7f4      	b.n	80099cc <__copybits+0x30>

080099e2 <__any_on>:
 80099e2:	f100 0214 	add.w	r2, r0, #20
 80099e6:	6900      	ldr	r0, [r0, #16]
 80099e8:	114b      	asrs	r3, r1, #5
 80099ea:	4298      	cmp	r0, r3
 80099ec:	b510      	push	{r4, lr}
 80099ee:	db11      	blt.n	8009a14 <__any_on+0x32>
 80099f0:	dd0a      	ble.n	8009a08 <__any_on+0x26>
 80099f2:	f011 011f 	ands.w	r1, r1, #31
 80099f6:	d007      	beq.n	8009a08 <__any_on+0x26>
 80099f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099fc:	fa24 f001 	lsr.w	r0, r4, r1
 8009a00:	fa00 f101 	lsl.w	r1, r0, r1
 8009a04:	428c      	cmp	r4, r1
 8009a06:	d10b      	bne.n	8009a20 <__any_on+0x3e>
 8009a08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d803      	bhi.n	8009a18 <__any_on+0x36>
 8009a10:	2000      	movs	r0, #0
 8009a12:	bd10      	pop	{r4, pc}
 8009a14:	4603      	mov	r3, r0
 8009a16:	e7f7      	b.n	8009a08 <__any_on+0x26>
 8009a18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	d0f5      	beq.n	8009a0c <__any_on+0x2a>
 8009a20:	2001      	movs	r0, #1
 8009a22:	e7f6      	b.n	8009a12 <__any_on+0x30>

08009a24 <_calloc_r>:
 8009a24:	b513      	push	{r0, r1, r4, lr}
 8009a26:	434a      	muls	r2, r1
 8009a28:	4611      	mov	r1, r2
 8009a2a:	9201      	str	r2, [sp, #4]
 8009a2c:	f000 f85a 	bl	8009ae4 <_malloc_r>
 8009a30:	4604      	mov	r4, r0
 8009a32:	b118      	cbz	r0, 8009a3c <_calloc_r+0x18>
 8009a34:	9a01      	ldr	r2, [sp, #4]
 8009a36:	2100      	movs	r1, #0
 8009a38:	f7fc fc9a 	bl	8006370 <memset>
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	b002      	add	sp, #8
 8009a40:	bd10      	pop	{r4, pc}
	...

08009a44 <_free_r>:
 8009a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a46:	2900      	cmp	r1, #0
 8009a48:	d048      	beq.n	8009adc <_free_r+0x98>
 8009a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a4e:	9001      	str	r0, [sp, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f1a1 0404 	sub.w	r4, r1, #4
 8009a56:	bfb8      	it	lt
 8009a58:	18e4      	addlt	r4, r4, r3
 8009a5a:	f000 fa7b 	bl	8009f54 <__malloc_lock>
 8009a5e:	4a20      	ldr	r2, [pc, #128]	; (8009ae0 <_free_r+0x9c>)
 8009a60:	9801      	ldr	r0, [sp, #4]
 8009a62:	6813      	ldr	r3, [r2, #0]
 8009a64:	4615      	mov	r5, r2
 8009a66:	b933      	cbnz	r3, 8009a76 <_free_r+0x32>
 8009a68:	6063      	str	r3, [r4, #4]
 8009a6a:	6014      	str	r4, [r2, #0]
 8009a6c:	b003      	add	sp, #12
 8009a6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a72:	f000 ba75 	b.w	8009f60 <__malloc_unlock>
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	d90b      	bls.n	8009a92 <_free_r+0x4e>
 8009a7a:	6821      	ldr	r1, [r4, #0]
 8009a7c:	1862      	adds	r2, r4, r1
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	bf04      	itt	eq
 8009a82:	681a      	ldreq	r2, [r3, #0]
 8009a84:	685b      	ldreq	r3, [r3, #4]
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	bf04      	itt	eq
 8009a8a:	1852      	addeq	r2, r2, r1
 8009a8c:	6022      	streq	r2, [r4, #0]
 8009a8e:	602c      	str	r4, [r5, #0]
 8009a90:	e7ec      	b.n	8009a6c <_free_r+0x28>
 8009a92:	461a      	mov	r2, r3
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	b10b      	cbz	r3, 8009a9c <_free_r+0x58>
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d9fa      	bls.n	8009a92 <_free_r+0x4e>
 8009a9c:	6811      	ldr	r1, [r2, #0]
 8009a9e:	1855      	adds	r5, r2, r1
 8009aa0:	42a5      	cmp	r5, r4
 8009aa2:	d10b      	bne.n	8009abc <_free_r+0x78>
 8009aa4:	6824      	ldr	r4, [r4, #0]
 8009aa6:	4421      	add	r1, r4
 8009aa8:	1854      	adds	r4, r2, r1
 8009aaa:	42a3      	cmp	r3, r4
 8009aac:	6011      	str	r1, [r2, #0]
 8009aae:	d1dd      	bne.n	8009a6c <_free_r+0x28>
 8009ab0:	681c      	ldr	r4, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	6053      	str	r3, [r2, #4]
 8009ab6:	4421      	add	r1, r4
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	e7d7      	b.n	8009a6c <_free_r+0x28>
 8009abc:	d902      	bls.n	8009ac4 <_free_r+0x80>
 8009abe:	230c      	movs	r3, #12
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	e7d3      	b.n	8009a6c <_free_r+0x28>
 8009ac4:	6825      	ldr	r5, [r4, #0]
 8009ac6:	1961      	adds	r1, r4, r5
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	bf04      	itt	eq
 8009acc:	6819      	ldreq	r1, [r3, #0]
 8009ace:	685b      	ldreq	r3, [r3, #4]
 8009ad0:	6063      	str	r3, [r4, #4]
 8009ad2:	bf04      	itt	eq
 8009ad4:	1949      	addeq	r1, r1, r5
 8009ad6:	6021      	streq	r1, [r4, #0]
 8009ad8:	6054      	str	r4, [r2, #4]
 8009ada:	e7c7      	b.n	8009a6c <_free_r+0x28>
 8009adc:	b003      	add	sp, #12
 8009ade:	bd30      	pop	{r4, r5, pc}
 8009ae0:	20000224 	.word	0x20000224

08009ae4 <_malloc_r>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	1ccd      	adds	r5, r1, #3
 8009ae8:	f025 0503 	bic.w	r5, r5, #3
 8009aec:	3508      	adds	r5, #8
 8009aee:	2d0c      	cmp	r5, #12
 8009af0:	bf38      	it	cc
 8009af2:	250c      	movcc	r5, #12
 8009af4:	2d00      	cmp	r5, #0
 8009af6:	4606      	mov	r6, r0
 8009af8:	db01      	blt.n	8009afe <_malloc_r+0x1a>
 8009afa:	42a9      	cmp	r1, r5
 8009afc:	d903      	bls.n	8009b06 <_malloc_r+0x22>
 8009afe:	230c      	movs	r3, #12
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	2000      	movs	r0, #0
 8009b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b06:	f000 fa25 	bl	8009f54 <__malloc_lock>
 8009b0a:	4921      	ldr	r1, [pc, #132]	; (8009b90 <_malloc_r+0xac>)
 8009b0c:	680a      	ldr	r2, [r1, #0]
 8009b0e:	4614      	mov	r4, r2
 8009b10:	b99c      	cbnz	r4, 8009b3a <_malloc_r+0x56>
 8009b12:	4f20      	ldr	r7, [pc, #128]	; (8009b94 <_malloc_r+0xb0>)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	b923      	cbnz	r3, 8009b22 <_malloc_r+0x3e>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 f9a0 	bl	8009e60 <_sbrk_r>
 8009b20:	6038      	str	r0, [r7, #0]
 8009b22:	4629      	mov	r1, r5
 8009b24:	4630      	mov	r0, r6
 8009b26:	f000 f99b 	bl	8009e60 <_sbrk_r>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d123      	bne.n	8009b76 <_malloc_r+0x92>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	6033      	str	r3, [r6, #0]
 8009b32:	4630      	mov	r0, r6
 8009b34:	f000 fa14 	bl	8009f60 <__malloc_unlock>
 8009b38:	e7e3      	b.n	8009b02 <_malloc_r+0x1e>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	1b5b      	subs	r3, r3, r5
 8009b3e:	d417      	bmi.n	8009b70 <_malloc_r+0x8c>
 8009b40:	2b0b      	cmp	r3, #11
 8009b42:	d903      	bls.n	8009b4c <_malloc_r+0x68>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	441c      	add	r4, r3
 8009b48:	6025      	str	r5, [r4, #0]
 8009b4a:	e004      	b.n	8009b56 <_malloc_r+0x72>
 8009b4c:	6863      	ldr	r3, [r4, #4]
 8009b4e:	42a2      	cmp	r2, r4
 8009b50:	bf0c      	ite	eq
 8009b52:	600b      	streq	r3, [r1, #0]
 8009b54:	6053      	strne	r3, [r2, #4]
 8009b56:	4630      	mov	r0, r6
 8009b58:	f000 fa02 	bl	8009f60 <__malloc_unlock>
 8009b5c:	f104 000b 	add.w	r0, r4, #11
 8009b60:	1d23      	adds	r3, r4, #4
 8009b62:	f020 0007 	bic.w	r0, r0, #7
 8009b66:	1ac2      	subs	r2, r0, r3
 8009b68:	d0cc      	beq.n	8009b04 <_malloc_r+0x20>
 8009b6a:	1a1b      	subs	r3, r3, r0
 8009b6c:	50a3      	str	r3, [r4, r2]
 8009b6e:	e7c9      	b.n	8009b04 <_malloc_r+0x20>
 8009b70:	4622      	mov	r2, r4
 8009b72:	6864      	ldr	r4, [r4, #4]
 8009b74:	e7cc      	b.n	8009b10 <_malloc_r+0x2c>
 8009b76:	1cc4      	adds	r4, r0, #3
 8009b78:	f024 0403 	bic.w	r4, r4, #3
 8009b7c:	42a0      	cmp	r0, r4
 8009b7e:	d0e3      	beq.n	8009b48 <_malloc_r+0x64>
 8009b80:	1a21      	subs	r1, r4, r0
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 f96c 	bl	8009e60 <_sbrk_r>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d1dd      	bne.n	8009b48 <_malloc_r+0x64>
 8009b8c:	e7cf      	b.n	8009b2e <_malloc_r+0x4a>
 8009b8e:	bf00      	nop
 8009b90:	20000224 	.word	0x20000224
 8009b94:	20000228 	.word	0x20000228

08009b98 <__ssputs_r>:
 8009b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b9c:	688e      	ldr	r6, [r1, #8]
 8009b9e:	429e      	cmp	r6, r3
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	4690      	mov	r8, r2
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	d838      	bhi.n	8009c1c <__ssputs_r+0x84>
 8009baa:	898a      	ldrh	r2, [r1, #12]
 8009bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bb0:	d032      	beq.n	8009c18 <__ssputs_r+0x80>
 8009bb2:	6825      	ldr	r5, [r4, #0]
 8009bb4:	6909      	ldr	r1, [r1, #16]
 8009bb6:	eba5 0901 	sub.w	r9, r5, r1
 8009bba:	6965      	ldr	r5, [r4, #20]
 8009bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	444b      	add	r3, r9
 8009bc8:	106d      	asrs	r5, r5, #1
 8009bca:	429d      	cmp	r5, r3
 8009bcc:	bf38      	it	cc
 8009bce:	461d      	movcc	r5, r3
 8009bd0:	0553      	lsls	r3, r2, #21
 8009bd2:	d531      	bpl.n	8009c38 <__ssputs_r+0xa0>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	f7ff ff85 	bl	8009ae4 <_malloc_r>
 8009bda:	4606      	mov	r6, r0
 8009bdc:	b950      	cbnz	r0, 8009bf4 <__ssputs_r+0x5c>
 8009bde:	230c      	movs	r3, #12
 8009be0:	f8ca 3000 	str.w	r3, [sl]
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf4:	6921      	ldr	r1, [r4, #16]
 8009bf6:	464a      	mov	r2, r9
 8009bf8:	f7ff fa4a 	bl	8009090 <memcpy>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	6126      	str	r6, [r4, #16]
 8009c0a:	6165      	str	r5, [r4, #20]
 8009c0c:	444e      	add	r6, r9
 8009c0e:	eba5 0509 	sub.w	r5, r5, r9
 8009c12:	6026      	str	r6, [r4, #0]
 8009c14:	60a5      	str	r5, [r4, #8]
 8009c16:	463e      	mov	r6, r7
 8009c18:	42be      	cmp	r6, r7
 8009c1a:	d900      	bls.n	8009c1e <__ssputs_r+0x86>
 8009c1c:	463e      	mov	r6, r7
 8009c1e:	4632      	mov	r2, r6
 8009c20:	6820      	ldr	r0, [r4, #0]
 8009c22:	4641      	mov	r1, r8
 8009c24:	f000 f97c 	bl	8009f20 <memmove>
 8009c28:	68a3      	ldr	r3, [r4, #8]
 8009c2a:	6822      	ldr	r2, [r4, #0]
 8009c2c:	1b9b      	subs	r3, r3, r6
 8009c2e:	4432      	add	r2, r6
 8009c30:	60a3      	str	r3, [r4, #8]
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	2000      	movs	r0, #0
 8009c36:	e7db      	b.n	8009bf0 <__ssputs_r+0x58>
 8009c38:	462a      	mov	r2, r5
 8009c3a:	f000 f997 	bl	8009f6c <_realloc_r>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1e1      	bne.n	8009c08 <__ssputs_r+0x70>
 8009c44:	6921      	ldr	r1, [r4, #16]
 8009c46:	4650      	mov	r0, sl
 8009c48:	f7ff fefc 	bl	8009a44 <_free_r>
 8009c4c:	e7c7      	b.n	8009bde <__ssputs_r+0x46>
	...

08009c50 <_svfiprintf_r>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	4698      	mov	r8, r3
 8009c56:	898b      	ldrh	r3, [r1, #12]
 8009c58:	061b      	lsls	r3, r3, #24
 8009c5a:	b09d      	sub	sp, #116	; 0x74
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	4614      	mov	r4, r2
 8009c62:	d50e      	bpl.n	8009c82 <_svfiprintf_r+0x32>
 8009c64:	690b      	ldr	r3, [r1, #16]
 8009c66:	b963      	cbnz	r3, 8009c82 <_svfiprintf_r+0x32>
 8009c68:	2140      	movs	r1, #64	; 0x40
 8009c6a:	f7ff ff3b 	bl	8009ae4 <_malloc_r>
 8009c6e:	6028      	str	r0, [r5, #0]
 8009c70:	6128      	str	r0, [r5, #16]
 8009c72:	b920      	cbnz	r0, 8009c7e <_svfiprintf_r+0x2e>
 8009c74:	230c      	movs	r3, #12
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	e0d1      	b.n	8009e22 <_svfiprintf_r+0x1d2>
 8009c7e:	2340      	movs	r3, #64	; 0x40
 8009c80:	616b      	str	r3, [r5, #20]
 8009c82:	2300      	movs	r3, #0
 8009c84:	9309      	str	r3, [sp, #36]	; 0x24
 8009c86:	2320      	movs	r3, #32
 8009c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c90:	2330      	movs	r3, #48	; 0x30
 8009c92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e3c <_svfiprintf_r+0x1ec>
 8009c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c9a:	f04f 0901 	mov.w	r9, #1
 8009c9e:	4623      	mov	r3, r4
 8009ca0:	469a      	mov	sl, r3
 8009ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ca6:	b10a      	cbz	r2, 8009cac <_svfiprintf_r+0x5c>
 8009ca8:	2a25      	cmp	r2, #37	; 0x25
 8009caa:	d1f9      	bne.n	8009ca0 <_svfiprintf_r+0x50>
 8009cac:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb0:	d00b      	beq.n	8009cca <_svfiprintf_r+0x7a>
 8009cb2:	465b      	mov	r3, fp
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7ff ff6d 	bl	8009b98 <__ssputs_r>
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f000 80aa 	beq.w	8009e18 <_svfiprintf_r+0x1c8>
 8009cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc6:	445a      	add	r2, fp
 8009cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8009cca:	f89a 3000 	ldrb.w	r3, [sl]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 80a2 	beq.w	8009e18 <_svfiprintf_r+0x1c8>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cde:	f10a 0a01 	add.w	sl, sl, #1
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	9307      	str	r3, [sp, #28]
 8009ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cea:	931a      	str	r3, [sp, #104]	; 0x68
 8009cec:	4654      	mov	r4, sl
 8009cee:	2205      	movs	r2, #5
 8009cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf4:	4851      	ldr	r0, [pc, #324]	; (8009e3c <_svfiprintf_r+0x1ec>)
 8009cf6:	f7f6 fafb 	bl	80002f0 <memchr>
 8009cfa:	9a04      	ldr	r2, [sp, #16]
 8009cfc:	b9d8      	cbnz	r0, 8009d36 <_svfiprintf_r+0xe6>
 8009cfe:	06d0      	lsls	r0, r2, #27
 8009d00:	bf44      	itt	mi
 8009d02:	2320      	movmi	r3, #32
 8009d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d08:	0711      	lsls	r1, r2, #28
 8009d0a:	bf44      	itt	mi
 8009d0c:	232b      	movmi	r3, #43	; 0x2b
 8009d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d12:	f89a 3000 	ldrb.w	r3, [sl]
 8009d16:	2b2a      	cmp	r3, #42	; 0x2a
 8009d18:	d015      	beq.n	8009d46 <_svfiprintf_r+0xf6>
 8009d1a:	9a07      	ldr	r2, [sp, #28]
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	2000      	movs	r0, #0
 8009d20:	f04f 0c0a 	mov.w	ip, #10
 8009d24:	4621      	mov	r1, r4
 8009d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d2a:	3b30      	subs	r3, #48	; 0x30
 8009d2c:	2b09      	cmp	r3, #9
 8009d2e:	d94e      	bls.n	8009dce <_svfiprintf_r+0x17e>
 8009d30:	b1b0      	cbz	r0, 8009d60 <_svfiprintf_r+0x110>
 8009d32:	9207      	str	r2, [sp, #28]
 8009d34:	e014      	b.n	8009d60 <_svfiprintf_r+0x110>
 8009d36:	eba0 0308 	sub.w	r3, r0, r8
 8009d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	9304      	str	r3, [sp, #16]
 8009d42:	46a2      	mov	sl, r4
 8009d44:	e7d2      	b.n	8009cec <_svfiprintf_r+0x9c>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	1d19      	adds	r1, r3, #4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	9103      	str	r1, [sp, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bfbb      	ittet	lt
 8009d52:	425b      	neglt	r3, r3
 8009d54:	f042 0202 	orrlt.w	r2, r2, #2
 8009d58:	9307      	strge	r3, [sp, #28]
 8009d5a:	9307      	strlt	r3, [sp, #28]
 8009d5c:	bfb8      	it	lt
 8009d5e:	9204      	strlt	r2, [sp, #16]
 8009d60:	7823      	ldrb	r3, [r4, #0]
 8009d62:	2b2e      	cmp	r3, #46	; 0x2e
 8009d64:	d10c      	bne.n	8009d80 <_svfiprintf_r+0x130>
 8009d66:	7863      	ldrb	r3, [r4, #1]
 8009d68:	2b2a      	cmp	r3, #42	; 0x2a
 8009d6a:	d135      	bne.n	8009dd8 <_svfiprintf_r+0x188>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	1d1a      	adds	r2, r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	9203      	str	r2, [sp, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfb8      	it	lt
 8009d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d7c:	3402      	adds	r4, #2
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e4c <_svfiprintf_r+0x1fc>
 8009d84:	7821      	ldrb	r1, [r4, #0]
 8009d86:	2203      	movs	r2, #3
 8009d88:	4650      	mov	r0, sl
 8009d8a:	f7f6 fab1 	bl	80002f0 <memchr>
 8009d8e:	b140      	cbz	r0, 8009da2 <_svfiprintf_r+0x152>
 8009d90:	2340      	movs	r3, #64	; 0x40
 8009d92:	eba0 000a 	sub.w	r0, r0, sl
 8009d96:	fa03 f000 	lsl.w	r0, r3, r0
 8009d9a:	9b04      	ldr	r3, [sp, #16]
 8009d9c:	4303      	orrs	r3, r0
 8009d9e:	3401      	adds	r4, #1
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da6:	4826      	ldr	r0, [pc, #152]	; (8009e40 <_svfiprintf_r+0x1f0>)
 8009da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dac:	2206      	movs	r2, #6
 8009dae:	f7f6 fa9f 	bl	80002f0 <memchr>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d038      	beq.n	8009e28 <_svfiprintf_r+0x1d8>
 8009db6:	4b23      	ldr	r3, [pc, #140]	; (8009e44 <_svfiprintf_r+0x1f4>)
 8009db8:	bb1b      	cbnz	r3, 8009e02 <_svfiprintf_r+0x1b2>
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	3307      	adds	r3, #7
 8009dbe:	f023 0307 	bic.w	r3, r3, #7
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	9303      	str	r3, [sp, #12]
 8009dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc8:	4433      	add	r3, r6
 8009dca:	9309      	str	r3, [sp, #36]	; 0x24
 8009dcc:	e767      	b.n	8009c9e <_svfiprintf_r+0x4e>
 8009dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	e7a5      	b.n	8009d24 <_svfiprintf_r+0xd4>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	3401      	adds	r4, #1
 8009ddc:	9305      	str	r3, [sp, #20]
 8009dde:	4619      	mov	r1, r3
 8009de0:	f04f 0c0a 	mov.w	ip, #10
 8009de4:	4620      	mov	r0, r4
 8009de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dea:	3a30      	subs	r2, #48	; 0x30
 8009dec:	2a09      	cmp	r2, #9
 8009dee:	d903      	bls.n	8009df8 <_svfiprintf_r+0x1a8>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0c5      	beq.n	8009d80 <_svfiprintf_r+0x130>
 8009df4:	9105      	str	r1, [sp, #20]
 8009df6:	e7c3      	b.n	8009d80 <_svfiprintf_r+0x130>
 8009df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e7f0      	b.n	8009de4 <_svfiprintf_r+0x194>
 8009e02:	ab03      	add	r3, sp, #12
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	462a      	mov	r2, r5
 8009e08:	4b0f      	ldr	r3, [pc, #60]	; (8009e48 <_svfiprintf_r+0x1f8>)
 8009e0a:	a904      	add	r1, sp, #16
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	f7fc fb47 	bl	80064a0 <_printf_float>
 8009e12:	1c42      	adds	r2, r0, #1
 8009e14:	4606      	mov	r6, r0
 8009e16:	d1d6      	bne.n	8009dc6 <_svfiprintf_r+0x176>
 8009e18:	89ab      	ldrh	r3, [r5, #12]
 8009e1a:	065b      	lsls	r3, r3, #25
 8009e1c:	f53f af2c 	bmi.w	8009c78 <_svfiprintf_r+0x28>
 8009e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e22:	b01d      	add	sp, #116	; 0x74
 8009e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e28:	ab03      	add	r3, sp, #12
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	462a      	mov	r2, r5
 8009e2e:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <_svfiprintf_r+0x1f8>)
 8009e30:	a904      	add	r1, sp, #16
 8009e32:	4638      	mov	r0, r7
 8009e34:	f7fc fdc0 	bl	80069b8 <_printf_i>
 8009e38:	e7eb      	b.n	8009e12 <_svfiprintf_r+0x1c2>
 8009e3a:	bf00      	nop
 8009e3c:	0800ae7c 	.word	0x0800ae7c
 8009e40:	0800ae86 	.word	0x0800ae86
 8009e44:	080064a1 	.word	0x080064a1
 8009e48:	08009b99 	.word	0x08009b99
 8009e4c:	0800ae82 	.word	0x0800ae82

08009e50 <nan>:
 8009e50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e58 <nan+0x8>
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	00000000 	.word	0x00000000
 8009e5c:	7ff80000 	.word	0x7ff80000

08009e60 <_sbrk_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d06      	ldr	r5, [pc, #24]	; (8009e7c <_sbrk_r+0x1c>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	f7f7 ff6a 	bl	8001d44 <_sbrk>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_sbrk_r+0x1a>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_sbrk_r+0x1a>
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	200005d0 	.word	0x200005d0

08009e80 <strncmp>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	b16a      	cbz	r2, 8009ea0 <strncmp+0x20>
 8009e84:	3901      	subs	r1, #1
 8009e86:	1884      	adds	r4, r0, r2
 8009e88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d103      	bne.n	8009e9c <strncmp+0x1c>
 8009e94:	42a0      	cmp	r0, r4
 8009e96:	d001      	beq.n	8009e9c <strncmp+0x1c>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f5      	bne.n	8009e88 <strncmp+0x8>
 8009e9c:	1a98      	subs	r0, r3, r2
 8009e9e:	bd10      	pop	{r4, pc}
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	e7fc      	b.n	8009e9e <strncmp+0x1e>

08009ea4 <__ascii_wctomb>:
 8009ea4:	b149      	cbz	r1, 8009eba <__ascii_wctomb+0x16>
 8009ea6:	2aff      	cmp	r2, #255	; 0xff
 8009ea8:	bf85      	ittet	hi
 8009eaa:	238a      	movhi	r3, #138	; 0x8a
 8009eac:	6003      	strhi	r3, [r0, #0]
 8009eae:	700a      	strbls	r2, [r1, #0]
 8009eb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009eb4:	bf98      	it	ls
 8009eb6:	2001      	movls	r0, #1
 8009eb8:	4770      	bx	lr
 8009eba:	4608      	mov	r0, r1
 8009ebc:	4770      	bx	lr
	...

08009ec0 <__assert_func>:
 8009ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ec2:	4614      	mov	r4, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4b09      	ldr	r3, [pc, #36]	; (8009eec <__assert_func+0x2c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4605      	mov	r5, r0
 8009ecc:	68d8      	ldr	r0, [r3, #12]
 8009ece:	b14c      	cbz	r4, 8009ee4 <__assert_func+0x24>
 8009ed0:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <__assert_func+0x30>)
 8009ed2:	9100      	str	r1, [sp, #0]
 8009ed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ed8:	4906      	ldr	r1, [pc, #24]	; (8009ef4 <__assert_func+0x34>)
 8009eda:	462b      	mov	r3, r5
 8009edc:	f000 f80e 	bl	8009efc <fiprintf>
 8009ee0:	f000 fa84 	bl	800a3ec <abort>
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <__assert_func+0x38>)
 8009ee6:	461c      	mov	r4, r3
 8009ee8:	e7f3      	b.n	8009ed2 <__assert_func+0x12>
 8009eea:	bf00      	nop
 8009eec:	20000024 	.word	0x20000024
 8009ef0:	0800ae8d 	.word	0x0800ae8d
 8009ef4:	0800ae9a 	.word	0x0800ae9a
 8009ef8:	0800aec8 	.word	0x0800aec8

08009efc <fiprintf>:
 8009efc:	b40e      	push	{r1, r2, r3}
 8009efe:	b503      	push	{r0, r1, lr}
 8009f00:	4601      	mov	r1, r0
 8009f02:	ab03      	add	r3, sp, #12
 8009f04:	4805      	ldr	r0, [pc, #20]	; (8009f1c <fiprintf+0x20>)
 8009f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	f000 f87d 	bl	800a00c <_vfiprintf_r>
 8009f12:	b002      	add	sp, #8
 8009f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f18:	b003      	add	sp, #12
 8009f1a:	4770      	bx	lr
 8009f1c:	20000024 	.word	0x20000024

08009f20 <memmove>:
 8009f20:	4288      	cmp	r0, r1
 8009f22:	b510      	push	{r4, lr}
 8009f24:	eb01 0402 	add.w	r4, r1, r2
 8009f28:	d902      	bls.n	8009f30 <memmove+0x10>
 8009f2a:	4284      	cmp	r4, r0
 8009f2c:	4623      	mov	r3, r4
 8009f2e:	d807      	bhi.n	8009f40 <memmove+0x20>
 8009f30:	1e43      	subs	r3, r0, #1
 8009f32:	42a1      	cmp	r1, r4
 8009f34:	d008      	beq.n	8009f48 <memmove+0x28>
 8009f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f3e:	e7f8      	b.n	8009f32 <memmove+0x12>
 8009f40:	4402      	add	r2, r0
 8009f42:	4601      	mov	r1, r0
 8009f44:	428a      	cmp	r2, r1
 8009f46:	d100      	bne.n	8009f4a <memmove+0x2a>
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f52:	e7f7      	b.n	8009f44 <memmove+0x24>

08009f54 <__malloc_lock>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__malloc_lock+0x8>)
 8009f56:	f000 bc09 	b.w	800a76c <__retarget_lock_acquire_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	200005d8 	.word	0x200005d8

08009f60 <__malloc_unlock>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__malloc_unlock+0x8>)
 8009f62:	f000 bc04 	b.w	800a76e <__retarget_lock_release_recursive>
 8009f66:	bf00      	nop
 8009f68:	200005d8 	.word	0x200005d8

08009f6c <_realloc_r>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	4607      	mov	r7, r0
 8009f70:	4614      	mov	r4, r2
 8009f72:	460e      	mov	r6, r1
 8009f74:	b921      	cbnz	r1, 8009f80 <_realloc_r+0x14>
 8009f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	f7ff bdb2 	b.w	8009ae4 <_malloc_r>
 8009f80:	b922      	cbnz	r2, 8009f8c <_realloc_r+0x20>
 8009f82:	f7ff fd5f 	bl	8009a44 <_free_r>
 8009f86:	4625      	mov	r5, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8c:	f000 fc54 	bl	800a838 <_malloc_usable_size_r>
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d20f      	bcs.n	8009fb4 <_realloc_r+0x48>
 8009f94:	4621      	mov	r1, r4
 8009f96:	4638      	mov	r0, r7
 8009f98:	f7ff fda4 	bl	8009ae4 <_malloc_r>
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d0f2      	beq.n	8009f88 <_realloc_r+0x1c>
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	f7ff f873 	bl	8009090 <memcpy>
 8009faa:	4631      	mov	r1, r6
 8009fac:	4638      	mov	r0, r7
 8009fae:	f7ff fd49 	bl	8009a44 <_free_r>
 8009fb2:	e7e9      	b.n	8009f88 <_realloc_r+0x1c>
 8009fb4:	4635      	mov	r5, r6
 8009fb6:	e7e7      	b.n	8009f88 <_realloc_r+0x1c>

08009fb8 <__sfputc_r>:
 8009fb8:	6893      	ldr	r3, [r2, #8]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	b410      	push	{r4}
 8009fc0:	6093      	str	r3, [r2, #8]
 8009fc2:	da08      	bge.n	8009fd6 <__sfputc_r+0x1e>
 8009fc4:	6994      	ldr	r4, [r2, #24]
 8009fc6:	42a3      	cmp	r3, r4
 8009fc8:	db01      	blt.n	8009fce <__sfputc_r+0x16>
 8009fca:	290a      	cmp	r1, #10
 8009fcc:	d103      	bne.n	8009fd6 <__sfputc_r+0x1e>
 8009fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fd2:	f000 b94b 	b.w	800a26c <__swbuf_r>
 8009fd6:	6813      	ldr	r3, [r2, #0]
 8009fd8:	1c58      	adds	r0, r3, #1
 8009fda:	6010      	str	r0, [r2, #0]
 8009fdc:	7019      	strb	r1, [r3, #0]
 8009fde:	4608      	mov	r0, r1
 8009fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <__sfputs_r>:
 8009fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe8:	4606      	mov	r6, r0
 8009fea:	460f      	mov	r7, r1
 8009fec:	4614      	mov	r4, r2
 8009fee:	18d5      	adds	r5, r2, r3
 8009ff0:	42ac      	cmp	r4, r5
 8009ff2:	d101      	bne.n	8009ff8 <__sfputs_r+0x12>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e007      	b.n	800a008 <__sfputs_r+0x22>
 8009ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	4630      	mov	r0, r6
 800a000:	f7ff ffda 	bl	8009fb8 <__sfputc_r>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d1f3      	bne.n	8009ff0 <__sfputs_r+0xa>
 800a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a00c <_vfiprintf_r>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	460d      	mov	r5, r1
 800a012:	b09d      	sub	sp, #116	; 0x74
 800a014:	4614      	mov	r4, r2
 800a016:	4698      	mov	r8, r3
 800a018:	4606      	mov	r6, r0
 800a01a:	b118      	cbz	r0, 800a024 <_vfiprintf_r+0x18>
 800a01c:	6983      	ldr	r3, [r0, #24]
 800a01e:	b90b      	cbnz	r3, 800a024 <_vfiprintf_r+0x18>
 800a020:	f000 fb06 	bl	800a630 <__sinit>
 800a024:	4b89      	ldr	r3, [pc, #548]	; (800a24c <_vfiprintf_r+0x240>)
 800a026:	429d      	cmp	r5, r3
 800a028:	d11b      	bne.n	800a062 <_vfiprintf_r+0x56>
 800a02a:	6875      	ldr	r5, [r6, #4]
 800a02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a02e:	07d9      	lsls	r1, r3, #31
 800a030:	d405      	bmi.n	800a03e <_vfiprintf_r+0x32>
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	059a      	lsls	r2, r3, #22
 800a036:	d402      	bmi.n	800a03e <_vfiprintf_r+0x32>
 800a038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03a:	f000 fb97 	bl	800a76c <__retarget_lock_acquire_recursive>
 800a03e:	89ab      	ldrh	r3, [r5, #12]
 800a040:	071b      	lsls	r3, r3, #28
 800a042:	d501      	bpl.n	800a048 <_vfiprintf_r+0x3c>
 800a044:	692b      	ldr	r3, [r5, #16]
 800a046:	b9eb      	cbnz	r3, 800a084 <_vfiprintf_r+0x78>
 800a048:	4629      	mov	r1, r5
 800a04a:	4630      	mov	r0, r6
 800a04c:	f000 f960 	bl	800a310 <__swsetup_r>
 800a050:	b1c0      	cbz	r0, 800a084 <_vfiprintf_r+0x78>
 800a052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a054:	07dc      	lsls	r4, r3, #31
 800a056:	d50e      	bpl.n	800a076 <_vfiprintf_r+0x6a>
 800a058:	f04f 30ff 	mov.w	r0, #4294967295
 800a05c:	b01d      	add	sp, #116	; 0x74
 800a05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a062:	4b7b      	ldr	r3, [pc, #492]	; (800a250 <_vfiprintf_r+0x244>)
 800a064:	429d      	cmp	r5, r3
 800a066:	d101      	bne.n	800a06c <_vfiprintf_r+0x60>
 800a068:	68b5      	ldr	r5, [r6, #8]
 800a06a:	e7df      	b.n	800a02c <_vfiprintf_r+0x20>
 800a06c:	4b79      	ldr	r3, [pc, #484]	; (800a254 <_vfiprintf_r+0x248>)
 800a06e:	429d      	cmp	r5, r3
 800a070:	bf08      	it	eq
 800a072:	68f5      	ldreq	r5, [r6, #12]
 800a074:	e7da      	b.n	800a02c <_vfiprintf_r+0x20>
 800a076:	89ab      	ldrh	r3, [r5, #12]
 800a078:	0598      	lsls	r0, r3, #22
 800a07a:	d4ed      	bmi.n	800a058 <_vfiprintf_r+0x4c>
 800a07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a07e:	f000 fb76 	bl	800a76e <__retarget_lock_release_recursive>
 800a082:	e7e9      	b.n	800a058 <_vfiprintf_r+0x4c>
 800a084:	2300      	movs	r3, #0
 800a086:	9309      	str	r3, [sp, #36]	; 0x24
 800a088:	2320      	movs	r3, #32
 800a08a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a08e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a092:	2330      	movs	r3, #48	; 0x30
 800a094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a258 <_vfiprintf_r+0x24c>
 800a098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a09c:	f04f 0901 	mov.w	r9, #1
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	469a      	mov	sl, r3
 800a0a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a8:	b10a      	cbz	r2, 800a0ae <_vfiprintf_r+0xa2>
 800a0aa:	2a25      	cmp	r2, #37	; 0x25
 800a0ac:	d1f9      	bne.n	800a0a2 <_vfiprintf_r+0x96>
 800a0ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a0b2:	d00b      	beq.n	800a0cc <_vfiprintf_r+0xc0>
 800a0b4:	465b      	mov	r3, fp
 800a0b6:	4622      	mov	r2, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff ff93 	bl	8009fe6 <__sfputs_r>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	f000 80aa 	beq.w	800a21a <_vfiprintf_r+0x20e>
 800a0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c8:	445a      	add	r2, fp
 800a0ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 80a2 	beq.w	800a21a <_vfiprintf_r+0x20e>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0e0:	f10a 0a01 	add.w	sl, sl, #1
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	9307      	str	r3, [sp, #28]
 800a0e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ee:	4654      	mov	r4, sl
 800a0f0:	2205      	movs	r2, #5
 800a0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f6:	4858      	ldr	r0, [pc, #352]	; (800a258 <_vfiprintf_r+0x24c>)
 800a0f8:	f7f6 f8fa 	bl	80002f0 <memchr>
 800a0fc:	9a04      	ldr	r2, [sp, #16]
 800a0fe:	b9d8      	cbnz	r0, 800a138 <_vfiprintf_r+0x12c>
 800a100:	06d1      	lsls	r1, r2, #27
 800a102:	bf44      	itt	mi
 800a104:	2320      	movmi	r3, #32
 800a106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a10a:	0713      	lsls	r3, r2, #28
 800a10c:	bf44      	itt	mi
 800a10e:	232b      	movmi	r3, #43	; 0x2b
 800a110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a114:	f89a 3000 	ldrb.w	r3, [sl]
 800a118:	2b2a      	cmp	r3, #42	; 0x2a
 800a11a:	d015      	beq.n	800a148 <_vfiprintf_r+0x13c>
 800a11c:	9a07      	ldr	r2, [sp, #28]
 800a11e:	4654      	mov	r4, sl
 800a120:	2000      	movs	r0, #0
 800a122:	f04f 0c0a 	mov.w	ip, #10
 800a126:	4621      	mov	r1, r4
 800a128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a12c:	3b30      	subs	r3, #48	; 0x30
 800a12e:	2b09      	cmp	r3, #9
 800a130:	d94e      	bls.n	800a1d0 <_vfiprintf_r+0x1c4>
 800a132:	b1b0      	cbz	r0, 800a162 <_vfiprintf_r+0x156>
 800a134:	9207      	str	r2, [sp, #28]
 800a136:	e014      	b.n	800a162 <_vfiprintf_r+0x156>
 800a138:	eba0 0308 	sub.w	r3, r0, r8
 800a13c:	fa09 f303 	lsl.w	r3, r9, r3
 800a140:	4313      	orrs	r3, r2
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	46a2      	mov	sl, r4
 800a146:	e7d2      	b.n	800a0ee <_vfiprintf_r+0xe2>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	1d19      	adds	r1, r3, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	9103      	str	r1, [sp, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfbb      	ittet	lt
 800a154:	425b      	neglt	r3, r3
 800a156:	f042 0202 	orrlt.w	r2, r2, #2
 800a15a:	9307      	strge	r3, [sp, #28]
 800a15c:	9307      	strlt	r3, [sp, #28]
 800a15e:	bfb8      	it	lt
 800a160:	9204      	strlt	r2, [sp, #16]
 800a162:	7823      	ldrb	r3, [r4, #0]
 800a164:	2b2e      	cmp	r3, #46	; 0x2e
 800a166:	d10c      	bne.n	800a182 <_vfiprintf_r+0x176>
 800a168:	7863      	ldrb	r3, [r4, #1]
 800a16a:	2b2a      	cmp	r3, #42	; 0x2a
 800a16c:	d135      	bne.n	800a1da <_vfiprintf_r+0x1ce>
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	1d1a      	adds	r2, r3, #4
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	9203      	str	r2, [sp, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	bfb8      	it	lt
 800a17a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a17e:	3402      	adds	r4, #2
 800a180:	9305      	str	r3, [sp, #20]
 800a182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a268 <_vfiprintf_r+0x25c>
 800a186:	7821      	ldrb	r1, [r4, #0]
 800a188:	2203      	movs	r2, #3
 800a18a:	4650      	mov	r0, sl
 800a18c:	f7f6 f8b0 	bl	80002f0 <memchr>
 800a190:	b140      	cbz	r0, 800a1a4 <_vfiprintf_r+0x198>
 800a192:	2340      	movs	r3, #64	; 0x40
 800a194:	eba0 000a 	sub.w	r0, r0, sl
 800a198:	fa03 f000 	lsl.w	r0, r3, r0
 800a19c:	9b04      	ldr	r3, [sp, #16]
 800a19e:	4303      	orrs	r3, r0
 800a1a0:	3401      	adds	r4, #1
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a8:	482c      	ldr	r0, [pc, #176]	; (800a25c <_vfiprintf_r+0x250>)
 800a1aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1ae:	2206      	movs	r2, #6
 800a1b0:	f7f6 f89e 	bl	80002f0 <memchr>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d03f      	beq.n	800a238 <_vfiprintf_r+0x22c>
 800a1b8:	4b29      	ldr	r3, [pc, #164]	; (800a260 <_vfiprintf_r+0x254>)
 800a1ba:	bb1b      	cbnz	r3, 800a204 <_vfiprintf_r+0x1f8>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	3307      	adds	r3, #7
 800a1c0:	f023 0307 	bic.w	r3, r3, #7
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ca:	443b      	add	r3, r7
 800a1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ce:	e767      	b.n	800a0a0 <_vfiprintf_r+0x94>
 800a1d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	e7a5      	b.n	800a126 <_vfiprintf_r+0x11a>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	3401      	adds	r4, #1
 800a1de:	9305      	str	r3, [sp, #20]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	f04f 0c0a 	mov.w	ip, #10
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ec:	3a30      	subs	r2, #48	; 0x30
 800a1ee:	2a09      	cmp	r2, #9
 800a1f0:	d903      	bls.n	800a1fa <_vfiprintf_r+0x1ee>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0c5      	beq.n	800a182 <_vfiprintf_r+0x176>
 800a1f6:	9105      	str	r1, [sp, #20]
 800a1f8:	e7c3      	b.n	800a182 <_vfiprintf_r+0x176>
 800a1fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1fe:	4604      	mov	r4, r0
 800a200:	2301      	movs	r3, #1
 800a202:	e7f0      	b.n	800a1e6 <_vfiprintf_r+0x1da>
 800a204:	ab03      	add	r3, sp, #12
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	462a      	mov	r2, r5
 800a20a:	4b16      	ldr	r3, [pc, #88]	; (800a264 <_vfiprintf_r+0x258>)
 800a20c:	a904      	add	r1, sp, #16
 800a20e:	4630      	mov	r0, r6
 800a210:	f7fc f946 	bl	80064a0 <_printf_float>
 800a214:	4607      	mov	r7, r0
 800a216:	1c78      	adds	r0, r7, #1
 800a218:	d1d6      	bne.n	800a1c8 <_vfiprintf_r+0x1bc>
 800a21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a21c:	07d9      	lsls	r1, r3, #31
 800a21e:	d405      	bmi.n	800a22c <_vfiprintf_r+0x220>
 800a220:	89ab      	ldrh	r3, [r5, #12]
 800a222:	059a      	lsls	r2, r3, #22
 800a224:	d402      	bmi.n	800a22c <_vfiprintf_r+0x220>
 800a226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a228:	f000 faa1 	bl	800a76e <__retarget_lock_release_recursive>
 800a22c:	89ab      	ldrh	r3, [r5, #12]
 800a22e:	065b      	lsls	r3, r3, #25
 800a230:	f53f af12 	bmi.w	800a058 <_vfiprintf_r+0x4c>
 800a234:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a236:	e711      	b.n	800a05c <_vfiprintf_r+0x50>
 800a238:	ab03      	add	r3, sp, #12
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	462a      	mov	r2, r5
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <_vfiprintf_r+0x258>)
 800a240:	a904      	add	r1, sp, #16
 800a242:	4630      	mov	r0, r6
 800a244:	f7fc fbb8 	bl	80069b8 <_printf_i>
 800a248:	e7e4      	b.n	800a214 <_vfiprintf_r+0x208>
 800a24a:	bf00      	nop
 800a24c:	0800aeec 	.word	0x0800aeec
 800a250:	0800af0c 	.word	0x0800af0c
 800a254:	0800aecc 	.word	0x0800aecc
 800a258:	0800ae7c 	.word	0x0800ae7c
 800a25c:	0800ae86 	.word	0x0800ae86
 800a260:	080064a1 	.word	0x080064a1
 800a264:	08009fe7 	.word	0x08009fe7
 800a268:	0800ae82 	.word	0x0800ae82

0800a26c <__swbuf_r>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	460e      	mov	r6, r1
 800a270:	4614      	mov	r4, r2
 800a272:	4605      	mov	r5, r0
 800a274:	b118      	cbz	r0, 800a27e <__swbuf_r+0x12>
 800a276:	6983      	ldr	r3, [r0, #24]
 800a278:	b90b      	cbnz	r3, 800a27e <__swbuf_r+0x12>
 800a27a:	f000 f9d9 	bl	800a630 <__sinit>
 800a27e:	4b21      	ldr	r3, [pc, #132]	; (800a304 <__swbuf_r+0x98>)
 800a280:	429c      	cmp	r4, r3
 800a282:	d12b      	bne.n	800a2dc <__swbuf_r+0x70>
 800a284:	686c      	ldr	r4, [r5, #4]
 800a286:	69a3      	ldr	r3, [r4, #24]
 800a288:	60a3      	str	r3, [r4, #8]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	071a      	lsls	r2, r3, #28
 800a28e:	d52f      	bpl.n	800a2f0 <__swbuf_r+0x84>
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	b36b      	cbz	r3, 800a2f0 <__swbuf_r+0x84>
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	6820      	ldr	r0, [r4, #0]
 800a298:	1ac0      	subs	r0, r0, r3
 800a29a:	6963      	ldr	r3, [r4, #20]
 800a29c:	b2f6      	uxtb	r6, r6
 800a29e:	4283      	cmp	r3, r0
 800a2a0:	4637      	mov	r7, r6
 800a2a2:	dc04      	bgt.n	800a2ae <__swbuf_r+0x42>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f000 f92e 	bl	800a508 <_fflush_r>
 800a2ac:	bb30      	cbnz	r0, 800a2fc <__swbuf_r+0x90>
 800a2ae:	68a3      	ldr	r3, [r4, #8]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	60a3      	str	r3, [r4, #8]
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	6022      	str	r2, [r4, #0]
 800a2ba:	701e      	strb	r6, [r3, #0]
 800a2bc:	6963      	ldr	r3, [r4, #20]
 800a2be:	3001      	adds	r0, #1
 800a2c0:	4283      	cmp	r3, r0
 800a2c2:	d004      	beq.n	800a2ce <__swbuf_r+0x62>
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	07db      	lsls	r3, r3, #31
 800a2c8:	d506      	bpl.n	800a2d8 <__swbuf_r+0x6c>
 800a2ca:	2e0a      	cmp	r6, #10
 800a2cc:	d104      	bne.n	800a2d8 <__swbuf_r+0x6c>
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f000 f919 	bl	800a508 <_fflush_r>
 800a2d6:	b988      	cbnz	r0, 800a2fc <__swbuf_r+0x90>
 800a2d8:	4638      	mov	r0, r7
 800a2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <__swbuf_r+0x9c>)
 800a2de:	429c      	cmp	r4, r3
 800a2e0:	d101      	bne.n	800a2e6 <__swbuf_r+0x7a>
 800a2e2:	68ac      	ldr	r4, [r5, #8]
 800a2e4:	e7cf      	b.n	800a286 <__swbuf_r+0x1a>
 800a2e6:	4b09      	ldr	r3, [pc, #36]	; (800a30c <__swbuf_r+0xa0>)
 800a2e8:	429c      	cmp	r4, r3
 800a2ea:	bf08      	it	eq
 800a2ec:	68ec      	ldreq	r4, [r5, #12]
 800a2ee:	e7ca      	b.n	800a286 <__swbuf_r+0x1a>
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f000 f80c 	bl	800a310 <__swsetup_r>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d0cb      	beq.n	800a294 <__swbuf_r+0x28>
 800a2fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a300:	e7ea      	b.n	800a2d8 <__swbuf_r+0x6c>
 800a302:	bf00      	nop
 800a304:	0800aeec 	.word	0x0800aeec
 800a308:	0800af0c 	.word	0x0800af0c
 800a30c:	0800aecc 	.word	0x0800aecc

0800a310 <__swsetup_r>:
 800a310:	4b32      	ldr	r3, [pc, #200]	; (800a3dc <__swsetup_r+0xcc>)
 800a312:	b570      	push	{r4, r5, r6, lr}
 800a314:	681d      	ldr	r5, [r3, #0]
 800a316:	4606      	mov	r6, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	b125      	cbz	r5, 800a326 <__swsetup_r+0x16>
 800a31c:	69ab      	ldr	r3, [r5, #24]
 800a31e:	b913      	cbnz	r3, 800a326 <__swsetup_r+0x16>
 800a320:	4628      	mov	r0, r5
 800a322:	f000 f985 	bl	800a630 <__sinit>
 800a326:	4b2e      	ldr	r3, [pc, #184]	; (800a3e0 <__swsetup_r+0xd0>)
 800a328:	429c      	cmp	r4, r3
 800a32a:	d10f      	bne.n	800a34c <__swsetup_r+0x3c>
 800a32c:	686c      	ldr	r4, [r5, #4]
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a334:	0719      	lsls	r1, r3, #28
 800a336:	d42c      	bmi.n	800a392 <__swsetup_r+0x82>
 800a338:	06dd      	lsls	r5, r3, #27
 800a33a:	d411      	bmi.n	800a360 <__swsetup_r+0x50>
 800a33c:	2309      	movs	r3, #9
 800a33e:	6033      	str	r3, [r6, #0]
 800a340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	f04f 30ff 	mov.w	r0, #4294967295
 800a34a:	e03e      	b.n	800a3ca <__swsetup_r+0xba>
 800a34c:	4b25      	ldr	r3, [pc, #148]	; (800a3e4 <__swsetup_r+0xd4>)
 800a34e:	429c      	cmp	r4, r3
 800a350:	d101      	bne.n	800a356 <__swsetup_r+0x46>
 800a352:	68ac      	ldr	r4, [r5, #8]
 800a354:	e7eb      	b.n	800a32e <__swsetup_r+0x1e>
 800a356:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <__swsetup_r+0xd8>)
 800a358:	429c      	cmp	r4, r3
 800a35a:	bf08      	it	eq
 800a35c:	68ec      	ldreq	r4, [r5, #12]
 800a35e:	e7e6      	b.n	800a32e <__swsetup_r+0x1e>
 800a360:	0758      	lsls	r0, r3, #29
 800a362:	d512      	bpl.n	800a38a <__swsetup_r+0x7a>
 800a364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a366:	b141      	cbz	r1, 800a37a <__swsetup_r+0x6a>
 800a368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a36c:	4299      	cmp	r1, r3
 800a36e:	d002      	beq.n	800a376 <__swsetup_r+0x66>
 800a370:	4630      	mov	r0, r6
 800a372:	f7ff fb67 	bl	8009a44 <_free_r>
 800a376:	2300      	movs	r3, #0
 800a378:	6363      	str	r3, [r4, #52]	; 0x34
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	2300      	movs	r3, #0
 800a384:	6063      	str	r3, [r4, #4]
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	f043 0308 	orr.w	r3, r3, #8
 800a390:	81a3      	strh	r3, [r4, #12]
 800a392:	6923      	ldr	r3, [r4, #16]
 800a394:	b94b      	cbnz	r3, 800a3aa <__swsetup_r+0x9a>
 800a396:	89a3      	ldrh	r3, [r4, #12]
 800a398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a0:	d003      	beq.n	800a3aa <__swsetup_r+0x9a>
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 fa07 	bl	800a7b8 <__smakebuf_r>
 800a3aa:	89a0      	ldrh	r0, [r4, #12]
 800a3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b0:	f010 0301 	ands.w	r3, r0, #1
 800a3b4:	d00a      	beq.n	800a3cc <__swsetup_r+0xbc>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60a3      	str	r3, [r4, #8]
 800a3ba:	6963      	ldr	r3, [r4, #20]
 800a3bc:	425b      	negs	r3, r3
 800a3be:	61a3      	str	r3, [r4, #24]
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	b943      	cbnz	r3, 800a3d6 <__swsetup_r+0xc6>
 800a3c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3c8:	d1ba      	bne.n	800a340 <__swsetup_r+0x30>
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	0781      	lsls	r1, r0, #30
 800a3ce:	bf58      	it	pl
 800a3d0:	6963      	ldrpl	r3, [r4, #20]
 800a3d2:	60a3      	str	r3, [r4, #8]
 800a3d4:	e7f4      	b.n	800a3c0 <__swsetup_r+0xb0>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e7f7      	b.n	800a3ca <__swsetup_r+0xba>
 800a3da:	bf00      	nop
 800a3dc:	20000024 	.word	0x20000024
 800a3e0:	0800aeec 	.word	0x0800aeec
 800a3e4:	0800af0c 	.word	0x0800af0c
 800a3e8:	0800aecc 	.word	0x0800aecc

0800a3ec <abort>:
 800a3ec:	b508      	push	{r3, lr}
 800a3ee:	2006      	movs	r0, #6
 800a3f0:	f000 fa52 	bl	800a898 <raise>
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	f7f7 fc75 	bl	8001ce4 <_exit>
	...

0800a3fc <__sflush_r>:
 800a3fc:	898a      	ldrh	r2, [r1, #12]
 800a3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a402:	4605      	mov	r5, r0
 800a404:	0710      	lsls	r0, r2, #28
 800a406:	460c      	mov	r4, r1
 800a408:	d458      	bmi.n	800a4bc <__sflush_r+0xc0>
 800a40a:	684b      	ldr	r3, [r1, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dc05      	bgt.n	800a41c <__sflush_r+0x20>
 800a410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a412:	2b00      	cmp	r3, #0
 800a414:	dc02      	bgt.n	800a41c <__sflush_r+0x20>
 800a416:	2000      	movs	r0, #0
 800a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d0f9      	beq.n	800a416 <__sflush_r+0x1a>
 800a422:	2300      	movs	r3, #0
 800a424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a428:	682f      	ldr	r7, [r5, #0]
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	d032      	beq.n	800a494 <__sflush_r+0x98>
 800a42e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	075a      	lsls	r2, r3, #29
 800a434:	d505      	bpl.n	800a442 <__sflush_r+0x46>
 800a436:	6863      	ldr	r3, [r4, #4]
 800a438:	1ac0      	subs	r0, r0, r3
 800a43a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a43c:	b10b      	cbz	r3, 800a442 <__sflush_r+0x46>
 800a43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a440:	1ac0      	subs	r0, r0, r3
 800a442:	2300      	movs	r3, #0
 800a444:	4602      	mov	r2, r0
 800a446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a448:	6a21      	ldr	r1, [r4, #32]
 800a44a:	4628      	mov	r0, r5
 800a44c:	47b0      	blx	r6
 800a44e:	1c43      	adds	r3, r0, #1
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	d106      	bne.n	800a462 <__sflush_r+0x66>
 800a454:	6829      	ldr	r1, [r5, #0]
 800a456:	291d      	cmp	r1, #29
 800a458:	d82c      	bhi.n	800a4b4 <__sflush_r+0xb8>
 800a45a:	4a2a      	ldr	r2, [pc, #168]	; (800a504 <__sflush_r+0x108>)
 800a45c:	40ca      	lsrs	r2, r1
 800a45e:	07d6      	lsls	r6, r2, #31
 800a460:	d528      	bpl.n	800a4b4 <__sflush_r+0xb8>
 800a462:	2200      	movs	r2, #0
 800a464:	6062      	str	r2, [r4, #4]
 800a466:	04d9      	lsls	r1, r3, #19
 800a468:	6922      	ldr	r2, [r4, #16]
 800a46a:	6022      	str	r2, [r4, #0]
 800a46c:	d504      	bpl.n	800a478 <__sflush_r+0x7c>
 800a46e:	1c42      	adds	r2, r0, #1
 800a470:	d101      	bne.n	800a476 <__sflush_r+0x7a>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	b903      	cbnz	r3, 800a478 <__sflush_r+0x7c>
 800a476:	6560      	str	r0, [r4, #84]	; 0x54
 800a478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a47a:	602f      	str	r7, [r5, #0]
 800a47c:	2900      	cmp	r1, #0
 800a47e:	d0ca      	beq.n	800a416 <__sflush_r+0x1a>
 800a480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a484:	4299      	cmp	r1, r3
 800a486:	d002      	beq.n	800a48e <__sflush_r+0x92>
 800a488:	4628      	mov	r0, r5
 800a48a:	f7ff fadb 	bl	8009a44 <_free_r>
 800a48e:	2000      	movs	r0, #0
 800a490:	6360      	str	r0, [r4, #52]	; 0x34
 800a492:	e7c1      	b.n	800a418 <__sflush_r+0x1c>
 800a494:	6a21      	ldr	r1, [r4, #32]
 800a496:	2301      	movs	r3, #1
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	1c41      	adds	r1, r0, #1
 800a49e:	d1c7      	bne.n	800a430 <__sflush_r+0x34>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c4      	beq.n	800a430 <__sflush_r+0x34>
 800a4a6:	2b1d      	cmp	r3, #29
 800a4a8:	d001      	beq.n	800a4ae <__sflush_r+0xb2>
 800a4aa:	2b16      	cmp	r3, #22
 800a4ac:	d101      	bne.n	800a4b2 <__sflush_r+0xb6>
 800a4ae:	602f      	str	r7, [r5, #0]
 800a4b0:	e7b1      	b.n	800a416 <__sflush_r+0x1a>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	e7ad      	b.n	800a418 <__sflush_r+0x1c>
 800a4bc:	690f      	ldr	r7, [r1, #16]
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	d0a9      	beq.n	800a416 <__sflush_r+0x1a>
 800a4c2:	0793      	lsls	r3, r2, #30
 800a4c4:	680e      	ldr	r6, [r1, #0]
 800a4c6:	bf08      	it	eq
 800a4c8:	694b      	ldreq	r3, [r1, #20]
 800a4ca:	600f      	str	r7, [r1, #0]
 800a4cc:	bf18      	it	ne
 800a4ce:	2300      	movne	r3, #0
 800a4d0:	eba6 0807 	sub.w	r8, r6, r7
 800a4d4:	608b      	str	r3, [r1, #8]
 800a4d6:	f1b8 0f00 	cmp.w	r8, #0
 800a4da:	dd9c      	ble.n	800a416 <__sflush_r+0x1a>
 800a4dc:	6a21      	ldr	r1, [r4, #32]
 800a4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4e0:	4643      	mov	r3, r8
 800a4e2:	463a      	mov	r2, r7
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b0      	blx	r6
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	dc06      	bgt.n	800a4fa <__sflush_r+0xfe>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f2:	81a3      	strh	r3, [r4, #12]
 800a4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f8:	e78e      	b.n	800a418 <__sflush_r+0x1c>
 800a4fa:	4407      	add	r7, r0
 800a4fc:	eba8 0800 	sub.w	r8, r8, r0
 800a500:	e7e9      	b.n	800a4d6 <__sflush_r+0xda>
 800a502:	bf00      	nop
 800a504:	20400001 	.word	0x20400001

0800a508 <_fflush_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	690b      	ldr	r3, [r1, #16]
 800a50c:	4605      	mov	r5, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	b913      	cbnz	r3, 800a518 <_fflush_r+0x10>
 800a512:	2500      	movs	r5, #0
 800a514:	4628      	mov	r0, r5
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	b118      	cbz	r0, 800a522 <_fflush_r+0x1a>
 800a51a:	6983      	ldr	r3, [r0, #24]
 800a51c:	b90b      	cbnz	r3, 800a522 <_fflush_r+0x1a>
 800a51e:	f000 f887 	bl	800a630 <__sinit>
 800a522:	4b14      	ldr	r3, [pc, #80]	; (800a574 <_fflush_r+0x6c>)
 800a524:	429c      	cmp	r4, r3
 800a526:	d11b      	bne.n	800a560 <_fflush_r+0x58>
 800a528:	686c      	ldr	r4, [r5, #4]
 800a52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0ef      	beq.n	800a512 <_fflush_r+0xa>
 800a532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a534:	07d0      	lsls	r0, r2, #31
 800a536:	d404      	bmi.n	800a542 <_fflush_r+0x3a>
 800a538:	0599      	lsls	r1, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_fflush_r+0x3a>
 800a53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53e:	f000 f915 	bl	800a76c <__retarget_lock_acquire_recursive>
 800a542:	4628      	mov	r0, r5
 800a544:	4621      	mov	r1, r4
 800a546:	f7ff ff59 	bl	800a3fc <__sflush_r>
 800a54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a54c:	07da      	lsls	r2, r3, #31
 800a54e:	4605      	mov	r5, r0
 800a550:	d4e0      	bmi.n	800a514 <_fflush_r+0xc>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	059b      	lsls	r3, r3, #22
 800a556:	d4dd      	bmi.n	800a514 <_fflush_r+0xc>
 800a558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55a:	f000 f908 	bl	800a76e <__retarget_lock_release_recursive>
 800a55e:	e7d9      	b.n	800a514 <_fflush_r+0xc>
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <_fflush_r+0x70>)
 800a562:	429c      	cmp	r4, r3
 800a564:	d101      	bne.n	800a56a <_fflush_r+0x62>
 800a566:	68ac      	ldr	r4, [r5, #8]
 800a568:	e7df      	b.n	800a52a <_fflush_r+0x22>
 800a56a:	4b04      	ldr	r3, [pc, #16]	; (800a57c <_fflush_r+0x74>)
 800a56c:	429c      	cmp	r4, r3
 800a56e:	bf08      	it	eq
 800a570:	68ec      	ldreq	r4, [r5, #12]
 800a572:	e7da      	b.n	800a52a <_fflush_r+0x22>
 800a574:	0800aeec 	.word	0x0800aeec
 800a578:	0800af0c 	.word	0x0800af0c
 800a57c:	0800aecc 	.word	0x0800aecc

0800a580 <std>:
 800a580:	2300      	movs	r3, #0
 800a582:	b510      	push	{r4, lr}
 800a584:	4604      	mov	r4, r0
 800a586:	e9c0 3300 	strd	r3, r3, [r0]
 800a58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a58e:	6083      	str	r3, [r0, #8]
 800a590:	8181      	strh	r1, [r0, #12]
 800a592:	6643      	str	r3, [r0, #100]	; 0x64
 800a594:	81c2      	strh	r2, [r0, #14]
 800a596:	6183      	str	r3, [r0, #24]
 800a598:	4619      	mov	r1, r3
 800a59a:	2208      	movs	r2, #8
 800a59c:	305c      	adds	r0, #92	; 0x5c
 800a59e:	f7fb fee7 	bl	8006370 <memset>
 800a5a2:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <std+0x38>)
 800a5a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <std+0x3c>)
 800a5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <std+0x40>)
 800a5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <std+0x44>)
 800a5b0:	6224      	str	r4, [r4, #32]
 800a5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a5b4:	bd10      	pop	{r4, pc}
 800a5b6:	bf00      	nop
 800a5b8:	0800a8d1 	.word	0x0800a8d1
 800a5bc:	0800a8f3 	.word	0x0800a8f3
 800a5c0:	0800a92b 	.word	0x0800a92b
 800a5c4:	0800a94f 	.word	0x0800a94f

0800a5c8 <_cleanup_r>:
 800a5c8:	4901      	ldr	r1, [pc, #4]	; (800a5d0 <_cleanup_r+0x8>)
 800a5ca:	f000 b8af 	b.w	800a72c <_fwalk_reent>
 800a5ce:	bf00      	nop
 800a5d0:	0800a509 	.word	0x0800a509

0800a5d4 <__sfmoreglue>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	1e4a      	subs	r2, r1, #1
 800a5d8:	2568      	movs	r5, #104	; 0x68
 800a5da:	4355      	muls	r5, r2
 800a5dc:	460e      	mov	r6, r1
 800a5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5e2:	f7ff fa7f 	bl	8009ae4 <_malloc_r>
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	b140      	cbz	r0, 800a5fc <__sfmoreglue+0x28>
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800a5f0:	300c      	adds	r0, #12
 800a5f2:	60a0      	str	r0, [r4, #8]
 800a5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5f8:	f7fb feba 	bl	8006370 <memset>
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}

0800a600 <__sfp_lock_acquire>:
 800a600:	4801      	ldr	r0, [pc, #4]	; (800a608 <__sfp_lock_acquire+0x8>)
 800a602:	f000 b8b3 	b.w	800a76c <__retarget_lock_acquire_recursive>
 800a606:	bf00      	nop
 800a608:	200005dc 	.word	0x200005dc

0800a60c <__sfp_lock_release>:
 800a60c:	4801      	ldr	r0, [pc, #4]	; (800a614 <__sfp_lock_release+0x8>)
 800a60e:	f000 b8ae 	b.w	800a76e <__retarget_lock_release_recursive>
 800a612:	bf00      	nop
 800a614:	200005dc 	.word	0x200005dc

0800a618 <__sinit_lock_acquire>:
 800a618:	4801      	ldr	r0, [pc, #4]	; (800a620 <__sinit_lock_acquire+0x8>)
 800a61a:	f000 b8a7 	b.w	800a76c <__retarget_lock_acquire_recursive>
 800a61e:	bf00      	nop
 800a620:	200005d7 	.word	0x200005d7

0800a624 <__sinit_lock_release>:
 800a624:	4801      	ldr	r0, [pc, #4]	; (800a62c <__sinit_lock_release+0x8>)
 800a626:	f000 b8a2 	b.w	800a76e <__retarget_lock_release_recursive>
 800a62a:	bf00      	nop
 800a62c:	200005d7 	.word	0x200005d7

0800a630 <__sinit>:
 800a630:	b510      	push	{r4, lr}
 800a632:	4604      	mov	r4, r0
 800a634:	f7ff fff0 	bl	800a618 <__sinit_lock_acquire>
 800a638:	69a3      	ldr	r3, [r4, #24]
 800a63a:	b11b      	cbz	r3, 800a644 <__sinit+0x14>
 800a63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a640:	f7ff bff0 	b.w	800a624 <__sinit_lock_release>
 800a644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a648:	6523      	str	r3, [r4, #80]	; 0x50
 800a64a:	4b13      	ldr	r3, [pc, #76]	; (800a698 <__sinit+0x68>)
 800a64c:	4a13      	ldr	r2, [pc, #76]	; (800a69c <__sinit+0x6c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	62a2      	str	r2, [r4, #40]	; 0x28
 800a652:	42a3      	cmp	r3, r4
 800a654:	bf04      	itt	eq
 800a656:	2301      	moveq	r3, #1
 800a658:	61a3      	streq	r3, [r4, #24]
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 f820 	bl	800a6a0 <__sfp>
 800a660:	6060      	str	r0, [r4, #4]
 800a662:	4620      	mov	r0, r4
 800a664:	f000 f81c 	bl	800a6a0 <__sfp>
 800a668:	60a0      	str	r0, [r4, #8]
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 f818 	bl	800a6a0 <__sfp>
 800a670:	2200      	movs	r2, #0
 800a672:	60e0      	str	r0, [r4, #12]
 800a674:	2104      	movs	r1, #4
 800a676:	6860      	ldr	r0, [r4, #4]
 800a678:	f7ff ff82 	bl	800a580 <std>
 800a67c:	68a0      	ldr	r0, [r4, #8]
 800a67e:	2201      	movs	r2, #1
 800a680:	2109      	movs	r1, #9
 800a682:	f7ff ff7d 	bl	800a580 <std>
 800a686:	68e0      	ldr	r0, [r4, #12]
 800a688:	2202      	movs	r2, #2
 800a68a:	2112      	movs	r1, #18
 800a68c:	f7ff ff78 	bl	800a580 <std>
 800a690:	2301      	movs	r3, #1
 800a692:	61a3      	str	r3, [r4, #24]
 800a694:	e7d2      	b.n	800a63c <__sinit+0xc>
 800a696:	bf00      	nop
 800a698:	0800aa78 	.word	0x0800aa78
 800a69c:	0800a5c9 	.word	0x0800a5c9

0800a6a0 <__sfp>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	f7ff ffac 	bl	800a600 <__sfp_lock_acquire>
 800a6a8:	4b1e      	ldr	r3, [pc, #120]	; (800a724 <__sfp+0x84>)
 800a6aa:	681e      	ldr	r6, [r3, #0]
 800a6ac:	69b3      	ldr	r3, [r6, #24]
 800a6ae:	b913      	cbnz	r3, 800a6b6 <__sfp+0x16>
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff ffbd 	bl	800a630 <__sinit>
 800a6b6:	3648      	adds	r6, #72	; 0x48
 800a6b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	d503      	bpl.n	800a6c8 <__sfp+0x28>
 800a6c0:	6833      	ldr	r3, [r6, #0]
 800a6c2:	b30b      	cbz	r3, 800a708 <__sfp+0x68>
 800a6c4:	6836      	ldr	r6, [r6, #0]
 800a6c6:	e7f7      	b.n	800a6b8 <__sfp+0x18>
 800a6c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6cc:	b9d5      	cbnz	r5, 800a704 <__sfp+0x64>
 800a6ce:	4b16      	ldr	r3, [pc, #88]	; (800a728 <__sfp+0x88>)
 800a6d0:	60e3      	str	r3, [r4, #12]
 800a6d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6d6:	6665      	str	r5, [r4, #100]	; 0x64
 800a6d8:	f000 f847 	bl	800a76a <__retarget_lock_init_recursive>
 800a6dc:	f7ff ff96 	bl	800a60c <__sfp_lock_release>
 800a6e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6e8:	6025      	str	r5, [r4, #0]
 800a6ea:	61a5      	str	r5, [r4, #24]
 800a6ec:	2208      	movs	r2, #8
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6f4:	f7fb fe3c 	bl	8006370 <memset>
 800a6f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a700:	4620      	mov	r0, r4
 800a702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a704:	3468      	adds	r4, #104	; 0x68
 800a706:	e7d9      	b.n	800a6bc <__sfp+0x1c>
 800a708:	2104      	movs	r1, #4
 800a70a:	4638      	mov	r0, r7
 800a70c:	f7ff ff62 	bl	800a5d4 <__sfmoreglue>
 800a710:	4604      	mov	r4, r0
 800a712:	6030      	str	r0, [r6, #0]
 800a714:	2800      	cmp	r0, #0
 800a716:	d1d5      	bne.n	800a6c4 <__sfp+0x24>
 800a718:	f7ff ff78 	bl	800a60c <__sfp_lock_release>
 800a71c:	230c      	movs	r3, #12
 800a71e:	603b      	str	r3, [r7, #0]
 800a720:	e7ee      	b.n	800a700 <__sfp+0x60>
 800a722:	bf00      	nop
 800a724:	0800aa78 	.word	0x0800aa78
 800a728:	ffff0001 	.word	0xffff0001

0800a72c <_fwalk_reent>:
 800a72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a730:	4606      	mov	r6, r0
 800a732:	4688      	mov	r8, r1
 800a734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a738:	2700      	movs	r7, #0
 800a73a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a73e:	f1b9 0901 	subs.w	r9, r9, #1
 800a742:	d505      	bpl.n	800a750 <_fwalk_reent+0x24>
 800a744:	6824      	ldr	r4, [r4, #0]
 800a746:	2c00      	cmp	r4, #0
 800a748:	d1f7      	bne.n	800a73a <_fwalk_reent+0xe>
 800a74a:	4638      	mov	r0, r7
 800a74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a750:	89ab      	ldrh	r3, [r5, #12]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d907      	bls.n	800a766 <_fwalk_reent+0x3a>
 800a756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a75a:	3301      	adds	r3, #1
 800a75c:	d003      	beq.n	800a766 <_fwalk_reent+0x3a>
 800a75e:	4629      	mov	r1, r5
 800a760:	4630      	mov	r0, r6
 800a762:	47c0      	blx	r8
 800a764:	4307      	orrs	r7, r0
 800a766:	3568      	adds	r5, #104	; 0x68
 800a768:	e7e9      	b.n	800a73e <_fwalk_reent+0x12>

0800a76a <__retarget_lock_init_recursive>:
 800a76a:	4770      	bx	lr

0800a76c <__retarget_lock_acquire_recursive>:
 800a76c:	4770      	bx	lr

0800a76e <__retarget_lock_release_recursive>:
 800a76e:	4770      	bx	lr

0800a770 <__swhatbuf_r>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	460e      	mov	r6, r1
 800a774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a778:	2900      	cmp	r1, #0
 800a77a:	b096      	sub	sp, #88	; 0x58
 800a77c:	4614      	mov	r4, r2
 800a77e:	461d      	mov	r5, r3
 800a780:	da07      	bge.n	800a792 <__swhatbuf_r+0x22>
 800a782:	2300      	movs	r3, #0
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	89b3      	ldrh	r3, [r6, #12]
 800a788:	061a      	lsls	r2, r3, #24
 800a78a:	d410      	bmi.n	800a7ae <__swhatbuf_r+0x3e>
 800a78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a790:	e00e      	b.n	800a7b0 <__swhatbuf_r+0x40>
 800a792:	466a      	mov	r2, sp
 800a794:	f000 f902 	bl	800a99c <_fstat_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	dbf2      	blt.n	800a782 <__swhatbuf_r+0x12>
 800a79c:	9a01      	ldr	r2, [sp, #4]
 800a79e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7a6:	425a      	negs	r2, r3
 800a7a8:	415a      	adcs	r2, r3
 800a7aa:	602a      	str	r2, [r5, #0]
 800a7ac:	e7ee      	b.n	800a78c <__swhatbuf_r+0x1c>
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	b016      	add	sp, #88	; 0x58
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}

0800a7b8 <__smakebuf_r>:
 800a7b8:	898b      	ldrh	r3, [r1, #12]
 800a7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7bc:	079d      	lsls	r5, r3, #30
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	d507      	bpl.n	800a7d4 <__smakebuf_r+0x1c>
 800a7c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	6123      	str	r3, [r4, #16]
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	6163      	str	r3, [r4, #20]
 800a7d0:	b002      	add	sp, #8
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	ab01      	add	r3, sp, #4
 800a7d6:	466a      	mov	r2, sp
 800a7d8:	f7ff ffca 	bl	800a770 <__swhatbuf_r>
 800a7dc:	9900      	ldr	r1, [sp, #0]
 800a7de:	4605      	mov	r5, r0
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff f97f 	bl	8009ae4 <_malloc_r>
 800a7e6:	b948      	cbnz	r0, 800a7fc <__smakebuf_r+0x44>
 800a7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ec:	059a      	lsls	r2, r3, #22
 800a7ee:	d4ef      	bmi.n	800a7d0 <__smakebuf_r+0x18>
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
 800a7f4:	f043 0302 	orr.w	r3, r3, #2
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	e7e3      	b.n	800a7c4 <__smakebuf_r+0xc>
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <__smakebuf_r+0x7c>)
 800a7fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	9b00      	ldr	r3, [sp, #0]
 800a80c:	6163      	str	r3, [r4, #20]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	6120      	str	r0, [r4, #16]
 800a812:	b15b      	cbz	r3, 800a82c <__smakebuf_r+0x74>
 800a814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a818:	4630      	mov	r0, r6
 800a81a:	f000 f8d1 	bl	800a9c0 <_isatty_r>
 800a81e:	b128      	cbz	r0, 800a82c <__smakebuf_r+0x74>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f023 0303 	bic.w	r3, r3, #3
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	89a0      	ldrh	r0, [r4, #12]
 800a82e:	4305      	orrs	r5, r0
 800a830:	81a5      	strh	r5, [r4, #12]
 800a832:	e7cd      	b.n	800a7d0 <__smakebuf_r+0x18>
 800a834:	0800a5c9 	.word	0x0800a5c9

0800a838 <_malloc_usable_size_r>:
 800a838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a83c:	1f18      	subs	r0, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bfbc      	itt	lt
 800a842:	580b      	ldrlt	r3, [r1, r0]
 800a844:	18c0      	addlt	r0, r0, r3
 800a846:	4770      	bx	lr

0800a848 <_raise_r>:
 800a848:	291f      	cmp	r1, #31
 800a84a:	b538      	push	{r3, r4, r5, lr}
 800a84c:	4604      	mov	r4, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	d904      	bls.n	800a85c <_raise_r+0x14>
 800a852:	2316      	movs	r3, #22
 800a854:	6003      	str	r3, [r0, #0]
 800a856:	f04f 30ff 	mov.w	r0, #4294967295
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a85e:	b112      	cbz	r2, 800a866 <_raise_r+0x1e>
 800a860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a864:	b94b      	cbnz	r3, 800a87a <_raise_r+0x32>
 800a866:	4620      	mov	r0, r4
 800a868:	f000 f830 	bl	800a8cc <_getpid_r>
 800a86c:	462a      	mov	r2, r5
 800a86e:	4601      	mov	r1, r0
 800a870:	4620      	mov	r0, r4
 800a872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a876:	f000 b817 	b.w	800a8a8 <_kill_r>
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d00a      	beq.n	800a894 <_raise_r+0x4c>
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	d103      	bne.n	800a88a <_raise_r+0x42>
 800a882:	2316      	movs	r3, #22
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	2001      	movs	r0, #1
 800a888:	e7e7      	b.n	800a85a <_raise_r+0x12>
 800a88a:	2400      	movs	r4, #0
 800a88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a890:	4628      	mov	r0, r5
 800a892:	4798      	blx	r3
 800a894:	2000      	movs	r0, #0
 800a896:	e7e0      	b.n	800a85a <_raise_r+0x12>

0800a898 <raise>:
 800a898:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <raise+0xc>)
 800a89a:	4601      	mov	r1, r0
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f7ff bfd3 	b.w	800a848 <_raise_r>
 800a8a2:	bf00      	nop
 800a8a4:	20000024 	.word	0x20000024

0800a8a8 <_kill_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d07      	ldr	r5, [pc, #28]	; (800a8c8 <_kill_r+0x20>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	f7f7 fa0d 	bl	8001cd4 <_kill>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d102      	bne.n	800a8c4 <_kill_r+0x1c>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	b103      	cbz	r3, 800a8c4 <_kill_r+0x1c>
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	bd38      	pop	{r3, r4, r5, pc}
 800a8c6:	bf00      	nop
 800a8c8:	200005d0 	.word	0x200005d0

0800a8cc <_getpid_r>:
 800a8cc:	f7f7 ba00 	b.w	8001cd0 <_getpid>

0800a8d0 <__sread>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d8:	f000 f894 	bl	800aa04 <_read_r>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	bfab      	itete	ge
 800a8e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e4:	181b      	addge	r3, r3, r0
 800a8e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8ea:	bfac      	ite	ge
 800a8ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8ee:	81a3      	strhlt	r3, [r4, #12]
 800a8f0:	bd10      	pop	{r4, pc}

0800a8f2 <__swrite>:
 800a8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f6:	461f      	mov	r7, r3
 800a8f8:	898b      	ldrh	r3, [r1, #12]
 800a8fa:	05db      	lsls	r3, r3, #23
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	4616      	mov	r6, r2
 800a902:	d505      	bpl.n	800a910 <__swrite+0x1e>
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	2302      	movs	r3, #2
 800a90a:	2200      	movs	r2, #0
 800a90c:	f000 f868 	bl	800a9e0 <_lseek_r>
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	4632      	mov	r2, r6
 800a91e:	463b      	mov	r3, r7
 800a920:	4628      	mov	r0, r5
 800a922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a926:	f000 b817 	b.w	800a958 <_write_r>

0800a92a <__sseek>:
 800a92a:	b510      	push	{r4, lr}
 800a92c:	460c      	mov	r4, r1
 800a92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a932:	f000 f855 	bl	800a9e0 <_lseek_r>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	bf15      	itete	ne
 800a93c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a93e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a946:	81a3      	strheq	r3, [r4, #12]
 800a948:	bf18      	it	ne
 800a94a:	81a3      	strhne	r3, [r4, #12]
 800a94c:	bd10      	pop	{r4, pc}

0800a94e <__sclose>:
 800a94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a952:	f000 b813 	b.w	800a97c <_close_r>
	...

0800a958 <_write_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d07      	ldr	r5, [pc, #28]	; (800a978 <_write_r+0x20>)
 800a95c:	4604      	mov	r4, r0
 800a95e:	4608      	mov	r0, r1
 800a960:	4611      	mov	r1, r2
 800a962:	2200      	movs	r2, #0
 800a964:	602a      	str	r2, [r5, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	f7f7 f9d2 	bl	8001d10 <_write>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_write_r+0x1e>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_write_r+0x1e>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	200005d0 	.word	0x200005d0

0800a97c <_close_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d06      	ldr	r5, [pc, #24]	; (800a998 <_close_r+0x1c>)
 800a980:	2300      	movs	r3, #0
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	602b      	str	r3, [r5, #0]
 800a988:	f7f7 f9d0 	bl	8001d2c <_close>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_close_r+0x1a>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_close_r+0x1a>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	200005d0 	.word	0x200005d0

0800a99c <_fstat_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d07      	ldr	r5, [pc, #28]	; (800a9bc <_fstat_r+0x20>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	602b      	str	r3, [r5, #0]
 800a9aa:	f7f7 f9c2 	bl	8001d32 <_fstat>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d102      	bne.n	800a9b8 <_fstat_r+0x1c>
 800a9b2:	682b      	ldr	r3, [r5, #0]
 800a9b4:	b103      	cbz	r3, 800a9b8 <_fstat_r+0x1c>
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	bf00      	nop
 800a9bc:	200005d0 	.word	0x200005d0

0800a9c0 <_isatty_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d06      	ldr	r5, [pc, #24]	; (800a9dc <_isatty_r+0x1c>)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f7f7 f9b6 	bl	8001d3c <_isatty>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_isatty_r+0x1a>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_isatty_r+0x1a>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	200005d0 	.word	0x200005d0

0800a9e0 <_lseek_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d07      	ldr	r5, [pc, #28]	; (800aa00 <_lseek_r+0x20>)
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	602a      	str	r2, [r5, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f7f7 f9a6 	bl	8001d40 <_lseek>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_lseek_r+0x1e>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_lseek_r+0x1e>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	200005d0 	.word	0x200005d0

0800aa04 <_read_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d07      	ldr	r5, [pc, #28]	; (800aa24 <_read_r+0x20>)
 800aa08:	4604      	mov	r4, r0
 800aa0a:	4608      	mov	r0, r1
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	2200      	movs	r2, #0
 800aa10:	602a      	str	r2, [r5, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f7f7 f96c 	bl	8001cf0 <_read>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_read_r+0x1e>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_read_r+0x1e>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	200005d0 	.word	0x200005d0

0800aa28 <_init>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr

0800aa34 <_fini>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	bf00      	nop
 800aa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3a:	bc08      	pop	{r3}
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	4770      	bx	lr
